/* The following code was generated by JFlex 1.6.1 */

package FS_ANALIZADORES;

import	java_cup.runtime.Symbol; 
import UI.ObjetoEntrada;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico_fs.jflex</tt>
 */
public class Lexico_FS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\66\1\70\1\67\1\67\22\0\1\67\1\36\1\5"+
    "\2\0\1\34\1\42\1\6\1\25\1\26\1\31\1\27\1\45\1\30"+
    "\1\4\1\32\12\3\1\44\1\46\1\37\1\35\1\40\1\43\1\0"+
    "\1\13\1\60\1\56\1\12\1\10\1\15\1\61\1\63\1\52\1\65"+
    "\1\1\1\16\1\53\1\47\1\14\1\54\1\64\1\11\1\20\1\55"+
    "\1\50\1\7\1\1\1\57\1\62\1\1\1\23\1\0\1\24\1\33"+
    "\1\2\1\0\1\13\1\60\1\56\1\12\1\10\1\15\1\61\1\63"+
    "\1\52\1\65\1\1\1\16\1\53\1\47\1\14\1\54\1\64\1\11"+
    "\1\20\1\55\1\50\1\7\1\1\1\57\1\62\1\1\1\21\1\41"+
    "\1\22\7\0\1\70\75\0\1\1\154\0\2\51\115\0\1\17\u1e98\0"+
    "\1\1\17\0\1\70\1\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\2\1\7\2"+
    "\1\1\1\2\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\1\1\25\1\26\1\27\1\30\1\2"+
    "\1\1\5\2\1\31\2\0\1\32\1\0\5\2\1\0"+
    "\4\2\1\0\2\2\1\0\1\33\1\2\1\33\1\34"+
    "\1\35\2\0\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\2\2\0\3\2\1\0\5\2\1\44\1\45\1\2"+
    "\1\46\3\2\1\0\4\2\1\0\4\2\1\0\2\2"+
    "\2\0\2\2\1\0\1\31\1\2\2\0\2\2\1\47"+
    "\1\2\1\0\3\2\1\0\1\2\1\0\5\2\1\0"+
    "\6\2\1\0\2\2\1\0\2\2\1\0\2\2\1\0"+
    "\1\50\1\2\1\50\1\51\3\0\3\2\1\0\1\2"+
    "\1\0\3\2\2\52\1\0\5\2\1\0\4\2\1\0"+
    "\2\2\1\0\2\2\2\53\1\0\1\2\1\0\2\2"+
    "\1\0\1\2\3\0\3\2\1\0\1\2\1\0\1\2"+
    "\2\54\1\2\1\0\2\2\1\55\2\2\1\0\4\2"+
    "\2\56\1\57\1\0\2\2\1\0\1\2\1\0\2\2"+
    "\1\0\1\2\3\0\3\2\2\60\2\61\4\2\1\0"+
    "\4\2\2\62\2\2\1\63\1\0\1\2\1\64\2\2"+
    "\1\0\2\2\2\65\2\66\1\2\1\0\1\2\3\0"+
    "\4\2\1\0\4\2\1\0\5\2\1\67\1\0\1\2"+
    "\1\70\1\71\1\0\2\2\1\72\1\0\1\2\1\73"+
    "\1\74\1\75\1\73\1\74\1\75\1\2\1\0\2\2"+
    "\1\0\3\2\1\0\5\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\2\2\1\0\3\2\1\0\5\2"+
    "\1\0\1\2\2\76\1\2\2\77\1\2\2\100\1\2"+
    "\1\0\3\2\1\0\1\2\1\101\3\2\1\102\2\103"+
    "\2\2\1\0\3\2\1\0\3\2\2\104\5\2\2\105"+
    "\1\106\1\2\1\0\6\2\1\0\3\2\1\0\2\2"+
    "\1\0\4\2\1\0\3\2\1\0\1\2\1\107\1\0"+
    "\1\2\1\110\2\2\1\0\3\2\1\0\1\2\1\0"+
    "\1\2\1\111\1\2\1\0\1\2\1\112\1\113\2\114"+
    "\1\0\2\2\1\0\1\2\1\0\2\2\2\115\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\2\116\1\0\1\2\2\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[460];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\71\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\71\0\71\0\71\0\71\0\71\0\71\0\u0390"+
    "\0\u03c9\0\71\0\u0402\0\71\0\71\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\71\0\71\0\71\0\71\0\u0591"+
    "\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759"+
    "\0\u011d\0\71\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\71\0\71\0\u0b94\0\u0bcd"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0759\0\71\0\u0eb2\0\162\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\71\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\162\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2"+
    "\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\71\0\u1b63\0\162\0\162\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f"+
    "\0\71\0\162\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65"+
    "\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d"+
    "\0\u2166\0\u219f\0\u21d8\0\71\0\162\0\u2211\0\u224a\0\u2283"+
    "\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b"+
    "\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\71\0\162"+
    "\0\u25da\0\u2613\0\u264c\0\u2685\0\162\0\u26be\0\u26f7\0\u2730"+
    "\0\u2769\0\u27a2\0\u27db\0\u2814\0\71\0\162\0\162\0\u284d"+
    "\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15"+
    "\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\71"+
    "\0\162\0\71\0\162\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1"+
    "\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\71\0\162\0\u2dde\0\u2e17"+
    "\0\162\0\u2e50\0\u2e89\0\162\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d"+
    "\0\u2fa6\0\71\0\162\0\71\0\162\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219"+
    "\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1"+
    "\0\u341a\0\u3453\0\162\0\u348c\0\u34c5\0\162\0\162\0\u34fe"+
    "\0\u3537\0\u3570\0\162\0\u35a9\0\u35e2\0\71\0\71\0\71"+
    "\0\162\0\162\0\162\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff"+
    "\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7"+
    "\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f"+
    "\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57"+
    "\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f"+
    "\0\71\0\162\0\u3e58\0\71\0\162\0\u3e91\0\71\0\162"+
    "\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\162"+
    "\0\u4059\0\u4092\0\u40cb\0\162\0\71\0\162\0\u4104\0\u413d"+
    "\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305"+
    "\0\71\0\162\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422\0\71"+
    "\0\162\0\162\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578"+
    "\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707\0\u4740"+
    "\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf\0\u4908"+
    "\0\u4941\0\u497a\0\u49b3\0\u49ec\0\162\0\u4a25\0\u4a5e\0\162"+
    "\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed\0\u4c26"+
    "\0\u4c5f\0\u4c98\0\162\0\u4cd1\0\u4d0a\0\u4d43\0\162\0\162"+
    "\0\71\0\162\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99"+
    "\0\u4ed2\0\u4f0b\0\71\0\162\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef"+
    "\0\u5028\0\u5061\0\u509a\0\u50d3\0\u510c\0\u5145\0\71\0\162"+
    "\0\u517e\0\u51b7\0\71\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[460];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\3\1\51\1\52\1\53\1\3\1\54\1\55\1\3"+
    "\1\56\5\3\2\57\73\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\1\3\5\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\0\14\3\6\0"+
    "\1\5\1\60\64\0\5\61\1\62\63\61\6\63\1\0"+
    "\62\63\1\0\3\3\3\0\1\3\1\64\2\3\1\65"+
    "\3\3\1\0\1\3\26\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\1\3\1\66\6\3\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\1\3\1\67"+
    "\6\3\1\0\1\3\26\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\7\3\1\70\1\71\1\72\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\2\3\1\0\6\3\1\73\5\3\4\0\3\3"+
    "\3\0\4\3\1\74\3\3\1\0\1\3\26\0\1\3"+
    "\1\75\1\76\1\77\13\3\4\0\3\3\3\0\1\3"+
    "\1\100\6\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\13\0\1\101\40\0\2\102\17\0\3\3\3\0\1\3"+
    "\1\103\6\3\1\0\1\3\26\0\2\3\1\102\1\104"+
    "\13\3\32\0\1\105\71\0\1\106\71\0\1\107\1\110"+
    "\73\0\1\111\70\0\1\112\70\0\1\113\70\0\1\114"+
    "\74\0\1\115\71\0\1\116\27\0\3\3\3\0\10\3"+
    "\1\0\1\3\26\0\1\3\1\117\1\0\14\3\52\0"+
    "\1\120\3\0\1\121\16\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\1\122\1\3\1\0\1\3\1\123\12\3"+
    "\4\0\3\3\3\0\4\3\1\124\3\3\1\0\1\3"+
    "\26\0\2\3\1\125\1\126\13\3\4\0\3\3\3\0"+
    "\5\3\1\127\2\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\2\3\1\130\1\3\1\131"+
    "\3\3\1\0\1\3\26\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\10\3\1\0\1\3\26\0\1\3\1\132"+
    "\1\0\14\3\71\0\2\57\4\0\1\133\73\0\1\134"+
    "\63\0\3\3\3\0\2\3\1\135\5\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\2\3"+
    "\1\136\5\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\3\3\1\137\4\3\1\0\1\3"+
    "\26\0\2\3\1\0\3\3\1\140\10\3\4\0\3\3"+
    "\3\0\6\3\1\141\1\3\1\142\1\143\26\0\2\3"+
    "\1\0\3\3\1\144\10\3\4\0\3\3\3\0\10\3"+
    "\1\0\1\3\26\0\2\3\1\0\4\3\1\145\2\3"+
    "\1\146\4\3\61\0\1\147\13\0\3\3\3\0\10\3"+
    "\1\0\1\3\26\0\2\3\1\0\4\3\1\150\7\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\3\3\1\151\10\3\4\0\3\3\3\0\7\3"+
    "\1\152\1\0\1\3\26\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\10\3\1\0\1\3\26\0\1\153\1\3"+
    "\1\0\14\3\21\0\1\154\53\0\3\3\3\0\7\3"+
    "\1\155\1\0\1\3\26\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\1\3\1\156\6\3\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\21\0\1\157\121\0\1\160\22\0"+
    "\3\3\3\0\7\3\1\161\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\1\162\1\3\1\0\14\3\3\0\31\107\1\163"+
    "\37\107\66\110\1\164\2\110\1\0\3\3\3\0\7\3"+
    "\1\165\1\0\1\3\26\0\2\3\1\0\14\3\12\0"+
    "\1\166\135\0\1\167\15\0\3\3\3\0\1\170\7\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\2\3\1\0\2\3"+
    "\1\171\11\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\2\3\1\0\2\3\1\172\2\3\1\173\6\3"+
    "\52\0\1\174\22\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\1\175\1\3\1\0\14\3\4\0\3\3\3\0"+
    "\3\3\1\176\4\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\1\3\1\177\6\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\200\1\201\26\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\10\3\1\202\1\203\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\3\3\1\204\4\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\1\3\1\205\1\0\14\3"+
    "\4\0\3\3\3\0\5\3\1\206\2\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\1\3"+
    "\1\207\6\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\61\0\1\210\13\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\2\3\1\0\4\3\1\211\7\3\4\0\3\3"+
    "\3\0\1\3\1\212\6\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\1\3\1\213\2\3"+
    "\1\214\2\3\1\215\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\10\3\1\0\1\3\26\0"+
    "\1\3\1\216\1\0\14\3\13\0\1\217\61\0\3\3"+
    "\3\0\1\3\1\220\6\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\1\3\1\221\6\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\222\1\223\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\4\3\1\224\7\3\60\0\1\225\14\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\2\3\1\0\3\3"+
    "\1\226\10\3\4\0\3\3\3\0\2\3\1\227\5\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\13\0\1\230"+
    "\74\0\1\231\55\0\3\3\3\0\1\3\1\232\6\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\5\3\1\233\2\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\35\0\1\164\37\0\3\3\3\0\5\3"+
    "\1\234\2\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\13\0\1\235\71\0\1\236\2\0\1\237\55\0\3\3"+
    "\3\0\1\3\1\240\6\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\2\3\1\241\2\3"+
    "\1\242\2\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\243\1\244\13\3\54\0\2\245\17\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\245\1\246\13\3"+
    "\4\0\3\3\3\0\5\3\1\247\2\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\4\3"+
    "\1\250\3\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\17\0\1\251\55\0\3\3\3\0\5\3\1\252\2\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\61\0\1\253"+
    "\13\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\4\3\1\254\7\3\4\0\3\3\3\0\4\3"+
    "\1\255\3\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\4\3\1\256\7\3\4\0\3\3\3\0\2\3"+
    "\1\257\5\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\4\3\1\260\7\3\13\0\1\261\61\0\3\3"+
    "\3\0\1\3\1\262\6\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\1\263\1\3\1\0\14\3\4\0\3\3\3\0"+
    "\2\3\1\264\5\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\2\3\1\265\5\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\266\1\267\13\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\1\270"+
    "\1\3\1\0\14\3\52\0\1\271\22\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\1\272\1\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\1\273"+
    "\1\3\1\0\14\3\17\0\1\274\55\0\3\3\3\0"+
    "\5\3\1\275\2\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\10\3\1\0\1\3\26\0"+
    "\2\3\1\276\1\277\13\3\14\0\1\300\60\0\3\3"+
    "\3\0\2\3\1\301\5\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\2\3\1\0\7\3\1\302\4\3\61\0\1\303"+
    "\13\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\4\3\1\304\7\3\14\0\1\305\130\0\2\306"+
    "\27\0\1\307\60\0\3\3\3\0\2\3\1\310\5\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\2\3\1\306\1\311"+
    "\13\3\4\0\3\3\3\0\2\3\1\312\5\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\56\0\1\313\16\0"+
    "\3\3\3\0\10\3\1\0\1\3\26\0\2\3\1\0"+
    "\1\3\1\314\12\3\56\0\1\315\16\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\0\1\3\1\316"+
    "\12\3\4\0\3\3\3\0\10\3\1\317\1\320\26\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\2\3\1\321"+
    "\5\3\1\0\1\3\26\0\2\3\1\0\14\3\16\0"+
    "\1\322\56\0\3\3\3\0\4\3\1\323\3\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\3\3\1\324\4\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\1\3\1\325\6\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\1\326\1\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\3\3\1\327\10\3\52\0\1\330\22\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\1\331\1\3\1\0"+
    "\14\3\4\0\3\3\3\0\1\3\1\332\6\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\2\3\1\333\5\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\10\3\1\0\1\3\26\0"+
    "\2\3\1\0\7\3\1\334\4\3\61\0\1\335\13\0"+
    "\3\3\3\0\10\3\1\0\1\3\26\0\2\3\1\0"+
    "\4\3\1\336\7\3\4\0\3\3\3\0\5\3\1\337"+
    "\2\3\1\0\1\3\26\0\2\3\1\0\14\3\15\0"+
    "\1\340\57\0\3\3\3\0\3\3\1\341\4\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\1\3\1\342\6\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\17\0\1\343\55\0\3\3\3\0\5\3\1\344"+
    "\2\3\1\0\1\3\26\0\2\3\1\0\14\3\16\0"+
    "\1\345\56\0\3\3\3\0\4\3\1\346\3\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\0\5\3\1\347"+
    "\6\3\61\0\1\350\13\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\2\3\1\0\4\3\1\351\7\3\60\0"+
    "\1\352\66\0\1\353\72\0\1\354\14\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\0\3\3\1\355"+
    "\10\3\4\0\3\3\3\0\10\3\1\0\1\3\26\0"+
    "\2\3\1\0\1\3\1\356\12\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\0\3\3\1\357"+
    "\10\3\17\0\1\360\55\0\3\3\3\0\5\3\1\361"+
    "\2\3\1\0\1\3\26\0\2\3\1\0\14\3\17\0"+
    "\1\362\55\0\3\3\3\0\5\3\1\363\2\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\1\364\1\3\1\365\1\366\1\367\3\3\1\0\1\3"+
    "\26\0\2\3\1\370\1\371\2\3\1\372\1\373\1\3"+
    "\1\374\5\3\14\0\1\375\60\0\3\3\3\0\2\3"+
    "\1\376\5\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\1\3\1\377\6\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\4\3"+
    "\1\u0100\3\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\5\3\1\u0101\2\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\15\0\1\u0102\57\0\3\3"+
    "\3\0\3\3\1\u0103\4\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\2\3\1\u0104\5\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\4\3\1\u0105\3\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\4\3\1\u0106\3\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\13\0\1\u0107"+
    "\61\0\3\3\3\0\1\3\1\u0108\6\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\2\3"+
    "\1\u0109\5\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\52\0\1\u010a\22\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\1\u010b\1\3\1\0\14\3\14\0\1\u010c\60\0"+
    "\3\3\3\0\2\3\1\u010d\5\3\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\2\3\1\0\1\3\1\u010e\12\3\54\0"+
    "\2\u010f\17\0\3\3\3\0\10\3\1\0\1\3\26\0"+
    "\2\3\1\u010f\1\u0110\13\3\54\0\2\u0111\67\0\2\u0112"+
    "\31\0\1\u0113\56\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\2\3\1\u0111\1\u0114\13\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\u0112\1\u0115\13\3"+
    "\4\0\3\3\3\0\4\3\1\u0116\3\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\1\3"+
    "\1\u0117\6\3\1\0\1\3\26\0\2\3\1\u0118\1\u0119"+
    "\13\3\4\0\3\3\3\0\1\3\1\u011a\6\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\1\3\1\u011b\6\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\2\3\1\u011c\5\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\56\0\1\u011d\16\0"+
    "\3\3\3\0\10\3\1\0\1\3\26\0\2\3\1\0"+
    "\1\3\1\u011e\12\3\4\0\3\3\3\0\1\3\1\u011f"+
    "\6\3\1\0\1\3\26\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\4\3\1\u0120\1\u0121\2\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\5\3"+
    "\1\u0122\2\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\2\3\1\223\5\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\2\3"+
    "\1\u0123\5\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\13\0\1\u0124\61\0\3\3\3\0\1\3\1\u0125\6\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\2\3\1\u0126\5\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\2\3\1\u0127\5\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\52\0\1\u0128"+
    "\22\0\3\3\3\0\10\3\1\0\1\3\26\0\1\u0129"+
    "\1\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\2\3\1\0\2\3\1\u012a\11\3\4\0"+
    "\3\3\3\0\7\3\1\u012b\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\17\0\1\u012c\55\0\3\3\3\0\5\3"+
    "\1\u012d\2\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\14\0\1\u012e\70\0\1\u012f\70\0\1\u0130\60\0\3\3"+
    "\3\0\2\3\1\u0131\5\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\2\3\1\u0132\5\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\2\3\1\u0133\5\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\1\u0134\1\3\1\0\14\3\15\0\1\u0135\57\0"+
    "\3\3\3\0\3\3\1\u0136\4\3\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\2\3\1\0\2\3\1\u0137\11\3\4\0"+
    "\3\3\3\0\10\3\1\u0138\1\u0139\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\1\3\1\u013a\1\u013b\5\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\16\0\1\u013c"+
    "\56\0\3\3\3\0\4\3\1\u013d\3\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\10\3"+
    "\1\0\1\3\26\0\2\3\1\0\5\3\1\u013e\6\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\13\3\1\u013f\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\1\u0140\1\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\2\3\1\0\3\3"+
    "\1\u0141\10\3\52\0\1\u0142\22\0\3\3\3\0\10\3"+
    "\1\0\1\3\26\0\1\u0143\1\3\1\0\14\3\60\0"+
    "\1\u0144\14\0\3\3\3\0\10\3\1\0\1\3\26\0"+
    "\2\3\1\0\3\3\1\u0145\10\3\4\0\3\3\3\0"+
    "\5\3\1\u0146\2\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\52\0\1\u0147\22\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\1\u0148\1\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\2\3\1\0\3\3"+
    "\1\u0149\10\3\13\0\1\u014a\61\0\3\3\3\0\1\3"+
    "\1\u014b\6\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\2\3\1\u014c\5\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\57\0\1\u014d\15\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\2\3\1\0\2\3"+
    "\1\u014e\11\3\4\0\3\3\3\0\4\3\1\u014f\3\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\4\3\1\u0150\3\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\64\0\1\u0151\10\0\3\3\3\0\10\3"+
    "\1\0\1\3\26\0\2\3\1\0\7\3\1\u0152\4\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\3\3\1\u0153\10\3\4\0\3\3\3\0\4\3"+
    "\1\u0154\3\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\3\3\1\u0155\10\3\4\0\3\3\3\0\5\3"+
    "\1\u0156\2\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\60\0\1\u0157\14\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\2\3\1\0\3\3\1\u0158\10\3\13\0\1\u0159"+
    "\61\0\3\3\3\0\1\3\1\u015a\6\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\2\3"+
    "\1\u015b\5\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\16\0\1\u015c\56\0\3\3\3\0\4\3\1\u015d\3\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\4\3\1\u015e\3\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\17\0\1\u015f\55\0\3\3\3\0\5\3"+
    "\1\u0160\2\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\5\3\1\u0161\2\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\21\0\1\u0162\53\0\3\3"+
    "\3\0\7\3\1\u0163\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\10\3\1\0\1\3\26\0"+
    "\2\3\1\0\3\3\1\u0164\10\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\0\10\3\1\u0165"+
    "\3\3\13\0\1\u0166\61\0\3\3\3\0\1\3\1\u0167"+
    "\6\3\1\0\1\3\26\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\5\3\1\u0168\2\3\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\2\3\1\0\3\3\1\u0169\10\3\4\0"+
    "\3\3\3\0\1\3\1\u016a\1\u016b\5\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\10\3"+
    "\1\0\1\3\26\0\1\u016c\1\3\1\0\14\3\13\0"+
    "\1\u016d\61\0\3\3\3\0\1\3\1\u016e\6\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\1\3\1\u016f\6\3\1\0\1\3\26\0\1\u0170\1\3"+
    "\1\u0171\1\u0172\13\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\1\u0173\1\3\1\0\14\3\4\0\3\3"+
    "\3\0\3\3\1\u0174\4\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\13\0\1\u0175\61\0\3\3\3\0\1\3"+
    "\1\u0176\6\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\1\3\1\u0177\6\3\1\0\1\3"+
    "\26\0\2\3\1\0\14\3\4\0\3\3\3\0\3\3"+
    "\1\u0178\4\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\52\0\1\u0179\22\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\1\u017a\1\3\1\0\14\3\4\0\3\3\3\0"+
    "\1\3\1\u017b\6\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\10\3\1\0\1\3\26\0"+
    "\1\u017c\1\3\1\0\14\3\4\0\3\3\3\0\5\3"+
    "\1\u017d\2\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\3\3\1\u017e\10\3\4\0\3\3\3\0\5\3"+
    "\1\u017f\2\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\15\0\1\u0180\57\0\3\3\3\0\3\3\1\u0181\4\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\4\3\1\u0182\3\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\1\3\1\u0183\1\0\14\3\64\0\1\u0184\10\0"+
    "\3\3\3\0\10\3\1\0\1\3\26\0\2\3\1\0"+
    "\7\3\1\u0185\4\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\2\3\1\0\5\3\1\u0186\6\3\4\0"+
    "\3\3\3\0\1\3\1\u0187\6\3\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\2\3\1\0\5\3\1\u0188\6\3\4\0"+
    "\3\3\3\0\1\3\1\u0189\6\3\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\7\3\1\u018a"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\2\3\1\u018b\1\u018c"+
    "\13\3\4\0\3\3\3\0\10\3\1\0\1\3\26\0"+
    "\2\3\1\0\1\3\1\u018d\12\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\0\4\3\1\u018e"+
    "\7\3\16\0\1\u018f\56\0\3\3\3\0\4\3\1\u0190"+
    "\3\3\1\0\1\3\26\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\10\3\1\0\1\3\26\0\2\3\1\0"+
    "\3\3\1\u0191\10\3\4\0\3\3\3\0\10\3\1\u0192"+
    "\1\u0193\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\0\3\3\1\u0194"+
    "\10\3\4\0\3\3\3\0\3\3\1\u0195\4\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\1\u0196\1\3\1\0\14\3"+
    "\67\0\1\u0197\5\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\2\3\1\0\12\3\1\u0198\1\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\2\3\1\0\6\3"+
    "\1\u0199\5\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\26\0\2\3\1\0\3\3\1\u019a\10\3\63\0\1\u019b"+
    "\11\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\6\3\1\u019c\5\3\4\0\3\3\3\0\5\3"+
    "\1\u019d\2\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\15\0\1\u019e\57\0\3\3\3\0\3\3\1\u019f\4\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\5\3\1\u01a0\2\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\5\3\1\u01a1\2\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\1\3\1\u01a2\1\0"+
    "\14\3\53\0\1\u01a3\21\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\1\3\1\u01a4\1\0\14\3\4\0\3\3"+
    "\3\0\2\3\1\u01a5\5\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\5\3\1\u01a6\2\3"+
    "\1\0\1\3\26\0\2\3\1\0\14\3\21\0\1\u01a7"+
    "\53\0\3\3\3\0\7\3\1\u01a8\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\13\0\1\u01a9\61\0\3\3\3\0"+
    "\1\3\1\u01aa\6\3\1\0\1\3\26\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\2\3\1\u01ab\5\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\26\0\2\3\1\0\1\3\1\u01ac"+
    "\12\3\13\0\1\u01ad\61\0\3\3\3\0\1\3\1\u01ae"+
    "\6\3\1\0\1\3\26\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\1\3\1\u01af\6\3\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\2\3\1\u01b0"+
    "\5\3\1\0\1\3\26\0\2\3\1\0\14\3\13\0"+
    "\1\u01b1\61\0\3\3\3\0\1\3\1\u01b2\6\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\16\0\1\u01b3\56\0"+
    "\3\3\3\0\4\3\1\u01b4\3\3\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\1\3\1\u01b5"+
    "\6\3\1\0\1\3\26\0\2\3\1\0\14\3\60\0"+
    "\1\u01b6\14\0\3\3\3\0\10\3\1\0\1\3\26\0"+
    "\2\3\1\0\3\3\1\u01b7\10\3\14\0\1\u01b8\60\0"+
    "\3\3\3\0\2\3\1\u01b9\5\3\1\0\1\3\26\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\2\3\1\u01ba"+
    "\5\3\1\0\1\3\26\0\2\3\1\0\14\3\16\0"+
    "\1\u01bb\56\0\3\3\3\0\4\3\1\u01bc\3\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\61\0\1\u01bd\13\0"+
    "\3\3\3\0\10\3\1\0\1\3\26\0\2\3\1\0"+
    "\4\3\1\u01be\7\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\26\0\2\3\1\u01bf\1\u01c0\13\3\66\0\1\u01c1"+
    "\6\0\3\3\3\0\10\3\1\0\1\3\26\0\2\3"+
    "\1\0\11\3\1\u01c2\2\3\61\0\1\u01c3\13\0\3\3"+
    "\3\0\10\3\1\0\1\3\26\0\2\3\1\0\4\3"+
    "\1\u01c4\7\3\54\0\2\u01c5\17\0\3\3\3\0\10\3"+
    "\1\0\1\3\26\0\2\3\1\u01c5\1\u01c6\13\3\17\0"+
    "\1\u01c7\55\0\3\3\3\0\5\3\1\u01c8\2\3\1\0"+
    "\1\3\26\0\2\3\1\0\14\3\12\0\1\u01c9\62\0"+
    "\3\3\3\0\1\u01ca\7\3\1\0\1\3\26\0\2\3"+
    "\1\0\14\3\17\0\1\u01cb\55\0\3\3\3\0\5\3"+
    "\1\u01cc\2\3\1\0\1\3\26\0\2\3\1\0\14\3"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20976];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\13\1\6\11\2\1\1\11"+
    "\1\1\2\11\6\1\4\11\10\1\2\0\1\11\1\0"+
    "\5\1\1\0\4\1\1\0\2\1\1\0\3\1\2\11"+
    "\2\0\6\11\1\1\2\0\3\1\1\0\6\1\1\11"+
    "\5\1\1\0\4\1\1\0\4\1\1\0\2\1\2\0"+
    "\2\1\1\0\1\11\1\1\2\0\4\1\1\0\3\1"+
    "\1\0\1\1\1\0\5\1\1\0\6\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\11\3\1\3\0"+
    "\3\1\1\0\1\1\1\0\3\1\1\11\1\1\1\0"+
    "\5\1\1\0\4\1\1\0\2\1\1\0\2\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\3\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\5\1\1\0\4\1\1\11\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\3\0\3\1\1\11"+
    "\1\1\1\11\5\1\1\0\4\1\1\11\4\1\1\0"+
    "\4\1\1\0\2\1\1\11\1\1\1\11\2\1\1\0"+
    "\1\1\3\0\4\1\1\0\4\1\1\0\6\1\1\0"+
    "\3\1\1\0\3\1\1\0\1\1\3\11\4\1\1\0"+
    "\2\1\1\0\3\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\3\1\1\0"+
    "\5\1\1\0\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\0\3\1\1\0\6\1\1\11\3\1\1\0"+
    "\3\1\1\0\3\1\1\11\6\1\1\11\3\1\1\0"+
    "\6\1\1\0\3\1\1\0\2\1\1\0\4\1\1\0"+
    "\3\1\1\0\2\1\1\0\4\1\1\0\3\1\1\0"+
    "\1\1\1\0\3\1\1\0\3\1\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[460];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//codigo que se utilizara en el analizador lexico

private ObjetoEntrada entrada;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

private void _error(String erro_texto, int erro_column, int erro_line)
{
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Léxico FuncionScript");
    error_encontrado.setDescripcion("Caracter no reconocido: " + erro_texto);
    error_encontrado.setLinea(Integer.toString(erro_line));
    error_encontrado.setColumna(Integer.toString(erro_column));
    error_encontrado.setTipo("Lexico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);
    //System.out.println("Error Lexico: " + erro_texto + " columna: " + erro_column + " linea: " + erro_line);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico_FS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Tabla_Simbolos_FS_CUP.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { _error( new String (yytext()),yycolumn,yyline);
            }
          case 80: break;
          case 2: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.identificador, yycolumn,yyline, new String(yytext()));
            }
          case 81: break;
          case 3: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.entero, yycolumn,yyline, new String(yytext()));
            }
          case 82: break;
          case 4: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_dot, yycolumn,yyline, new String(yytext()));
            }
          case 83: break;
          case 5: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_key_open, yycolumn,yyline, new String(yytext()));
            }
          case 84: break;
          case 6: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_key_close, yycolumn,yyline, new String(yytext()));
            }
          case 85: break;
          case 7: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_cor_open, yycolumn,yyline, new String(yytext()));
            }
          case 86: break;
          case 8: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_cor_close, yycolumn,yyline, new String(yytext()));
            }
          case 87: break;
          case 9: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_par_open, yycolumn,yyline, new String(yytext()));
            }
          case 88: break;
          case 10: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_par_close, yycolumn,yyline, new String(yytext()));
            }
          case 89: break;
          case 11: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_plus, yycolumn,yyline, new String(yytext()));
            }
          case 90: break;
          case 12: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_minus, yycolumn,yyline, new String(yytext()));
            }
          case 91: break;
          case 13: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_mul, yycolumn,yyline, new String(yytext()));
            }
          case 92: break;
          case 14: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_div, yycolumn,yyline, new String(yytext()));
            }
          case 93: break;
          case 15: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_to, yycolumn,yyline, new String(yytext()));
            }
          case 94: break;
          case 16: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_mod, yycolumn,yyline, new String(yytext()));
            }
          case 95: break;
          case 17: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_equal, yycolumn,yyline, new String(yytext()));
            }
          case 96: break;
          case 18: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_not, yycolumn,yyline, new String(yytext()));
            }
          case 97: break;
          case 19: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_less, yycolumn,yyline, new String(yytext()));
            }
          case 98: break;
          case 20: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_greather, yycolumn,yyline, new String(yytext()));
            }
          case 99: break;
          case 21: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_ternario, yycolumn,yyline, new String(yytext()));
            }
          case 100: break;
          case 22: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_dobledot, yycolumn,yyline, new String(yytext()));
            }
          case 101: break;
          case 23: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_coma, yycolumn,yyline, new String(yytext()));
            }
          case 102: break;
          case 24: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_dotcoma, yycolumn,yyline, new String(yytext()));
            }
          case 103: break;
          case 25: 
            { /* Se ignoran */
            }
          case 104: break;
          case 26: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.cadena, yycolumn,yyline, new String(yytext()));
            }
          case 105: break;
          case 27: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_si, yycolumn,yyline, new String(yytext()));
            }
          case 106: break;
          case 28: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_increment, yycolumn,yyline, new String(yytext()));
            }
          case 107: break;
          case 29: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_decrement, yycolumn,yyline, new String(yytext()));
            }
          case 108: break;
          case 30: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_compare, yycolumn,yyline, new String(yytext()));
            }
          case 109: break;
          case 31: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_diferent, yycolumn,yyline, new String(yytext()));
            }
          case 110: break;
          case 32: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_less_equal, yycolumn,yyline, new String(yytext()));
            }
          case 111: break;
          case 33: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_greather_equal, yycolumn,yyline, new String(yytext()));
            }
          case 112: break;
          case 34: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_or, yycolumn,yyline, new String(yytext()));
            }
          case 113: break;
          case 35: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_and, yycolumn,yyline, new String(yytext()));
            }
          case 114: break;
          case 36: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.decimal, yycolumn,yyline, new String(yytext()));
            }
          case 115: break;
          case 37: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.caracter, yycolumn,yyline, new String(yytext()));
            }
          case 116: break;
          case 38: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_var, yycolumn,yyline, new String(yytext()));
            }
          case 117: break;
          case 39: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_map, yycolumn,yyline, new String(yytext()));
            }
          case 118: break;
          case 40: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_sino, yycolumn,yyline, new String(yytext()));
            }
          case 119: break;
          case 41: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_nulo, yycolumn,yyline, new String(yytext()));
            }
          case 120: break;
          case 42: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_caso, yycolumn,yyline, new String(yytext()));
            }
          case 121: break;
          case 43: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.booleano, yycolumn,yyline, new String(yytext()));
            }
          case 122: break;
          case 44: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_todos, yycolumn,yyline, new String(yytext()));
            }
          case 123: break;
          case 45: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_reduce, yycolumn,yyline, new String(yytext()));
            }
          case 124: break;
          case 46: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_clic, yycolumn,yyline, new String(yytext()));
            }
          case 125: break;
          case 47: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_alguno, yycolumn,yyline, new String(yytext()));
            }
          case 126: break;
          case 48: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_maximo, yycolumn,yyline, new String(yytext()));
            }
          case 127: break;
          case 49: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_minimo, yycolumn,yyline, new String(yytext()));
            }
          case 128: break;
          case 50: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_buscar, yycolumn,yyline, new String(yytext()));
            }
          case 129: break;
          case 51: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_defecto, yycolumn,yyline, new String(yytext()));
            }
          case 130: break;
          case 52: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_detener, yycolumn,yyline, new String(yytext()));
            }
          case 131: break;
          case 53: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_funcion, yycolumn,yyline, new String(yytext()));
            }
          case 132: break;
          case 54: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_filtrar, yycolumn,yyline, new String(yytext()));
            }
          case 133: break;
          case 55: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_retornar, yycolumn,yyline, new String(yytext()));
            }
          case 134: break;
          case 56: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_cerrar, yycolumn,yyline, new String(yytext()));
            }
          case 135: break;
          case 57: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_cargar, yycolumn,yyline, new String(yytext()));
            }
          case 136: break;
          case 58: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_leergxml, yycolumn,yyline, new String(yytext()));
            }
          case 137: break;
          case 59: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_invertir, yycolumn,yyline, new String(yytext()));
            }
          case 138: break;
          case 60: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_imprimir, yycolumn,yyline, new String(yytext()));
            }
          case 139: break;
          case 61: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_importar, yycolumn,yyline, new String(yytext()));
            }
          case 140: break;
          case 62: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_ascendente, yycolumn,yyline, new String(yytext()));
            }
          case 141: break;
          case 63: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_selecciona, yycolumn,yyline, new String(yytext()));
            }
          case 142: break;
          case 64: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearvideo, yycolumn,yyline, new String(yytext()));
            }
          case 143: break;
          case 65: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_creartexto, yycolumn,yyline, new String(yytext()));
            }
          case 144: break;
          case 66: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearboton, yycolumn,yyline, new String(yytext()));
            }
          case 145: break;
          case 67: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_descendente, yycolumn,yyline, new String(yytext()));
            }
          case 146: break;
          case 68: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearimagen, yycolumn,yyline, new String(yytext()));
            }
          case 147: break;
          case 69: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_obtenerid, yycolumn,yyline, new String(yytext()));
            }
          case 148: break;
          case 70: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearventana, yycolumn,yyline, new String(yytext()));
            }
          case 149: break;
          case 71: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearareatexto, yycolumn,yyline, new String(yytext()));
            }
          case 150: break;
          case 72: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearcajatexto, yycolumn,yyline, new String(yytext()));
            }
          case 151: break;
          case 73: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearcontenedor, yycolumn,yyline, new String(yytext()));
            }
          case 152: break;
          case 74: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_obtenernombre, yycolumn,yyline, new String(yytext()));
            }
          case 153: break;
          case 75: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearreproductor, yycolumn,yyline, new String(yytext()));
            }
          case 154: break;
          case 76: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_creardesplegable, yycolumn,yyline, new String(yytext()));
            }
          case 155: break;
          case 77: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_obteneretiqueta, yycolumn,yyline, new String(yytext()));
            }
          case 156: break;
          case 78: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearcontrolnumerico, yycolumn,yyline, new String(yytext()));
            }
          case 157: break;
          case 79: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_creararray, yycolumn,yyline, new String(yytext()));
            }
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
