/* The following code was generated by JFlex 1.6.1 */

package FS_ANALIZADORES;

import	java_cup.runtime.Symbol; 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico_fs.jflex</tt>
 */
public class Lexico_FS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\64\1\66\1\65\1\65\22\0\1\65\1\34\1\5"+
    "\2\0\1\32\1\40\1\6\1\23\1\24\1\27\1\25\1\43\1\26"+
    "\1\4\1\30\12\3\1\42\1\44\1\35\1\33\1\36\1\41\1\0"+
    "\1\13\1\56\1\54\1\12\1\10\1\15\1\57\1\61\1\50\1\63"+
    "\1\1\1\16\1\51\1\45\1\14\1\52\1\62\1\11\1\20\1\53"+
    "\1\46\1\7\1\1\1\55\1\60\1\1\3\0\1\31\1\2\1\0"+
    "\1\13\1\56\1\54\1\12\1\10\1\15\1\57\1\61\1\50\1\63"+
    "\1\1\1\16\1\51\1\45\1\14\1\52\1\62\1\11\1\20\1\53"+
    "\1\46\1\7\1\1\1\55\1\60\1\1\1\21\1\37\1\22\7\0"+
    "\1\66\75\0\1\1\154\0\2\47\115\0\1\17\u1e98\0\1\1\17\0"+
    "\1\66\1\66\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\2\1\7\2"+
    "\1\1\1\2\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\2\1\1\23\1\24\1\25\1\26\1\2\1\1\5\2"+
    "\1\27\2\0\1\30\1\0\5\2\1\0\4\2\1\0"+
    "\2\2\1\0\1\31\1\2\1\31\1\32\1\33\2\0"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\2\2\0"+
    "\3\2\1\0\5\2\1\42\1\43\1\2\1\44\3\2"+
    "\1\0\4\2\1\0\4\2\1\0\2\2\2\0\2\2"+
    "\1\0\1\27\1\2\2\0\2\2\1\45\1\2\1\0"+
    "\3\2\1\0\1\2\1\0\5\2\1\0\6\2\1\0"+
    "\2\2\1\0\2\2\1\0\2\2\1\0\1\46\1\2"+
    "\1\46\1\47\3\0\3\2\1\0\1\2\1\0\3\2"+
    "\2\50\1\0\5\2\1\0\4\2\1\0\2\2\1\0"+
    "\2\2\2\51\1\0\1\2\1\0\2\2\1\0\1\2"+
    "\3\0\3\2\1\0\1\2\1\0\1\2\2\52\1\2"+
    "\1\0\2\2\1\53\2\2\1\0\4\2\2\54\1\55"+
    "\1\0\2\2\1\0\1\2\1\0\2\2\1\0\1\2"+
    "\3\0\3\2\2\56\2\57\4\2\1\0\4\2\2\60"+
    "\2\2\1\61\1\0\1\2\1\62\2\2\1\0\2\2"+
    "\2\63\2\64\1\2\1\0\1\2\3\0\4\2\1\0"+
    "\4\2\1\0\5\2\1\65\1\0\1\2\1\66\1\67"+
    "\1\0\2\2\1\70\1\0\1\2\1\71\1\72\1\73"+
    "\1\71\1\72\1\73\1\2\1\0\2\2\1\0\3\2"+
    "\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2"+
    "\1\0\2\2\1\0\3\2\1\0\5\2\1\0\1\2"+
    "\2\74\1\2\2\75\1\2\2\76\1\2\1\0\3\2"+
    "\1\0\1\2\1\77\3\2\1\100\2\101\2\2\1\0"+
    "\3\2\1\0\3\2\2\102\5\2\2\103\1\104\1\2"+
    "\1\0\6\2\1\0\3\2\1\0\2\2\1\0\4\2"+
    "\1\0\3\2\1\0\1\2\1\105\1\0\1\2\1\106"+
    "\2\2\1\0\3\2\1\0\1\2\1\0\1\2\1\107"+
    "\1\2\1\0\1\2\1\110\1\111\2\112\1\0\2\2"+
    "\1\0\1\2\1\0\2\2\2\113\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\2\114"+
    "\1\0\1\2\2\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\67\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\67\0\67\0\67\0\67\0\u0370\0\u03a7\0\67"+
    "\0\u03de\0\67\0\67\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\67\0\67\0\67\0\67\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u0113\0\67"+
    "\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf"+
    "\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\67\0\67\0\u0b2c\0\u0b63\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0717\0\67\0\u0e2e\0\156\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\67\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\156"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec"+
    "\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\67\0\u1a6d"+
    "\0\156\0\156\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\67\0\156"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    "\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071"+
    "\0\u20a8\0\67\0\156\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb"+
    "\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373"+
    "\0\u23aa\0\u23e1\0\u2418\0\u244f\0\67\0\156\0\u2486\0\u24bd"+
    "\0\u24f4\0\u252b\0\156\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e"+
    "\0\u2675\0\u26ac\0\67\0\156\0\156\0\u26e3\0\u271a\0\u2751"+
    "\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909"+
    "\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\67\0\156\0\67"+
    "\0\156\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d"+
    "\0\u2bd4\0\u2c0b\0\67\0\156\0\u2c42\0\u2c79\0\156\0\u2cb0"+
    "\0\u2ce7\0\156\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\67"+
    "\0\156\0\67\0\156\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d"+
    "\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5"+
    "\0\u30fc\0\u3133\0\u316a\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d"+
    "\0\156\0\u32b4\0\u32eb\0\156\0\156\0\u3322\0\u3359\0\u3390"+
    "\0\156\0\u33c7\0\u33fe\0\67\0\67\0\67\0\156\0\156"+
    "\0\156\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f"+
    "\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700\0\u3737"+
    "\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8\0\u38ef"+
    "\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\u3aa7"+
    "\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u3bba\0\u3bf1\0\67\0\156"+
    "\0\u3c28\0\67\0\156\0\u3c5f\0\67\0\156\0\u3c96\0\u3ccd"+
    "\0\u3d04\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\156\0\u3e17\0\u3e4e"+
    "\0\u3e85\0\156\0\67\0\156\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61"+
    "\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074\0\u40ab\0\67\0\156"+
    "\0\u40e2\0\u4119\0\u4150\0\u4187\0\u41be\0\67\0\156\0\156"+
    "\0\u41f5\0\u422c\0\u4263\0\u429a\0\u42d1\0\u4308\0\u433f\0\u4376"+
    "\0\u43ad\0\u43e4\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7\0\u452e"+
    "\0\u4565\0\u459c\0\u45d3\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6"+
    "\0\u471d\0\u4754\0\156\0\u478b\0\u47c2\0\156\0\u47f9\0\u4830"+
    "\0\u4867\0\u489e\0\u48d5\0\u490c\0\u4943\0\u497a\0\u49b1\0\u49e8"+
    "\0\156\0\u4a1f\0\u4a56\0\u4a8d\0\156\0\156\0\67\0\156"+
    "\0\u4ac4\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45"+
    "\0\67\0\156\0\u4c7c\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\u4d8f"+
    "\0\u4dc6\0\u4dfd\0\u4e34\0\u4e6b\0\67\0\156\0\u4ea2\0\u4ed9"+
    "\0\67\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\3\1\47"+
    "\1\50\1\51\1\3\1\52\1\53\1\3\1\54\5\3"+
    "\2\55\71\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\1\3\5\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\6\0\1\5\1\56"+
    "\62\0\5\57\1\60\61\57\6\61\1\0\60\61\1\0"+
    "\3\3\3\0\1\3\1\62\2\3\1\63\3\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\1\3\1\64\6\3\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\1\3\1\65\6\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\7\3\1\66\1\67\1\70\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\24\0\2\3"+
    "\1\0\6\3\1\71\5\3\4\0\3\3\3\0\4\3"+
    "\1\72\3\3\1\0\1\3\24\0\1\3\1\73\1\74"+
    "\1\75\13\3\4\0\3\3\3\0\1\3\1\76\6\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\13\0\1\77"+
    "\36\0\2\100\17\0\3\3\3\0\1\3\1\101\6\3"+
    "\1\0\1\3\24\0\2\3\1\100\1\102\13\3\30\0"+
    "\1\103\67\0\1\104\67\0\1\105\1\106\71\0\1\107"+
    "\66\0\1\110\66\0\1\111\66\0\1\112\72\0\1\113"+
    "\67\0\1\114\27\0\3\3\3\0\10\3\1\0\1\3"+
    "\24\0\1\3\1\115\1\0\14\3\50\0\1\116\3\0"+
    "\1\117\16\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\1\120\1\3\1\0\1\3\1\121\12\3\4\0\3\3"+
    "\3\0\4\3\1\122\3\3\1\0\1\3\24\0\2\3"+
    "\1\123\1\124\13\3\4\0\3\3\3\0\5\3\1\125"+
    "\2\3\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\2\3\1\126\1\3\1\127\3\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\24\0\1\3\1\130\1\0\14\3"+
    "\67\0\2\55\4\0\1\131\71\0\1\132\61\0\3\3"+
    "\3\0\2\3\1\133\5\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\2\3\1\134\5\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\3\3\1\135\4\3\1\0\1\3\24\0\2\3"+
    "\1\0\3\3\1\136\10\3\4\0\3\3\3\0\6\3"+
    "\1\137\1\3\1\140\1\141\24\0\2\3\1\0\3\3"+
    "\1\142\10\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\24\0\2\3\1\0\4\3\1\143\2\3\1\144\4\3"+
    "\57\0\1\145\13\0\3\3\3\0\10\3\1\0\1\3"+
    "\24\0\2\3\1\0\4\3\1\146\7\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\3\3"+
    "\1\147\10\3\4\0\3\3\3\0\7\3\1\150\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\24\0\1\151\1\3\1\0\14\3"+
    "\21\0\1\152\51\0\3\3\3\0\7\3\1\153\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\1\3\1\154\6\3\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\21\0\1\155\115\0\1\156\22\0\3\3\3\0"+
    "\7\3\1\157\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\24\0\1\160"+
    "\1\3\1\0\14\3\3\0\27\105\1\161\37\105\64\106"+
    "\1\162\2\106\1\0\3\3\3\0\7\3\1\163\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\12\0\1\164\131\0"+
    "\1\165\15\0\3\3\3\0\1\166\7\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\2\3\1\0\2\3\1\167\11\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\24\0\2\3"+
    "\1\0\2\3\1\170\2\3\1\171\6\3\50\0\1\172"+
    "\22\0\3\3\3\0\10\3\1\0\1\3\24\0\1\173"+
    "\1\3\1\0\14\3\4\0\3\3\3\0\3\3\1\174"+
    "\4\3\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\1\3\1\175\6\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\176"+
    "\1\177\24\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\200\1\201\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\3\3\1\202\4\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\1\3\1\203\1\0\14\3\4\0\3\3"+
    "\3\0\5\3\1\204\2\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\1\3\1\205\6\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\57\0\1\206"+
    "\13\0\3\3\3\0\10\3\1\0\1\3\24\0\2\3"+
    "\1\0\4\3\1\207\7\3\4\0\3\3\3\0\1\3"+
    "\1\210\6\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\1\3\1\211\2\3\1\212\2\3"+
    "\1\213\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\10\3\1\0\1\3\24\0\1\3\1\214"+
    "\1\0\14\3\13\0\1\215\57\0\3\3\3\0\1\3"+
    "\1\216\6\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\1\3\1\217\6\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\10\3"+
    "\1\220\1\221\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\4\3"+
    "\1\222\7\3\56\0\1\223\14\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\2\3\1\0\3\3\1\224\10\3"+
    "\4\0\3\3\3\0\2\3\1\225\5\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\13\0\1\226\72\0\1\227"+
    "\53\0\3\3\3\0\1\3\1\230\6\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\5\3"+
    "\1\231\2\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\33\0\1\162\37\0\3\3\3\0\5\3\1\232\2\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\13\0\1\233"+
    "\67\0\1\234\2\0\1\235\53\0\3\3\3\0\1\3"+
    "\1\236\6\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\2\3\1\237\2\3\1\240\2\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\241\1\242"+
    "\13\3\52\0\2\243\17\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\243\1\244\13\3\4\0\3\3"+
    "\3\0\5\3\1\245\2\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\4\3\1\246\3\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\17\0\1\247"+
    "\53\0\3\3\3\0\5\3\1\250\2\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\57\0\1\251\13\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\4\3"+
    "\1\252\7\3\4\0\3\3\3\0\4\3\1\253\3\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\4\3"+
    "\1\254\7\3\4\0\3\3\3\0\2\3\1\255\5\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\4\3"+
    "\1\256\7\3\13\0\1\257\57\0\3\3\3\0\1\3"+
    "\1\260\6\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\24\0\1\261"+
    "\1\3\1\0\14\3\4\0\3\3\3\0\2\3\1\262"+
    "\5\3\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\2\3\1\263\5\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\264\1\265\13\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\1\266\1\3\1\0"+
    "\14\3\50\0\1\267\22\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\1\270\1\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\1\271\1\3\1\0"+
    "\14\3\17\0\1\272\53\0\3\3\3\0\5\3\1\273"+
    "\2\3\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\10\3\1\0\1\3\24\0\2\3\1\274"+
    "\1\275\13\3\14\0\1\276\56\0\3\3\3\0\2\3"+
    "\1\277\5\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\24\0\2\3"+
    "\1\0\7\3\1\300\4\3\57\0\1\301\13\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\4\3"+
    "\1\302\7\3\14\0\1\303\124\0\2\304\27\0\1\305"+
    "\56\0\3\3\3\0\2\3\1\306\5\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\2\3\1\304\1\307\13\3\4\0"+
    "\3\3\3\0\2\3\1\310\5\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\54\0\1\311\16\0\3\3\3\0"+
    "\10\3\1\0\1\3\24\0\2\3\1\0\1\3\1\312"+
    "\12\3\54\0\1\313\16\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\0\1\3\1\314\12\3\4\0"+
    "\3\3\3\0\10\3\1\315\1\316\24\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\2\3\1\317\5\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\16\0\1\320\54\0"+
    "\3\3\3\0\4\3\1\321\3\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\3\3\1\322"+
    "\4\3\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\1\3\1\323\6\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\1\324\1\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\3\3"+
    "\1\325\10\3\50\0\1\326\22\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\1\327\1\3\1\0\14\3\4\0"+
    "\3\3\3\0\1\3\1\330\6\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\2\3\1\331"+
    "\5\3\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\10\3\1\0\1\3\24\0\2\3\1\0"+
    "\7\3\1\332\4\3\57\0\1\333\13\0\3\3\3\0"+
    "\10\3\1\0\1\3\24\0\2\3\1\0\4\3\1\334"+
    "\7\3\4\0\3\3\3\0\5\3\1\335\2\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\15\0\1\336\55\0"+
    "\3\3\3\0\3\3\1\337\4\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\1\3\1\340"+
    "\6\3\1\0\1\3\24\0\2\3\1\0\14\3\17\0"+
    "\1\341\53\0\3\3\3\0\5\3\1\342\2\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\16\0\1\343\54\0"+
    "\3\3\3\0\4\3\1\344\3\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\0\5\3\1\345\6\3\57\0"+
    "\1\346\13\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\2\3\1\0\4\3\1\347\7\3\56\0\1\350\64\0"+
    "\1\351\70\0\1\352\14\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\0\3\3\1\353\10\3\4\0"+
    "\3\3\3\0\10\3\1\0\1\3\24\0\2\3\1\0"+
    "\1\3\1\354\12\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\0\3\3\1\355\10\3\17\0"+
    "\1\356\53\0\3\3\3\0\5\3\1\357\2\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\17\0\1\360\53\0"+
    "\3\3\3\0\5\3\1\361\2\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\1\362\1\3"+
    "\1\363\1\364\1\365\3\3\1\0\1\3\24\0\2\3"+
    "\1\366\1\367\2\3\1\370\1\371\1\3\1\372\5\3"+
    "\14\0\1\373\56\0\3\3\3\0\2\3\1\374\5\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\1\3\1\375\6\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\4\3\1\376\3\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\5\3\1\377\2\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\15\0\1\u0100\55\0\3\3\3\0\3\3"+
    "\1\u0101\4\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\2\3\1\u0102\5\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\4\3"+
    "\1\u0103\3\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\4\3\1\u0104\3\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\13\0\1\u0105\57\0\3\3"+
    "\3\0\1\3\1\u0106\6\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\2\3\1\u0107\5\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\50\0\1\u0108"+
    "\22\0\3\3\3\0\10\3\1\0\1\3\24\0\1\u0109"+
    "\1\3\1\0\14\3\14\0\1\u010a\56\0\3\3\3\0"+
    "\2\3\1\u010b\5\3\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\2\3\1\0\1\3\1\u010c\12\3\52\0\2\u010d\17\0"+
    "\3\3\3\0\10\3\1\0\1\3\24\0\2\3\1\u010d"+
    "\1\u010e\13\3\52\0\2\u010f\65\0\2\u0110\31\0\1\u0111"+
    "\54\0\3\3\3\0\10\3\1\0\1\3\24\0\2\3"+
    "\1\u010f\1\u0112\13\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\u0110\1\u0113\13\3\4\0\3\3"+
    "\3\0\4\3\1\u0114\3\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\1\3\1\u0115\6\3"+
    "\1\0\1\3\24\0\2\3\1\u0116\1\u0117\13\3\4\0"+
    "\3\3\3\0\1\3\1\u0118\6\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\1\3\1\u0119"+
    "\6\3\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\2\3\1\u011a\5\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\54\0\1\u011b\16\0\3\3\3\0"+
    "\10\3\1\0\1\3\24\0\2\3\1\0\1\3\1\u011c"+
    "\12\3\4\0\3\3\3\0\1\3\1\u011d\6\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\4\3\1\u011e\1\u011f\2\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\5\3\1\u0120\2\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\2\3\1\221\5\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\2\3\1\u0121\5\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\13\0\1\u0122"+
    "\57\0\3\3\3\0\1\3\1\u0123\6\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\2\3"+
    "\1\u0124\5\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\2\3\1\u0125\5\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\50\0\1\u0126\22\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\1\u0127\1\3\1\0"+
    "\14\3\4\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\2\3\1\0\2\3\1\u0128\11\3\4\0\3\3\3\0"+
    "\7\3\1\u0129\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\17\0\1\u012a\53\0\3\3\3\0\5\3\1\u012b\2\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\14\0\1\u012c"+
    "\66\0\1\u012d\66\0\1\u012e\56\0\3\3\3\0\2\3"+
    "\1\u012f\5\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\2\3\1\u0130\5\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\2\3"+
    "\1\u0131\5\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\24\0\1\u0132"+
    "\1\3\1\0\14\3\15\0\1\u0133\55\0\3\3\3\0"+
    "\3\3\1\u0134\4\3\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\2\3\1\0\2\3\1\u0135\11\3\4\0\3\3\3\0"+
    "\10\3\1\u0136\1\u0137\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\1\3\1\u0138\1\u0139\5\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\16\0\1\u013a\54\0\3\3"+
    "\3\0\4\3\1\u013b\3\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\24\0\2\3\1\0\5\3\1\u013c\6\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\13\3"+
    "\1\u013d\4\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\1\u013e\1\3\1\0\14\3\4\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\2\3\1\0\3\3\1\u013f\10\3"+
    "\50\0\1\u0140\22\0\3\3\3\0\10\3\1\0\1\3"+
    "\24\0\1\u0141\1\3\1\0\14\3\56\0\1\u0142\14\0"+
    "\3\3\3\0\10\3\1\0\1\3\24\0\2\3\1\0"+
    "\3\3\1\u0143\10\3\4\0\3\3\3\0\5\3\1\u0144"+
    "\2\3\1\0\1\3\24\0\2\3\1\0\14\3\50\0"+
    "\1\u0145\22\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\1\u0146\1\3\1\0\14\3\4\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\2\3\1\0\3\3\1\u0147\10\3"+
    "\13\0\1\u0148\57\0\3\3\3\0\1\3\1\u0149\6\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\2\3\1\u014a\5\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\55\0\1\u014b\15\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\2\3\1\0\2\3\1\u014c\11\3"+
    "\4\0\3\3\3\0\4\3\1\u014d\3\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\4\3"+
    "\1\u014e\3\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\62\0\1\u014f\10\0\3\3\3\0\10\3\1\0\1\3"+
    "\24\0\2\3\1\0\7\3\1\u0150\4\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\3\3"+
    "\1\u0151\10\3\4\0\3\3\3\0\4\3\1\u0152\3\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\3\3"+
    "\1\u0153\10\3\4\0\3\3\3\0\5\3\1\u0154\2\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\56\0\1\u0155"+
    "\14\0\3\3\3\0\10\3\1\0\1\3\24\0\2\3"+
    "\1\0\3\3\1\u0156\10\3\13\0\1\u0157\57\0\3\3"+
    "\3\0\1\3\1\u0158\6\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\2\3\1\u0159\5\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\16\0\1\u015a"+
    "\54\0\3\3\3\0\4\3\1\u015b\3\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\4\3"+
    "\1\u015c\3\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\17\0\1\u015d\53\0\3\3\3\0\5\3\1\u015e\2\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\5\3\1\u015f\2\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\21\0\1\u0160\51\0\3\3\3\0\7\3"+
    "\1\u0161\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\10\3\1\0\1\3\24\0\2\3\1\0"+
    "\3\3\1\u0162\10\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\0\10\3\1\u0163\3\3\13\0"+
    "\1\u0164\57\0\3\3\3\0\1\3\1\u0165\6\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\5\3\1\u0166\2\3\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\2\3\1\0\3\3\1\u0167\10\3\4\0\3\3\3\0"+
    "\1\3\1\u0168\1\u0169\5\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\10\3\1\0\1\3"+
    "\24\0\1\u016a\1\3\1\0\14\3\13\0\1\u016b\57\0"+
    "\3\3\3\0\1\3\1\u016c\6\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\1\3\1\u016d"+
    "\6\3\1\0\1\3\24\0\1\u016e\1\3\1\u016f\1\u0170"+
    "\13\3\4\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\1\u0171\1\3\1\0\14\3\4\0\3\3\3\0\3\3"+
    "\1\u0172\4\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\13\0\1\u0173\57\0\3\3\3\0\1\3\1\u0174\6\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\1\3\1\u0175\6\3\1\0\1\3\24\0\2\3"+
    "\1\0\14\3\4\0\3\3\3\0\3\3\1\u0176\4\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\50\0\1\u0177"+
    "\22\0\3\3\3\0\10\3\1\0\1\3\24\0\1\u0178"+
    "\1\3\1\0\14\3\4\0\3\3\3\0\1\3\1\u0179"+
    "\6\3\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\10\3\1\0\1\3\24\0\1\u017a\1\3"+
    "\1\0\14\3\4\0\3\3\3\0\5\3\1\u017b\2\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\4\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\3\3"+
    "\1\u017c\10\3\4\0\3\3\3\0\5\3\1\u017d\2\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\15\0\1\u017e"+
    "\55\0\3\3\3\0\3\3\1\u017f\4\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\4\3"+
    "\1\u0180\3\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\24\0\1\3"+
    "\1\u0181\1\0\14\3\62\0\1\u0182\10\0\3\3\3\0"+
    "\10\3\1\0\1\3\24\0\2\3\1\0\7\3\1\u0183"+
    "\4\3\4\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\2\3\1\0\5\3\1\u0184\6\3\4\0\3\3\3\0"+
    "\1\3\1\u0185\6\3\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\2\3\1\0\5\3\1\u0186\6\3\4\0\3\3\3\0"+
    "\1\3\1\u0187\6\3\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\7\3\1\u0188\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\2\3\1\u0189\1\u018a\13\3\4\0"+
    "\3\3\3\0\10\3\1\0\1\3\24\0\2\3\1\0"+
    "\1\3\1\u018b\12\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\0\4\3\1\u018c\7\3\16\0"+
    "\1\u018d\54\0\3\3\3\0\4\3\1\u018e\3\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\10\3\1\0\1\3\24\0\2\3\1\0\3\3\1\u018f"+
    "\10\3\4\0\3\3\3\0\10\3\1\u0190\1\u0191\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\0\3\3\1\u0192\10\3\4\0"+
    "\3\3\3\0\3\3\1\u0193\4\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\1\u0194\1\3\1\0\14\3\65\0\1\u0195"+
    "\5\0\3\3\3\0\10\3\1\0\1\3\24\0\2\3"+
    "\1\0\12\3\1\u0196\1\3\4\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\2\3\1\0\6\3\1\u0197\5\3"+
    "\4\0\3\3\3\0\10\3\1\0\1\3\24\0\2\3"+
    "\1\0\3\3\1\u0198\10\3\61\0\1\u0199\11\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\6\3"+
    "\1\u019a\5\3\4\0\3\3\3\0\5\3\1\u019b\2\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\15\0\1\u019c"+
    "\55\0\3\3\3\0\3\3\1\u019d\4\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\5\3"+
    "\1\u019e\2\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\5\3\1\u019f\2\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\4\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\1\3\1\u01a0\1\0\14\3\51\0"+
    "\1\u01a1\21\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\1\3\1\u01a2\1\0\14\3\4\0\3\3\3\0\2\3"+
    "\1\u01a3\5\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\4\0\3\3\3\0\5\3\1\u01a4\2\3\1\0\1\3"+
    "\24\0\2\3\1\0\14\3\21\0\1\u01a5\51\0\3\3"+
    "\3\0\7\3\1\u01a6\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\13\0\1\u01a7\57\0\3\3\3\0\1\3\1\u01a8"+
    "\6\3\1\0\1\3\24\0\2\3\1\0\14\3\4\0"+
    "\3\3\3\0\2\3\1\u01a9\5\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\4\0\3\3\3\0\10\3\1\0"+
    "\1\3\24\0\2\3\1\0\1\3\1\u01aa\12\3\13\0"+
    "\1\u01ab\57\0\3\3\3\0\1\3\1\u01ac\6\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\4\0\3\3\3\0"+
    "\1\3\1\u01ad\6\3\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\2\3\1\u01ae\5\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\13\0\1\u01af\57\0"+
    "\3\3\3\0\1\3\1\u01b0\6\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\16\0\1\u01b1\54\0\3\3\3\0"+
    "\4\3\1\u01b2\3\3\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\1\3\1\u01b3\6\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\56\0\1\u01b4\14\0"+
    "\3\3\3\0\10\3\1\0\1\3\24\0\2\3\1\0"+
    "\3\3\1\u01b5\10\3\14\0\1\u01b6\56\0\3\3\3\0"+
    "\2\3\1\u01b7\5\3\1\0\1\3\24\0\2\3\1\0"+
    "\14\3\4\0\3\3\3\0\2\3\1\u01b8\5\3\1\0"+
    "\1\3\24\0\2\3\1\0\14\3\16\0\1\u01b9\54\0"+
    "\3\3\3\0\4\3\1\u01ba\3\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\57\0\1\u01bb\13\0\3\3\3\0"+
    "\10\3\1\0\1\3\24\0\2\3\1\0\4\3\1\u01bc"+
    "\7\3\4\0\3\3\3\0\10\3\1\0\1\3\24\0"+
    "\2\3\1\u01bd\1\u01be\13\3\64\0\1\u01bf\6\0\3\3"+
    "\3\0\10\3\1\0\1\3\24\0\2\3\1\0\11\3"+
    "\1\u01c0\2\3\57\0\1\u01c1\13\0\3\3\3\0\10\3"+
    "\1\0\1\3\24\0\2\3\1\0\4\3\1\u01c2\7\3"+
    "\52\0\2\u01c3\17\0\3\3\3\0\10\3\1\0\1\3"+
    "\24\0\2\3\1\u01c3\1\u01c4\13\3\17\0\1\u01c5\53\0"+
    "\3\3\3\0\5\3\1\u01c6\2\3\1\0\1\3\24\0"+
    "\2\3\1\0\14\3\12\0\1\u01c7\60\0\3\3\3\0"+
    "\1\u01c8\7\3\1\0\1\3\24\0\2\3\1\0\14\3"+
    "\17\0\1\u01c9\53\0\3\3\3\0\5\3\1\u01ca\2\3"+
    "\1\0\1\3\24\0\2\3\1\0\14\3\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\13\1\4\11\2\1\1\11"+
    "\1\1\2\11\6\1\4\11\10\1\2\0\1\11\1\0"+
    "\5\1\1\0\4\1\1\0\2\1\1\0\3\1\2\11"+
    "\2\0\6\11\1\1\2\0\3\1\1\0\6\1\1\11"+
    "\5\1\1\0\4\1\1\0\4\1\1\0\2\1\2\0"+
    "\2\1\1\0\1\11\1\1\2\0\4\1\1\0\3\1"+
    "\1\0\1\1\1\0\5\1\1\0\6\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\11\3\1\3\0"+
    "\3\1\1\0\1\1\1\0\3\1\1\11\1\1\1\0"+
    "\5\1\1\0\4\1\1\0\2\1\1\0\2\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\3\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\5\1\1\0\4\1\1\11\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\3\0\3\1\1\11"+
    "\1\1\1\11\5\1\1\0\4\1\1\11\4\1\1\0"+
    "\4\1\1\0\2\1\1\11\1\1\1\11\2\1\1\0"+
    "\1\1\3\0\4\1\1\0\4\1\1\0\6\1\1\0"+
    "\3\1\1\0\3\1\1\0\1\1\3\11\4\1\1\0"+
    "\2\1\1\0\3\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\3\1\1\0"+
    "\5\1\1\0\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\0\3\1\1\0\6\1\1\11\3\1\1\0"+
    "\3\1\1\0\3\1\1\11\6\1\1\11\3\1\1\0"+
    "\6\1\1\0\3\1\1\0\2\1\1\0\4\1\1\0"+
    "\3\1\1\0\2\1\1\0\4\1\1\0\3\1\1\0"+
    "\1\1\1\0\3\1\1\0\3\1\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private void _error(String erro_texto, int erro_column, int erro_line)
    {
        System.out.println("Error Lexico: " + erro_texto + " columna: " + erro_column + " linea: " + erro_line);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico_FS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Tabla_Simbolos_FS_CUP.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { _error( new String (yytext()),yycolumn,yyline);
            }
          case 78: break;
          case 2: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.identificador, yycolumn,yyline, new String(yytext()));
            }
          case 79: break;
          case 3: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.entero, yycolumn,yyline, new String(yytext()));
            }
          case 80: break;
          case 4: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_dot, yycolumn,yyline, new String(yytext()));
            }
          case 81: break;
          case 5: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_key_open, yycolumn,yyline, new String(yytext()));
            }
          case 82: break;
          case 6: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_key_close, yycolumn,yyline, new String(yytext()));
            }
          case 83: break;
          case 7: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_par_open, yycolumn,yyline, new String(yytext()));
            }
          case 84: break;
          case 8: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_par_close, yycolumn,yyline, new String(yytext()));
            }
          case 85: break;
          case 9: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_plus, yycolumn,yyline, new String(yytext()));
            }
          case 86: break;
          case 10: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_minus, yycolumn,yyline, new String(yytext()));
            }
          case 87: break;
          case 11: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_mul, yycolumn,yyline, new String(yytext()));
            }
          case 88: break;
          case 12: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_div, yycolumn,yyline, new String(yytext()));
            }
          case 89: break;
          case 13: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_to, yycolumn,yyline, new String(yytext()));
            }
          case 90: break;
          case 14: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_mod, yycolumn,yyline, new String(yytext()));
            }
          case 91: break;
          case 15: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_equal, yycolumn,yyline, new String(yytext()));
            }
          case 92: break;
          case 16: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_not, yycolumn,yyline, new String(yytext()));
            }
          case 93: break;
          case 17: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_less, yycolumn,yyline, new String(yytext()));
            }
          case 94: break;
          case 18: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_greather, yycolumn,yyline, new String(yytext()));
            }
          case 95: break;
          case 19: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_ternario, yycolumn,yyline, new String(yytext()));
            }
          case 96: break;
          case 20: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_dobledot, yycolumn,yyline, new String(yytext()));
            }
          case 97: break;
          case 21: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_coma, yycolumn,yyline, new String(yytext()));
            }
          case 98: break;
          case 22: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_dotcoma, yycolumn,yyline, new String(yytext()));
            }
          case 99: break;
          case 23: 
            { /* Se ignoran */
            }
          case 100: break;
          case 24: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.cadena, yycolumn,yyline, new String(yytext()));
            }
          case 101: break;
          case 25: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_si, yycolumn,yyline, new String(yytext()));
            }
          case 102: break;
          case 26: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_increment, yycolumn,yyline, new String(yytext()));
            }
          case 103: break;
          case 27: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_decrement, yycolumn,yyline, new String(yytext()));
            }
          case 104: break;
          case 28: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_compare, yycolumn,yyline, new String(yytext()));
            }
          case 105: break;
          case 29: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_diferent, yycolumn,yyline, new String(yytext()));
            }
          case 106: break;
          case 30: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_less_equal, yycolumn,yyline, new String(yytext()));
            }
          case 107: break;
          case 31: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_greather_equal, yycolumn,yyline, new String(yytext()));
            }
          case 108: break;
          case 32: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_or, yycolumn,yyline, new String(yytext()));
            }
          case 109: break;
          case 33: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.s_and, yycolumn,yyline, new String(yytext()));
            }
          case 110: break;
          case 34: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.decimal, yycolumn,yyline, new String(yytext()));
            }
          case 111: break;
          case 35: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.caracter, yycolumn,yyline, new String(yytext()));
            }
          case 112: break;
          case 36: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_var, yycolumn,yyline, new String(yytext()));
            }
          case 113: break;
          case 37: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_map, yycolumn,yyline, new String(yytext()));
            }
          case 114: break;
          case 38: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_sino, yycolumn,yyline, new String(yytext()));
            }
          case 115: break;
          case 39: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_nulo, yycolumn,yyline, new String(yytext()));
            }
          case 116: break;
          case 40: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_caso, yycolumn,yyline, new String(yytext()));
            }
          case 117: break;
          case 41: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.booleano, yycolumn,yyline, new String(yytext()));
            }
          case 118: break;
          case 42: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_todos, yycolumn,yyline, new String(yytext()));
            }
          case 119: break;
          case 43: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_reduce, yycolumn,yyline, new String(yytext()));
            }
          case 120: break;
          case 44: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_clic, yycolumn,yyline, new String(yytext()));
            }
          case 121: break;
          case 45: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_alguno, yycolumn,yyline, new String(yytext()));
            }
          case 122: break;
          case 46: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_maximo, yycolumn,yyline, new String(yytext()));
            }
          case 123: break;
          case 47: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_minimo, yycolumn,yyline, new String(yytext()));
            }
          case 124: break;
          case 48: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_buscar, yycolumn,yyline, new String(yytext()));
            }
          case 125: break;
          case 49: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_defecto, yycolumn,yyline, new String(yytext()));
            }
          case 126: break;
          case 50: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_detener, yycolumn,yyline, new String(yytext()));
            }
          case 127: break;
          case 51: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_funcion, yycolumn,yyline, new String(yytext()));
            }
          case 128: break;
          case 52: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_filtrar, yycolumn,yyline, new String(yytext()));
            }
          case 129: break;
          case 53: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_retornar, yycolumn,yyline, new String(yytext()));
            }
          case 130: break;
          case 54: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_cerrar, yycolumn,yyline, new String(yytext()));
            }
          case 131: break;
          case 55: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_cargar, yycolumn,yyline, new String(yytext()));
            }
          case 132: break;
          case 56: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_leergxml, yycolumn,yyline, new String(yytext()));
            }
          case 133: break;
          case 57: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_invertir, yycolumn,yyline, new String(yytext()));
            }
          case 134: break;
          case 58: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_imprimir, yycolumn,yyline, new String(yytext()));
            }
          case 135: break;
          case 59: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_importar, yycolumn,yyline, new String(yytext()));
            }
          case 136: break;
          case 60: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_ascendente, yycolumn,yyline, new String(yytext()));
            }
          case 137: break;
          case 61: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_selecciona, yycolumn,yyline, new String(yytext()));
            }
          case 138: break;
          case 62: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearvideo, yycolumn,yyline, new String(yytext()));
            }
          case 139: break;
          case 63: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_creartexto, yycolumn,yyline, new String(yytext()));
            }
          case 140: break;
          case 64: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearboton, yycolumn,yyline, new String(yytext()));
            }
          case 141: break;
          case 65: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_descendente, yycolumn,yyline, new String(yytext()));
            }
          case 142: break;
          case 66: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearimagen, yycolumn,yyline, new String(yytext()));
            }
          case 143: break;
          case 67: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_obtenerid, yycolumn,yyline, new String(yytext()));
            }
          case 144: break;
          case 68: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearventana, yycolumn,yyline, new String(yytext()));
            }
          case 145: break;
          case 69: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearareatexto, yycolumn,yyline, new String(yytext()));
            }
          case 146: break;
          case 70: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearcajatexto, yycolumn,yyline, new String(yytext()));
            }
          case 147: break;
          case 71: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearcontenedor, yycolumn,yyline, new String(yytext()));
            }
          case 148: break;
          case 72: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_obtenernombre, yycolumn,yyline, new String(yytext()));
            }
          case 149: break;
          case 73: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearreproductor, yycolumn,yyline, new String(yytext()));
            }
          case 150: break;
          case 74: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_creardesplegable, yycolumn,yyline, new String(yytext()));
            }
          case 151: break;
          case 75: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_obteneretiqueta, yycolumn,yyline, new String(yytext()));
            }
          case 152: break;
          case 76: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_crearcontrolnumerico, yycolumn,yyline, new String(yytext()));
            }
          case 153: break;
          case 77: 
            { return new Symbol(Tabla_Simbolos_FS_CUP.r_creararray, yycolumn,yyline, new String(yytext()));
            }
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
