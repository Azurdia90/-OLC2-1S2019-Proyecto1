
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package FS_ANALIZADORES;

import java.io.File;
import java_cup.runtime.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import FS_TABLA_SIMBOLOS.Tabla_Enums;
import FS_AST.*;
import UI.ObjetoEntrada;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_FS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tabla_Simbolos_FS_CUP.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico_FS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico_FS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_FS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\006\006\000\002\006\005\000\002\005\005\000\002" +
    "\007\006\000\002\010\007\000\002\011\011\000\002\011" +
    "\015\000\002\011\012\000\002\011\016\000\002\013\016" +
    "\000\002\013\011\000\002\014\010\000\002\012\012\000" +
    "\002\015\005\000\002\015\003\000\002\016\004\000\002" +
    "\016\003\000\002\017\004\000\002\017\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\005\000\002\020\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\004\000\002\021\004\000\002\022\004\000\002\022\004" +
    "\000\002\023\005\000\002\023\005\000\002\023\004\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\014\011\021\046\006\047\013\053\010\055" +
    "\012\001\002\000\020\002\ufff9\011\ufff9\013\ufff9\046\ufff9" +
    "\047\ufff9\053\ufff9\055\ufff9\001\002\000\004\020\205\001" +
    "\002\000\004\011\021\001\002\000\006\017\175\044\176" +
    "\001\002\000\004\021\145\001\002\000\004\002\144\001" +
    "\002\000\004\021\120\001\002\000\004\021\025\001\002" +
    "\000\020\002\ufffa\011\ufffa\013\ufffa\046\ufffa\047\ufffa\053" +
    "\ufffa\055\ufffa\001\002\000\020\002\ufffe\011\ufffe\013\ufffe" +
    "\046\ufffe\047\ufffe\053\ufffe\055\ufffe\001\002\000\004\020" +
    "\024\001\002\000\004\020\023\001\002\000\016\002\000" +
    "\011\021\046\006\047\013\053\010\055\012\001\002\000" +
    "\010\017\uffea\020\uffea\044\uffea\001\002\000\020\002\uffff" +
    "\011\uffff\013\uffff\046\uffff\047\uffff\053\uffff\055\uffff\001" +
    "\002\000\020\002\ufffd\011\ufffd\013\ufffd\046\ufffd\047\ufffd" +
    "\053\ufffd\055\ufffd\001\002\000\020\002\ufffb\011\ufffb\013" +
    "\ufffb\046\ufffb\047\ufffb\053\ufffb\055\ufffb\001\002\000\030" +
    "\004\034\005\045\006\032\007\035\010\027\011\047\021" +
    "\040\023\041\024\044\043\033\045\031\001\002\000\052" +
    "\014\uffdf\015\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\001\002\000\052\014\uffc6\015\uffc6\020\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\001\002\000\052\014\uffe3\015" +
    "\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\001\002" +
    "\000\052\014\uffcb\015\uffcb\020\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\001\002\000\052\014\uffc8\015\uffc8\020\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\001\002\000\030\004" +
    "\034\005\045\006\032\007\035\010\027\011\047\021\040" +
    "\023\041\024\044\043\033\045\031\001\002\000\052\014" +
    "\uffca\015\uffca\020\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\001\002\000\052\014\uffc7\015\uffc7\020\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\001\002\000\052\014\uffe2\015\uffe2" +
    "\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\001\002\000" +
    "\052\014\113\015\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\001\002\000\030\004\034\005\045\006\032\007" +
    "\035\010\027\011\047\021\040\023\041\024\044\043\033" +
    "\045\031\001\002\000\030\004\034\005\045\006\032\007" +
    "\035\010\027\011\047\021\040\023\041\024\044\043\033" +
    "\045\031\001\002\000\052\014\uffe1\015\uffe1\020\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\001\002\000\052\014\uffe5" +
    "\015\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\001" +
    "\002\000\030\004\034\005\045\006\032\007\035\010\027" +
    "\011\047\021\040\023\041\024\044\043\033\045\031\001" +
    "\002\000\052\014\uffc9\015\uffc9\020\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\001\002\000\044\022\065\023\056\024" +
    "\067\025\055\026\052\027\054\030\070\031\062\032\051" +
    "\033\061\034\066\035\064\036\053\037\057\040\063\041" +
    "\050\042\060\001\002\000\052\014\uffc5\015\uffc5\020\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\001\002\000\030\004" +
    "\034\005\045\006\032\007\035\010\027\011\047\021\040" +
    "\023\041\024\044\043\033\045\031\001\002\000\052\014" +
    "\uffd7\015\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\001\002\000\030\004\034\005\045\006\032\007\035\010" +
    "\027\011\047\021\040\023\041\024\044\043\033\045\031" +
    "\001\002\000\030\004\034\005\045\006\032\007\035\010" +
    "\027\011\047\021\040\023\041\024\044\043\033\045\031" +
    "\001\002\000\030\004\034\005\045\006\032\007\035\010" +
    "\027\011\047\021\040\023\041\024\044\043\033\045\031" +
    "\001\002\000\030\004\034\005\045\006\032\007\035\010" +
    "\027\011\047\021\040\023\041\024\044\043\033\045\031" +
    "\001\002\000\030\004\034\005\045\006\032\007\035\010" +
    "\027\011\047\021\040\023\041\024\044\043\033\045\031" +
    "\001\002\000\030\004\034\005\045\006\032\007\035\010" +
    "\027\011\047\021\040\023\041\024\044\043\033\045\031" +
    "\001\002\000\030\004\034\005\045\006\032\007\035\010" +
    "\027\011\047\021\040\023\041\024\044\043\033\045\031" +
    "\001\002\000\030\004\034\005\045\006\032\007\035\010" +
    "\027\011\047\021\040\023\041\024\044\043\033\045\031" +
    "\001\002\000\052\014\uffd8\015\uffd8\020\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\001\002\000\030\004\034\005\045" +
    "\006\032\007\035\010\027\011\047\021\040\023\041\024" +
    "\044\043\033\045\031\001\002\000\030\004\034\005\045" +
    "\006\032\007\035\010\027\011\047\021\040\023\041\024" +
    "\044\043\033\045\031\001\002\000\004\020\ufff5\001\002" +
    "\000\030\004\034\005\045\006\032\007\035\010\027\011" +
    "\047\021\040\023\041\024\044\043\033\045\031\001\002" +
    "\000\030\004\034\005\045\006\032\007\035\010\027\011" +
    "\047\021\040\023\041\024\044\043\033\045\031\001\002" +
    "\000\030\004\034\005\045\006\032\007\035\010\027\011" +
    "\047\021\040\023\041\024\044\043\033\045\031\001\002" +
    "\000\052\014\uffda\015\uffda\020\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\062\032\051" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\001\002\000\052\014\uffdd\015\uffdd\020\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\055\026\052\027\054\030" +
    "\070\031\062\032\051\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\001\002\000\052\014" +
    "\uffcc\015\uffcc\020\uffcc\022\uffcc\023\056\024\067\025\055" +
    "\026\052\027\054\030\070\031\062\032\051\033\uffcc\034" +
    "\uffcc\035\064\036\053\037\057\040\063\041\uffcc\042\uffcc" +
    "\001\002\000\052\014\uffd0\015\uffd0\020\uffd0\022\uffd0\023" +
    "\056\024\067\025\055\026\052\027\054\030\070\031\062" +
    "\032\051\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\001\002\000\052\014\uffcf\015\uffcf" +
    "\020\uffcf\022\uffcf\023\056\024\067\025\055\026\052\027" +
    "\054\030\070\031\062\032\051\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\001\002\000" +
    "\052\014\uffcd\015\uffcd\020\uffcd\022\uffcd\023\056\024\067" +
    "\025\055\026\052\027\054\030\070\031\062\032\051\033" +
    "\uffcd\034\uffcd\035\064\036\053\037\057\040\063\041\uffcd" +
    "\042\uffcd\001\002\000\052\014\uffd3\015\uffd3\020\uffd3\022" +
    "\uffd3\023\056\024\067\025\055\026\052\027\054\030\070" +
    "\031\062\032\051\033\061\034\066\035\064\036\053\037" +
    "\057\040\063\041\uffd3\042\uffd3\001\002\000\052\014\uffce" +
    "\015\uffce\020\uffce\022\uffce\023\056\024\067\025\055\026" +
    "\052\027\054\030\070\031\062\032\051\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\001" +
    "\002\000\052\014\uffde\015\uffde\020\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\055\026\052\027\054\030\070\031\062\032" +
    "\051\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\001\002\000\052\014\uffdc\015\uffdc\020" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\054" +
    "\030\070\031\062\032\051\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\001\002\000\052" +
    "\014\uffd9\015\uffd9\020\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\062\032\051\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\001\002\000\052\014\uffd1\015\uffd1\020\uffd1\022\uffd1" +
    "\023\056\024\067\025\055\026\052\027\054\030\070\031" +
    "\062\032\051\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\001\002\000\052\014\uffdb\015" +
    "\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\054\030\070\031\062\032\051\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\001\002" +
    "\000\052\014\uffd4\015\uffd4\020\uffd4\022\uffd4\023\056\024" +
    "\067\025\055\026\052\027\054\030\070\031\062\032\051" +
    "\033\061\034\066\035\064\036\053\037\057\040\063\041" +
    "\uffd4\042\060\001\002\000\052\014\uffd6\015\uffd6\020\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\055\026\052\027\054\030" +
    "\070\031\062\032\051\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\001\002\000\052\014" +
    "\uffd5\015\uffd5\020\uffd5\022\uffd5\023\uffd5\024\uffd5\025\055" +
    "\026\052\027\054\030\070\031\062\032\051\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\001\002\000\044\022\112\023\056\024\067\025\055\026" +
    "\052\027\054\030\070\031\062\032\051\033\061\034\066" +
    "\035\064\036\053\037\057\040\063\041\050\042\060\001" +
    "\002\000\052\014\uffe0\015\uffe0\020\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\001\002\000\030\004\034\005\045\006" +
    "\032\007\035\010\027\011\047\021\040\023\041\024\044" +
    "\043\033\045\031\001\002\000\044\015\115\023\056\024" +
    "\067\025\055\026\052\027\054\030\070\031\062\032\051" +
    "\033\061\034\066\035\064\036\053\037\057\040\063\041" +
    "\050\042\060\001\002\000\030\004\034\005\045\006\032" +
    "\007\035\010\027\011\047\021\040\023\041\024\044\043" +
    "\033\045\031\001\002\000\052\014\ufff4\015\ufff4\020\ufff4" +
    "\022\ufff4\023\056\024\067\025\055\026\052\027\054\030" +
    "\070\031\062\032\051\033\061\034\066\035\064\036\053" +
    "\037\057\040\063\041\050\042\060\001\002\000\052\014" +
    "\uffd2\015\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\062\032\051\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\001\002\000\030\004\034\005\045\006\032\007\035\010" +
    "\027\011\047\021\040\023\041\024\044\043\033\045\031" +
    "\001\002\000\044\022\122\023\056\024\067\025\055\026" +
    "\052\027\054\030\070\031\062\032\051\033\061\034\066" +
    "\035\064\036\053\037\057\040\063\041\050\042\060\001" +
    "\002\000\004\012\123\001\002\000\004\056\124\001\002" +
    "\000\030\004\034\005\045\006\032\007\035\010\027\011" +
    "\047\021\040\023\041\024\044\043\033\045\031\001\002" +
    "\000\010\013\127\056\124\057\130\001\002\000\010\013" +
    "\uffe6\056\uffe6\057\uffe6\001\002\000\020\002\uffee\011\uffee" +
    "\013\uffee\046\uffee\047\uffee\053\uffee\055\uffee\001\002\000" +
    "\004\015\132\001\002\000\010\013\uffe7\056\uffe7\057\uffe7" +
    "\001\002\000\004\012\133\001\002\000\014\011\021\046" +
    "\006\047\013\053\010\055\012\001\002\000\016\011\021" +
    "\013\135\046\006\047\013\053\010\055\012\001\002\000" +
    "\004\013\136\001\002\000\020\002\uffef\011\uffef\013\uffef" +
    "\046\uffef\047\uffef\053\uffef\055\uffef\001\002\000\044\015" +
    "\140\023\056\024\067\025\055\026\052\027\054\030\070" +
    "\031\062\032\051\033\061\034\066\035\064\036\053\037" +
    "\057\040\063\041\050\042\060\001\002\000\004\012\141" +
    "\001\002\000\014\011\021\046\006\047\013\053\010\055" +
    "\012\001\002\000\016\011\021\013\143\046\006\047\013" +
    "\053\010\055\012\001\002\000\010\013\uffed\056\uffed\057" +
    "\uffed\001\002\000\004\002\001\001\002\000\030\004\034" +
    "\005\045\006\032\007\035\010\027\011\047\021\040\023" +
    "\041\024\044\043\033\045\031\001\002\000\044\022\147" +
    "\023\056\024\067\025\055\026\052\027\054\030\070\031" +
    "\062\032\051\033\061\034\066\035\064\036\053\037\057" +
    "\040\063\041\050\042\060\001\002\000\004\012\150\001" +
    "\002\000\014\011\021\046\006\047\013\053\010\055\012" +
    "\001\002\000\016\011\021\013\152\046\006\047\013\053" +
    "\010\055\012\001\002\000\022\002\ufff3\011\ufff3\013\ufff3" +
    "\046\ufff3\047\ufff3\053\ufff3\054\155\055\ufff3\001\002\000" +
    "\022\002\uffe8\011\uffe8\013\uffe8\046\uffe8\047\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\001\002\000\022\002\ufff1\011\ufff1\013" +
    "\ufff1\046\ufff1\047\ufff1\053\ufff1\054\171\055\ufff1\001\002" +
    "\000\006\012\156\053\157\001\002\000\014\011\021\046" +
    "\006\047\013\053\010\055\012\001\002\000\004\021\160" +
    "\001\002\000\030\004\034\005\045\006\032\007\035\010" +
    "\027\011\047\021\040\023\041\024\044\043\033\045\031" +
    "\001\002\000\044\022\162\023\056\024\067\025\055\026" +
    "\052\027\054\030\070\031\062\032\051\033\061\034\066" +
    "\035\064\036\053\037\057\040\063\041\050\042\060\001" +
    "\002\000\004\012\163\001\002\000\014\011\021\046\006" +
    "\047\013\053\010\055\012\001\002\000\016\011\021\013" +
    "\165\046\006\047\013\053\010\055\012\001\002\000\022" +
    "\002\uffec\011\uffec\013\uffec\046\uffec\047\uffec\053\uffec\054" +
    "\uffec\055\uffec\001\002\000\016\011\021\013\167\046\006" +
    "\047\013\053\010\055\012\001\002\000\020\002\ufff2\011" +
    "\ufff2\013\ufff2\046\ufff2\047\ufff2\053\ufff2\055\ufff2\001\002" +
    "\000\022\002\uffe9\011\uffe9\013\uffe9\046\uffe9\047\uffe9\053" +
    "\uffe9\054\uffe9\055\uffe9\001\002\000\006\012\172\053\157" +
    "\001\002\000\014\011\021\046\006\047\013\053\010\055" +
    "\012\001\002\000\016\011\021\013\174\046\006\047\013" +
    "\053\010\055\012\001\002\000\020\002\ufff0\011\ufff0\013" +
    "\ufff0\046\ufff0\047\ufff0\053\ufff0\055\ufff0\001\002\000\004" +
    "\011\200\001\002\000\030\004\034\005\045\006\032\007" +
    "\035\010\027\011\047\021\040\023\041\024\044\043\033" +
    "\045\031\001\002\000\044\020\ufff6\023\056\024\067\025" +
    "\055\026\052\027\054\030\070\031\062\032\051\033\061" +
    "\034\066\035\064\036\053\037\057\040\063\041\050\042" +
    "\060\001\002\000\010\017\uffeb\020\uffeb\044\uffeb\001\002" +
    "\000\010\017\175\020\202\044\203\001\002\000\004\020" +
    "\ufff7\001\002\000\030\004\034\005\045\006\032\007\035" +
    "\010\027\011\047\021\040\023\041\024\044\043\033\045" +
    "\031\001\002\000\044\020\ufff8\023\056\024\067\025\055" +
    "\026\052\027\054\030\070\031\062\032\051\033\061\034" +
    "\066\035\064\036\053\037\057\040\063\041\050\042\060" +
    "\001\002\000\020\002\ufffc\011\ufffc\013\ufffc\046\ufffc\047" +
    "\ufffc\053\ufffc\055\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\024\002\010\003\017\004\014\005\004\006" +
    "\016\007\015\011\013\013\003\015\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\021" +
    "\005\004\006\016\007\015\011\013\013\003\015\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\041\020\045\021\042\022" +
    "\027\023\035\024\036\025\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\041\020\116\021\042\022\027" +
    "\023\035\024\036\025\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\041\020\110\021\042\022\027\023\035\024\036\025" +
    "\025\001\001\000\020\010\041\020\107\021\042\022\027" +
    "\023\035\024\036\025\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\041\020\106\021\042\022\027" +
    "\023\035\024\036\025\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\041\020\105" +
    "\021\042\022\027\023\035\024\036\025\025\001\001\000" +
    "\002\001\001\000\020\010\041\020\104\021\042\022\027" +
    "\023\035\024\036\025\025\001\001\000\020\010\041\020" +
    "\103\021\042\022\027\023\035\024\036\025\025\001\001" +
    "\000\020\010\041\020\102\021\042\022\027\023\035\024" +
    "\036\025\025\001\001\000\020\010\041\020\101\021\042" +
    "\022\027\023\035\024\036\025\025\001\001\000\020\010" +
    "\041\020\100\021\042\022\027\023\035\024\036\025\025" +
    "\001\001\000\020\010\041\020\077\021\042\022\027\023" +
    "\035\024\036\025\025\001\001\000\020\010\041\020\076" +
    "\021\042\022\027\023\035\024\036\025\025\001\001\000" +
    "\020\010\041\020\075\021\042\022\027\023\035\024\036" +
    "\025\025\001\001\000\002\001\001\000\020\010\041\020" +
    "\074\021\042\022\027\023\035\024\036\025\025\001\001" +
    "\000\020\010\041\020\073\021\042\022\027\023\035\024" +
    "\036\025\025\001\001\000\002\001\001\000\020\010\041" +
    "\020\072\021\042\022\027\023\035\024\036\025\025\001" +
    "\001\000\020\010\041\020\071\021\042\022\027\023\035" +
    "\024\036\025\025\001\001\000\020\010\041\020\070\021" +
    "\042\022\027\023\035\024\036\025\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\041\020\113\021\042" +
    "\022\027\023\035\024\036\025\025\001\001\000\002\001" +
    "\001\000\020\010\041\020\115\021\042\022\027\023\035" +
    "\024\036\025\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\041\020\120\021\042\022\027\023\035" +
    "\024\036\025\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\125\017\124\001\001\000\020\010\041" +
    "\020\136\021\042\022\027\023\035\024\036\025\025\001" +
    "\001\000\004\014\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\133\004\014\005\004\006\016\007\015" +
    "\011\013\013\003\015\006\001\001\000\020\004\021\005" +
    "\004\006\016\007\015\011\013\013\003\015\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\141\004\014\005\004\006\016" +
    "\007\015\011\013\013\003\015\006\001\001\000\020\004" +
    "\021\005\004\006\016\007\015\011\013\013\003\015\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\041\020\145\021\042\022\027\023\035\024\036\025\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\150\004\014\005\004\006\016\007\015\011\013\013\003" +
    "\015\006\001\001\000\020\004\021\005\004\006\016\007" +
    "\015\011\013\013\003\015\006\001\001\000\006\012\152" +
    "\016\153\001\001\000\002\001\001\000\004\012\167\001" +
    "\001\000\002\001\001\000\022\003\165\004\014\005\004" +
    "\006\016\007\015\011\013\013\003\015\006\001\001\000" +
    "\002\001\001\000\020\010\041\020\160\021\042\022\027" +
    "\023\035\024\036\025\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\163\004\014\005\004\006\016" +
    "\007\015\011\013\013\003\015\006\001\001\000\020\004" +
    "\021\005\004\006\016\007\015\011\013\013\003\015\006" +
    "\001\001\000\002\001\001\000\020\004\021\005\004\006" +
    "\016\007\015\011\013\013\003\015\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\172\004\014\005\004\006\016\007\015\011\013\013\003" +
    "\015\006\001\001\000\020\004\021\005\004\006\016\007" +
    "\015\011\013\013\003\015\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\041\020\176\021\042\022" +
    "\027\023\035\024\036\025\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\041\020\203\021\042\022\027\023\035\024\036" +
    "\025\025\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_FS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_FS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_FS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

private ObjetoEntrada entrada;
private Nodo_AST_FS raiz;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

public void setRaiz(Nodo_AST_FS p_raiz)
{
    raiz = p_raiz;
}

public Nodo_AST_FS getRaiz()
{
    return raiz;
}

public void ejecutar_AST()
{
    if(raiz != null)
    {
        Grafica_AST_FS grafica = new Grafica_AST_FS(raiz);
        grafica.graficar_AST();
        AST_FS ejecutar = new AST_FS(raiz,entrada);
        ejecutar.ejecutar_AST();
    }    
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s)
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico FuncionScript");
    error_encontrado.setDescripcion(s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);        
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico FuncionScript");
    error_encontrado.setDescripcion("Error del cual no es posible recuperarse: " + s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);  
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_FS$actions {
  private final Sintactico_FS parser;

  /** Constructor */
  CUP$Sintactico_FS$actions(Sintactico_FS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_FS$do_action_part00000000(
    int                        CUP$Sintactico_FS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_FS$parser,
    java.util.Stack            CUP$Sintactico_FS$stack,
    int                        CUP$Sintactico_FS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_FS$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_FS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS start_val = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_FS$parser.done_parsing();
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_SENTENCIAS 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                raiz = new Nodo_AST_FS();
                raiz.setEtiqueta("AST");
                raiz.setValor("");
                raiz.setFila(String.valueOf(nright));
                raiz.setColumna(String.valueOf(nleft));
                raiz.getHijos().add(n);
                ejecutar_AST();
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = n1;
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_SENTENCIAS");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(n);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA_DECLARACION s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA_ASIGNACION s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA_IMPRIMIR s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA_SI 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA_SELECCIONA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA_DECLARACION ::= r_var LISTA_IDENTIFICADORES s_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                                nodo_expresion.setEtiqueta("EXPRESION");
                                nodo_expresion.setValor("");
                                nodo_expresion.setFila(String.valueOf(n3right));
                                nodo_expresion.setColumna(String.valueOf(n3left));
                                nodo_expresion.getHijos().add(n3);
                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(nodo_expresion);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA_DECLARACION ::= r_var LISTA_IDENTIFICADORES s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA_ASIGNACION ::= LISTA_IDENTIFICADORES s_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                                nodo_expresion.setEtiqueta("EXPRESION");
                                nodo_expresion.setValor("");
                                nodo_expresion.setFila(String.valueOf(n2right));
                                nodo_expresion.setColumna(String.valueOf(n2left));
                                nodo_expresion.getHijos().add(n2);

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_ASIGNACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(nodo_expresion);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA_IMPRIMIR ::= r_imprimir s_par_open EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_IMPRIMIR");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA_SELECCION ::= EXPRESION_RELACIONAL s_ternario EXPRESION s_dobledot EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_expresion_relacional = new Nodo_AST_FS();
                            nodo_expresion_relacional.setEtiqueta("EXPRESION_RELACIONAL");
                            nodo_expresion_relacional.setValor("");
                            nodo_expresion_relacional.setFila(String.valueOf(n1right));
                            nodo_expresion_relacional.setColumna(String.valueOf(n1left));
                            nodo_expresion_relacional.getHijos().add(n1);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_SELECCION");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(nodo_expresion_relacional);
                            RESULT.getHijos().add(n2);
                            RESULT.getHijos().add(n3);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close r_sino s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close LISTA_SENTENCIAS_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close LISTA_SENTENCIAS_SINO_SI r_sino s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n4 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                        RESULT.getHijos().add(n4);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA_SELECCIONA ::= r_selecciona s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS_CASOS r_defecto s_dobledot s_key_open LISTA_SENTENCIAS s_key_close s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_SELECCIONA");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);
                          
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",9, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_SELECCIONA ::= r_selecciona s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS_CASOS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_SELECCIONA");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                          
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",9, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_CASO ::= r_caso EXPRESION s_dobledot s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_CASOS");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(nright));
                        RESULT.setColumna(String.valueOf(nleft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASO",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_SINO_SI ::= r_sino r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_SINO_SI");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(iright));
                            RESULT.setColumna(String.valueOf(ileft));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO_SI",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES s_coma identificador 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n2);
                                nodo_identificador.setFila(String.valueOf(n2right));
                                nodo_identificador.setColumna(String.valueOf(n2left));

                                n1.getHijos().add(nodo_identificador);
                                RESULT = n1;
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_IDENTIFICADORES ::= identificador 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n);
                                nodo_identificador.setFila(String.valueOf(nright));
                                nodo_identificador.setColumna(String.valueOf(nleft));

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("LISTA_IDENTIFICADORES");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(nodo_identificador);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_SENTENCIAS_SINO_SI ::= LISTA_SENTENCIAS_SINO_SI SENTENCIA_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = n1;
                                    RESULT.getHijos().add(n2);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_SINO_SI",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_SENTENCIAS_SINO_SI ::= SENTENCIA_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("LISTA_SENTENCIA_SINO_SI");
                                    RESULT.setValor("");
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                    RESULT.getHijos().add(n);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_SINO_SI",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_SENTENCIAS_CASOS ::= LISTA_SENTENCIAS_CASOS SENTENCIA_CASO 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = n1;
                                    RESULT.getHijos().add(n2);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_CASOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_SENTENCIAS_CASOS ::= SENTENCIA_CASO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("LISTA_SENTENCIA_CASOS");
                                    RESULT.setValor("");
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                    RESULT.getHijos().add(n);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_CASOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION_ARITMETICA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_ARITMETICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION_RELACIONAL 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_RELACIONAL");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION_UNARIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_UNARIA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION_LOGICA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_LOGICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= SENTENCIA_SELECCION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= s_par_open EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= DATO_PRIMITIVO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_ARITMETICA ::= EXPRESION s_plus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_ARITMETICA ::= EXPRESION s_minus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION_ARITMETICA ::= EXPRESION s_mul EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION_ARITMETICA ::= EXPRESION s_div EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION_ARITMETICA ::= EXPRESION s_mod EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION_ARITMETICA ::= EXPRESION s_to EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION_ARITMETICA ::= EXPRESION s_increment 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION_ARITMETICA ::= EXPRESION s_decrement 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION_UNARIA ::= s_minus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_UNARIA ::= s_plus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_LOGICA ::= EXPRESION s_or EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_LOGICA ::= EXPRESION s_and EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION_LOGICA ::= s_not EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION_RELACIONAL ::= EXPRESION s_greather EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION_RELACIONAL ::= EXPRESION s_less EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION_RELACIONAL ::= EXPRESION s_greather_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION_RELACIONAL ::= EXPRESION s_less_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION_RELACIONAL ::= EXPRESION s_compare EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_RELACIONAL ::= EXPRESION s_diferent EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DATO_PRIMITIVO ::= r_nulo 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.nulo.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DATO_PRIMITIVO ::= booleano 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.booleano.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DATO_PRIMITIVO ::= entero 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.entero.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DATO_PRIMITIVO ::= decimal 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.decimal.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DATO_PRIMITIVO ::= caracter 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.caracter.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft)); 
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DATO_PRIMITIVO ::= cadena 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.cadena.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DATO_PRIMITIVO ::= identificador 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.identificador.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_FS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_FS$do_action(
    int                        CUP$Sintactico_FS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_FS$parser,
    java.util.Stack            CUP$Sintactico_FS$stack,
    int                        CUP$Sintactico_FS$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_FS$do_action_part00000000(
                               CUP$Sintactico_FS$act_num,
                               CUP$Sintactico_FS$parser,
                               CUP$Sintactico_FS$stack,
                               CUP$Sintactico_FS$top);
    }
}

}
