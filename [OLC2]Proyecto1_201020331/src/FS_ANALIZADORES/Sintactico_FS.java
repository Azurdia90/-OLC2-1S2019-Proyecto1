
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package FS_ANALIZADORES;

import java.io.File;
import java_cup.runtime.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import FS_TABLA_SIMBOLOS.Tabla_Enums;
import FS_AST.*;
import UI.ObjetoEntrada;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_FS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tabla_Simbolos_FS_CUP.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico_FS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico_FS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_FS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\004\012\000\002\004\011\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\010\006" +
    "\000\002\010\005\000\002\007\005\000\002\011\006\000" +
    "\002\012\007\000\002\013\011\000\002\013\015\000\002" +
    "\013\012\000\002\013\016\000\002\015\016\000\002\015" +
    "\011\000\002\016\010\000\002\014\012\000\002\017\003" +
    "\000\002\020\006\000\002\020\005\000\002\021\004\000" +
    "\002\022\006\000\002\022\004\000\002\023\005\000\002" +
    "\023\003\000\002\024\004\000\002\024\003\000\002\025" +
    "\004\000\002\025\003\000\002\026\005\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\004\000\002\030\004\000" +
    "\002\031\004\000\002\031\004\000\002\032\005\000\002" +
    "\032\005\000\002\032\004\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\022\011\027\046\015\047\005\051\006\052" +
    "\017\053\020\055\021\060\011\001\002\000\004\020\254" +
    "\001\002\000\004\021\251\001\002\000\004\020\uffe2\001" +
    "\002\000\004\020\250\001\002\000\004\020\247\001\002" +
    "\000\004\011\227\001\002\000\024\002\ufffc\011\ufffc\046" +
    "\ufffc\047\ufffc\051\ufffc\052\ufffc\053\ufffc\055\ufffc\060\ufffc" +
    "\001\002\000\006\017\217\044\225\001\002\000\004\020" +
    "\224\001\002\000\004\011\216\001\002\000\024\002\000" +
    "\011\027\046\015\047\005\051\006\052\017\053\020\055" +
    "\021\060\011\001\002\000\030\004\041\005\054\006\037" +
    "\007\042\010\034\011\056\021\046\023\047\024\053\043" +
    "\040\045\036\001\002\000\004\021\162\001\002\000\004" +
    "\021\134\001\002\000\004\020\133\001\002\000\026\002" +
    "\ufff4\011\ufff4\013\ufff4\046\ufff4\047\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\055\ufff4\060\ufff4\001\002\000\004\020\132\001" +
    "\002\000\026\002\ufff3\011\ufff3\013\ufff3\046\ufff3\047\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\055\ufff3\060\ufff3\001\002\000" +
    "\004\002\131\001\002\000\010\017\uffdb\021\031\044\uffdb" +
    "\001\002\000\024\002\ufffd\011\ufffd\046\ufffd\047\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\055\ufffd\060\ufffd\001\002\000\032" +
    "\004\041\005\054\006\037\007\042\010\034\011\056\021" +
    "\046\022\032\023\047\024\053\043\040\045\036\001\002" +
    "\000\054\014\uffe0\015\uffe0\017\uffe0\020\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\001\002\000\054\014\uffcf\015\uffcf" +
    "\017\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\001" +
    "\002\000\054\014\uffb4\015\uffb4\017\uffb4\020\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\001\002\000\054\014\uffd2\015" +
    "\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\001\002\000\054\014\uffb9\015\uffb9\017\uffb9\020\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\001\002\000\054\014\uffb6" +
    "\015\uffb6\017\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\001\002\000\030\004\041\005\054\006\037\007\042" +
    "\010\034\011\056\021\046\023\047\024\053\043\040\045" +
    "\036\001\002\000\054\014\uffb8\015\uffb8\017\uffb8\020\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\001\002\000\054\014" +
    "\uffb5\015\uffb5\017\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\001\002\000\054\014\uffd1\015\uffd1\017\uffd1\020" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\001\002\000\054" +
    "\014\124\015\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\001\002\000\006\017\121\022\122\001\002" +
    "\000\030\004\041\005\054\006\037\007\042\010\034\011" +
    "\056\021\046\023\047\024\053\043\040\045\036\001\002" +
    "\000\030\004\041\005\054\006\037\007\042\010\034\011" +
    "\056\021\046\023\047\024\053\043\040\045\036\001\002" +
    "\000\054\014\uffcd\015\uffcd\017\uffcd\020\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\001\002\000\054\014\uffd4\015\uffd4" +
    "\017\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\001" +
    "\002\000\054\014\uffce\015\uffce\017\uffce\020\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\001\002\000\030\004\041\005" +
    "\054\006\037\007\042\010\034\011\056\021\046\023\047" +
    "\024\053\043\040\045\036\001\002\000\054\014\uffb7\015" +
    "\uffb7\017\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\001\002\000\046\017\uffd5\022\uffd5\023\066\024\075\025" +
    "\064\026\061\027\063\030\076\031\072\032\060\033\070" +
    "\034\074\035\073\036\062\037\065\040\071\041\057\042" +
    "\067\001\002\000\056\014\uffb3\015\uffb3\017\uffb3\020\uffb3" +
    "\021\031\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\001\002\000" +
    "\030\004\041\005\054\006\037\007\042\010\034\011\056" +
    "\021\046\023\047\024\053\043\040\045\036\001\002\000" +
    "\054\014\uffc5\015\uffc5\017\uffc5\020\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\001\002\000\030\004\041\005\054\006" +
    "\037\007\042\010\034\011\056\021\046\023\047\024\053" +
    "\043\040\045\036\001\002\000\030\004\041\005\054\006" +
    "\037\007\042\010\034\011\056\021\046\023\047\024\053" +
    "\043\040\045\036\001\002\000\030\004\041\005\054\006" +
    "\037\007\042\010\034\011\056\021\046\023\047\024\053" +
    "\043\040\045\036\001\002\000\030\004\041\005\054\006" +
    "\037\007\042\010\034\011\056\021\046\023\047\024\053" +
    "\043\040\045\036\001\002\000\030\004\041\005\054\006" +
    "\037\007\042\010\034\011\056\021\046\023\047\024\053" +
    "\043\040\045\036\001\002\000\030\004\041\005\054\006" +
    "\037\007\042\010\034\011\056\021\046\023\047\024\053" +
    "\043\040\045\036\001\002\000\030\004\041\005\054\006" +
    "\037\007\042\010\034\011\056\021\046\023\047\024\053" +
    "\043\040\045\036\001\002\000\030\004\041\005\054\006" +
    "\037\007\042\010\034\011\056\021\046\023\047\024\053" +
    "\043\040\045\036\001\002\000\030\004\041\005\054\006" +
    "\037\007\042\010\034\011\056\021\046\023\047\024\053" +
    "\043\040\045\036\001\002\000\054\014\uffc6\015\uffc6\017" +
    "\uffc6\020\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\001\002" +
    "\000\030\004\041\005\054\006\037\007\042\010\034\011" +
    "\056\021\046\023\047\024\053\043\040\045\036\001\002" +
    "\000\030\004\041\005\054\006\037\007\042\010\034\011" +
    "\056\021\046\023\047\024\053\043\040\045\036\001\002" +
    "\000\030\004\041\005\054\006\037\007\042\010\034\011" +
    "\056\021\046\023\047\024\053\043\040\045\036\001\002" +
    "\000\030\004\041\005\054\006\037\007\042\010\034\011" +
    "\056\021\046\023\047\024\053\043\040\045\036\001\002" +
    "\000\054\014\uffc8\015\uffc8\017\uffc8\020\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\072" +
    "\032\060\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\001\002\000\054\014\uffcb\015\uffcb" +
    "\017\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025\064\026" +
    "\061\027\063\030\076\031\072\032\060\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\001" +
    "\002\000\054\014\uffba\015\uffba\017\uffba\020\uffba\022\uffba" +
    "\023\066\024\075\025\064\026\061\027\063\030\076\031" +
    "\072\032\060\033\uffba\034\uffba\035\073\036\062\037\065" +
    "\040\071\041\uffba\042\uffba\001\002\000\054\014\uffbe\015" +
    "\uffbe\017\uffbe\020\uffbe\022\uffbe\023\066\024\075\025\064" +
    "\026\061\027\063\030\076\031\072\032\060\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\001\002\000\054\014\uffbd\015\uffbd\017\uffbd\020\uffbd\022" +
    "\uffbd\023\066\024\075\025\064\026\061\027\063\030\076" +
    "\031\072\032\060\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\001\002\000\054\014\uffbb" +
    "\015\uffbb\017\uffbb\020\uffbb\022\uffbb\023\066\024\075\025" +
    "\064\026\061\027\063\030\076\031\072\032\060\033\uffbb" +
    "\034\uffbb\035\073\036\062\037\065\040\071\041\uffbb\042" +
    "\uffbb\001\002\000\054\014\uffc1\015\uffc1\017\uffc1\020\uffc1" +
    "\022\uffc1\023\066\024\075\025\064\026\061\027\063\030" +
    "\076\031\072\032\060\033\070\034\074\035\073\036\062" +
    "\037\065\040\071\041\uffc1\042\uffc1\001\002\000\054\014" +
    "\uffcc\015\uffcc\017\uffcc\020\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\064\026\061\027\063\030\076\031\072\032\060\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\001\002\000\054\014\uffbc\015\uffbc\017\uffbc\020" +
    "\uffbc\022\uffbc\023\066\024\075\025\064\026\061\027\063" +
    "\030\076\031\072\032\060\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\001\002\000\054" +
    "\014\uffca\015\uffca\017\uffca\020\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\063\030\076\031\072\032\060" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\001\002\000\054\014\uffc7\015\uffc7\017\uffc7" +
    "\020\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\031\072\032\060\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\001\002\000" +
    "\054\014\uffbf\015\uffbf\017\uffbf\020\uffbf\022\uffbf\023\066" +
    "\024\075\025\064\026\061\027\063\030\076\031\072\032" +
    "\060\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\001\002\000\054\014\uffc9\015\uffc9\017" +
    "\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\063\030\076\031\072\032\060\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\001\002" +
    "\000\054\014\uffc2\015\uffc2\017\uffc2\020\uffc2\022\uffc2\023" +
    "\066\024\075\025\064\026\061\027\063\030\076\031\072" +
    "\032\060\033\070\034\074\035\073\036\062\037\065\040" +
    "\071\041\uffc2\042\067\001\002\000\054\014\uffc4\015\uffc4" +
    "\017\uffc4\020\uffc4\022\uffc4\023\uffc4\024\uffc4\025\064\026" +
    "\061\027\063\030\076\031\072\032\060\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\001" +
    "\002\000\054\014\uffc3\015\uffc3\017\uffc3\020\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\064\026\061\027\063\030\076\031" +
    "\072\032\060\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\001\002\000\044\022\120\023" +
    "\066\024\075\025\064\026\061\027\063\030\076\031\072" +
    "\032\060\033\070\034\074\035\073\036\062\037\065\040" +
    "\071\041\057\042\067\001\002\000\054\014\uffd0\015\uffd0" +
    "\017\uffd0\020\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\001" +
    "\002\000\030\004\041\005\054\006\037\007\042\010\034" +
    "\011\056\021\046\023\047\024\053\043\040\045\036\001" +
    "\002\000\054\014\uffe1\015\uffe1\017\uffe1\020\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\001\002\000\046\017\uffd6\022" +
    "\uffd6\023\066\024\075\025\064\026\061\027\063\030\076" +
    "\031\072\032\060\033\070\034\074\035\073\036\062\037" +
    "\065\040\071\041\057\042\067\001\002\000\030\004\041" +
    "\005\054\006\037\007\042\010\034\011\056\021\046\023" +
    "\047\024\053\043\040\045\036\001\002\000\044\015\126" +
    "\023\066\024\075\025\064\026\061\027\063\030\076\031" +
    "\072\032\060\033\070\034\074\035\073\036\062\037\065" +
    "\040\071\041\057\042\067\001\002\000\030\004\041\005" +
    "\054\006\037\007\042\010\034\011\056\021\046\023\047" +
    "\024\053\043\040\045\036\001\002\000\054\014\uffeb\015" +
    "\uffeb\017\uffeb\020\uffeb\022\uffeb\023\066\024\075\025\064" +
    "\026\061\027\063\030\076\031\072\032\060\033\070\034" +
    "\074\035\073\036\062\037\065\040\071\041\057\042\067" +
    "\001\002\000\054\014\uffc0\015\uffc0\017\uffc0\020\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\072\032\060\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\001\002\000\004\002\001" +
    "\001\002\000\026\002\ufff1\011\ufff1\013\ufff1\046\ufff1\047" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\055\ufff1\060\ufff1\001\002" +
    "\000\026\002\ufff0\011\ufff0\013\ufff0\046\ufff0\047\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\055\ufff0\060\ufff0\001\002\000\030" +
    "\004\041\005\054\006\037\007\042\010\034\011\056\021" +
    "\046\023\047\024\053\043\040\045\036\001\002\000\044" +
    "\022\136\023\066\024\075\025\064\026\061\027\063\030" +
    "\076\031\072\032\060\033\070\034\074\035\073\036\062" +
    "\037\065\040\071\041\057\042\067\001\002\000\004\012" +
    "\137\001\002\000\004\056\140\001\002\000\030\004\041" +
    "\005\054\006\037\007\042\010\034\011\056\021\046\023" +
    "\047\024\053\043\040\045\036\001\002\000\010\013\143" +
    "\056\140\057\144\001\002\000\010\013\uffd7\056\uffd7\057" +
    "\uffd7\001\002\000\026\002\uffe5\011\uffe5\013\uffe5\046\uffe5" +
    "\047\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5\060\uffe5\001" +
    "\002\000\004\015\146\001\002\000\010\013\uffd8\056\uffd8" +
    "\057\uffd8\001\002\000\004\012\147\001\002\000\020\011" +
    "\027\046\015\047\005\051\006\052\017\053\020\055\021" +
    "\001\002\000\022\011\ufff8\013\ufff8\046\ufff8\047\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\055\ufff8\001\002\000\022\011\027" +
    "\013\152\046\015\047\005\051\006\052\017\053\020\055" +
    "\021\001\002\000\004\013\154\001\002\000\022\011\ufff9" +
    "\013\ufff9\046\ufff9\047\ufff9\051\ufff9\052\ufff9\053\ufff9\055" +
    "\ufff9\001\002\000\026\002\uffe6\011\uffe6\013\uffe6\046\uffe6" +
    "\047\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\060\uffe6\001" +
    "\002\000\044\015\156\023\066\024\075\025\064\026\061" +
    "\027\063\030\076\031\072\032\060\033\070\034\074\035" +
    "\073\036\062\037\065\040\071\041\057\042\067\001\002" +
    "\000\004\012\157\001\002\000\020\011\027\046\015\047" +
    "\005\051\006\052\017\053\020\055\021\001\002\000\022" +
    "\011\027\013\161\046\015\047\005\051\006\052\017\053" +
    "\020\055\021\001\002\000\010\013\uffe4\056\uffe4\057\uffe4" +
    "\001\002\000\030\004\041\005\054\006\037\007\042\010" +
    "\034\011\056\021\046\023\047\024\053\043\040\045\036" +
    "\001\002\000\044\022\164\023\066\024\075\025\064\026" +
    "\061\027\063\030\076\031\072\032\060\033\070\034\074" +
    "\035\073\036\062\037\065\040\071\041\057\042\067\001" +
    "\002\000\004\012\165\001\002\000\020\011\027\046\015" +
    "\047\005\051\006\052\017\053\020\055\021\001\002\000" +
    "\022\011\027\013\167\046\015\047\005\051\006\052\017" +
    "\053\020\055\021\001\002\000\030\002\uffea\011\uffea\013" +
    "\uffea\046\uffea\047\uffea\051\uffea\052\uffea\053\uffea\054\172" +
    "\055\uffea\060\uffea\001\002\000\030\002\uffd9\011\uffd9\013" +
    "\uffd9\046\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\060\uffd9\001\002\000\030\002\uffe8\011\uffe8\013" +
    "\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054\206" +
    "\055\uffe8\060\uffe8\001\002\000\006\012\173\053\174\001" +
    "\002\000\020\011\027\046\015\047\005\051\006\052\017" +
    "\053\020\055\021\001\002\000\004\021\175\001\002\000" +
    "\030\004\041\005\054\006\037\007\042\010\034\011\056" +
    "\021\046\023\047\024\053\043\040\045\036\001\002\000" +
    "\044\022\177\023\066\024\075\025\064\026\061\027\063" +
    "\030\076\031\072\032\060\033\070\034\074\035\073\036" +
    "\062\037\065\040\071\041\057\042\067\001\002\000\004" +
    "\012\200\001\002\000\020\011\027\046\015\047\005\051" +
    "\006\052\017\053\020\055\021\001\002\000\022\011\027" +
    "\013\202\046\015\047\005\051\006\052\017\053\020\055" +
    "\021\001\002\000\030\002\uffe3\011\uffe3\013\uffe3\046\uffe3" +
    "\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\060" +
    "\uffe3\001\002\000\022\011\027\013\204\046\015\047\005" +
    "\051\006\052\017\053\020\055\021\001\002\000\026\002" +
    "\uffe9\011\uffe9\013\uffe9\046\uffe9\047\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\055\uffe9\060\uffe9\001\002\000\030\002\uffda\011" +
    "\uffda\013\uffda\046\uffda\047\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\060\uffda\001\002\000\006\012\207\053" +
    "\174\001\002\000\020\011\027\046\015\047\005\051\006" +
    "\052\017\053\020\055\021\001\002\000\022\011\027\013" +
    "\211\046\015\047\005\051\006\052\017\053\020\055\021" +
    "\001\002\000\026\002\uffe7\011\uffe7\013\uffe7\046\uffe7\047" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7\060\uffe7\001\002" +
    "\000\044\020\uffdf\023\066\024\075\025\064\026\061\027" +
    "\063\030\076\031\072\032\060\033\070\034\074\035\073" +
    "\036\062\037\065\040\071\041\057\042\067\001\002\000" +
    "\024\002\ufffe\011\ufffe\046\ufffe\047\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\055\ufffe\060\ufffe\001\002\000\024\002\uffff\011" +
    "\uffff\046\uffff\047\uffff\051\uffff\052\uffff\053\uffff\055\uffff" +
    "\060\uffff\001\002\000\010\017\217\020\220\044\221\001" +
    "\002\000\010\017\uffdb\020\uffdb\044\uffdb\001\002\000\004" +
    "\011\223\001\002\000\004\020\uffee\001\002\000\030\004" +
    "\041\005\054\006\037\007\042\010\034\011\056\021\046" +
    "\023\047\024\053\043\040\045\036\001\002\000\044\020" +
    "\uffef\023\066\024\075\025\064\026\061\027\063\030\076" +
    "\031\072\032\060\033\070\034\074\035\073\036\062\037" +
    "\065\040\071\041\057\042\067\001\002\000\010\017\uffdc" +
    "\020\uffdc\044\uffdc\001\002\000\026\002\ufff5\011\ufff5\013" +
    "\ufff5\046\ufff5\047\ufff5\051\ufff5\052\ufff5\053\ufff5\055\ufff5" +
    "\060\ufff5\001\002\000\030\004\041\005\054\006\037\007" +
    "\042\010\034\011\056\021\046\023\047\024\053\043\040" +
    "\045\036\001\002\000\044\020\uffed\023\066\024\075\025" +
    "\064\026\061\027\063\030\076\031\072\032\060\033\070" +
    "\034\074\035\073\036\062\037\065\040\071\041\057\042" +
    "\067\001\002\000\004\021\230\001\002\000\006\022\231" +
    "\046\233\001\002\000\004\012\244\001\002\000\006\017" +
    "\236\022\235\001\002\000\004\011\234\001\002\000\006" +
    "\017\uffdd\022\uffdd\001\002\000\004\012\241\001\002\000" +
    "\004\046\237\001\002\000\004\011\240\001\002\000\006" +
    "\017\uffde\022\uffde\001\002\000\020\011\027\046\015\047" +
    "\005\051\006\052\017\053\020\055\021\001\002\000\022" +
    "\011\027\013\243\046\015\047\005\051\006\052\017\053" +
    "\020\055\021\001\002\000\024\002\ufffb\011\ufffb\046\ufffb" +
    "\047\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\060\ufffb\001" +
    "\002\000\020\011\027\046\015\047\005\051\006\052\017" +
    "\053\020\055\021\001\002\000\022\011\027\013\246\046" +
    "\015\047\005\051\006\052\017\053\020\055\021\001\002" +
    "\000\024\002\ufffa\011\ufffa\046\ufffa\047\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\055\ufffa\060\ufffa\001\002\000\026\002\ufff6" +
    "\011\ufff6\013\ufff6\046\ufff6\047\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\055\ufff6\060\ufff6\001\002\000\026\002\ufff2\011\ufff2" +
    "\013\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2\053\ufff2\055" +
    "\ufff2\060\ufff2\001\002\000\030\004\041\005\054\006\037" +
    "\007\042\010\034\011\056\021\046\023\047\024\053\043" +
    "\040\045\036\001\002\000\044\022\253\023\066\024\075" +
    "\025\064\026\061\027\063\030\076\031\072\032\060\033" +
    "\070\034\074\035\073\036\062\037\065\040\071\041\057" +
    "\042\067\001\002\000\004\020\uffec\001\002\000\026\002" +
    "\ufff7\011\ufff7\013\ufff7\046\ufff7\047\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\055\ufff7\060\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\034\002\025\003\015\004\027\006\011\007" +
    "\007\010\003\011\013\013\022\015\024\017\006\020\023" +
    "\021\021\023\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\214\001\001\000\030\004\213" +
    "\006\212\007\007\010\003\011\013\013\022\015\024\017" +
    "\006\020\023\021\021\023\012\001\001\000\022\012\047" +
    "\020\051\027\211\030\050\031\034\032\042\033\043\034" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\047\020\051\026\044\027\054\030\050\031" +
    "\034\032\042\033\043\034\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\047\020\051" +
    "\027\127\030\050\031\034\032\042\033\043\034\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\047\020" +
    "\051\027\116\030\050\031\034\032\042\033\043\034\032" +
    "\001\001\000\022\012\047\020\051\027\115\030\050\031" +
    "\034\032\042\033\043\034\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\047\020" +
    "\051\027\114\030\050\031\034\032\042\033\043\034\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\012\047\020\051\027\113\030\050\031\034" +
    "\032\042\033\043\034\032\001\001\000\002\001\001\000" +
    "\022\012\047\020\051\027\112\030\050\031\034\032\042" +
    "\033\043\034\032\001\001\000\022\012\047\020\051\027" +
    "\111\030\050\031\034\032\042\033\043\034\032\001\001" +
    "\000\022\012\047\020\051\027\110\030\050\031\034\032" +
    "\042\033\043\034\032\001\001\000\022\012\047\020\051" +
    "\027\107\030\050\031\034\032\042\033\043\034\032\001" +
    "\001\000\022\012\047\020\051\027\106\030\050\031\034" +
    "\032\042\033\043\034\032\001\001\000\022\012\047\020" +
    "\051\027\105\030\050\031\034\032\042\033\043\034\032" +
    "\001\001\000\022\012\047\020\051\027\104\030\050\031" +
    "\034\032\042\033\043\034\032\001\001\000\022\012\047" +
    "\020\051\027\103\030\050\031\034\032\042\033\043\034" +
    "\032\001\001\000\022\012\047\020\051\027\102\030\050" +
    "\031\034\032\042\033\043\034\032\001\001\000\002\001" +
    "\001\000\022\012\047\020\051\027\101\030\050\031\034" +
    "\032\042\033\043\034\032\001\001\000\022\012\047\020" +
    "\051\027\100\030\050\031\034\032\042\033\043\034\032" +
    "\001\001\000\022\012\047\020\051\027\077\030\050\031" +
    "\034\032\042\033\043\034\032\001\001\000\022\012\047" +
    "\020\051\027\076\030\050\031\034\032\042\033\043\034" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\012" +
    "\047\020\051\027\122\030\050\031\034\032\042\033\043" +
    "\034\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\047\020\051\027\124\030\050\031\034\032\042" +
    "\033\043\034\032\001\001\000\002\001\001\000\022\012" +
    "\047\020\051\027\126\030\050\031\034\032\042\033\043" +
    "\034\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\047\020\051\027\134\030\050\031\034\032\042\033" +
    "\043\034\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\141\025\140\001\001\000\022\012\047\020" +
    "\051\027\154\030\050\031\034\032\042\033\043\034\032" +
    "\001\001\000\004\016\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\150\006\147\007\007\010\003\011" +
    "\013\013\022\015\024\017\006\020\023\021\021\023\012" +
    "\001\001\000\002\001\001\000\026\006\152\007\007\010" +
    "\003\011\013\013\022\015\024\017\006\020\023\021\021" +
    "\023\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\157\006\147\007\007\010\003\011\013\013\022\015" +
    "\024\017\006\020\023\021\021\023\012\001\001\000\026" +
    "\006\152\007\007\010\003\011\013\013\022\015\024\017" +
    "\006\020\023\021\021\023\012\001\001\000\002\001\001" +
    "\000\022\012\047\020\051\027\162\030\050\031\034\032" +
    "\042\033\043\034\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\165\006\147\007\007\010\003\011" +
    "\013\013\022\015\024\017\006\020\023\021\021\023\012" +
    "\001\001\000\026\006\152\007\007\010\003\011\013\013" +
    "\022\015\024\017\006\020\023\021\021\023\012\001\001" +
    "\000\006\014\167\024\170\001\001\000\002\001\001\000" +
    "\004\014\204\001\001\000\002\001\001\000\030\005\202" +
    "\006\147\007\007\010\003\011\013\013\022\015\024\017" +
    "\006\020\023\021\021\023\012\001\001\000\002\001\001" +
    "\000\022\012\047\020\051\027\175\030\050\031\034\032" +
    "\042\033\043\034\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\200\006\147\007\007\010\003\011" +
    "\013\013\022\015\024\017\006\020\023\021\021\023\012" +
    "\001\001\000\026\006\152\007\007\010\003\011\013\013" +
    "\022\015\024\017\006\020\023\021\021\023\012\001\001" +
    "\000\002\001\001\000\026\006\152\007\007\010\003\011" +
    "\013\013\022\015\024\017\006\020\023\021\021\023\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\207\006\147\007\007\010\003\011\013" +
    "\013\022\015\024\017\006\020\023\021\021\023\012\001" +
    "\001\000\026\006\152\007\007\010\003\011\013\013\022" +
    "\015\024\017\006\020\023\021\021\023\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\012\047\020\051\027\221" +
    "\030\050\031\034\032\042\033\043\034\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\047\020\051\027\225\030\050\031\034\032\042\033" +
    "\043\034\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\241\006\147\007\007\010\003\011\013\013\022" +
    "\015\024\017\006\020\023\021\021\023\012\001\001\000" +
    "\026\006\152\007\007\010\003\011\013\013\022\015\024" +
    "\017\006\020\023\021\021\023\012\001\001\000\002\001" +
    "\001\000\030\005\244\006\147\007\007\010\003\011\013" +
    "\013\022\015\024\017\006\020\023\021\021\023\012\001" +
    "\001\000\026\006\152\007\007\010\003\011\013\013\022" +
    "\015\024\017\006\020\023\021\021\023\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\047\020\051\027\251\030\050\031\034\032\042\033" +
    "\043\034\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_FS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_FS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_FS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

private ObjetoEntrada entrada;
private Nodo_AST_FS raiz;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

public void setRaiz(Nodo_AST_FS p_raiz)
{
    raiz = p_raiz;
}

public Nodo_AST_FS getRaiz()
{
    return raiz;
}

public void ejecutar_AST()
{
    if(raiz != null)
    {
        Grafica_AST_FS grafica = new Grafica_AST_FS(raiz);
        grafica.graficar_AST();
        AST_FS ejecutar = new AST_FS(raiz,entrada);
        ejecutar.ejecutar_AST();
    }    
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s)
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico FuncionScript");
    error_encontrado.setDescripcion(s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);        
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico FuncionScript");
    error_encontrado.setDescripcion("Error del cual no es posible recuperarse: " + s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);  
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_FS$actions {
  private final Sintactico_FS parser;

  /** Constructor */
  CUP$Sintactico_FS$actions(Sintactico_FS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_FS$do_action_part00000000(
    int                        CUP$Sintactico_FS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_FS$parser,
    java.util.Stack            CUP$Sintactico_FS$stack,
    int                        CUP$Sintactico_FS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_FS$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_FS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS start_val = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_FS$parser.done_parsing();
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO_FS 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                raiz = new Nodo_AST_FS();
                raiz.setEtiqueta("AST");
                raiz.setValor("");
                raiz.setFila(String.valueOf(nright));
                raiz.setColumna(String.valueOf(nleft));
                raiz.getHijos().add(n);
                ejecutar_AST();
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO_FS ::= CUERPO_FS FUNCION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n1;
                    RESULT.getHijos().add(n2);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("CUERPO_FS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO_FS ::= CUERPO_FS SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n1;
                    RESULT.getHijos().add(n2);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("CUERPO_FS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO_FS ::= FUNCION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("CUERPO_FS");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("CUERPO_FS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_FS ::= SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("CUERPO_FS");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("CUERPO_FS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= r_funcion identificador s_par_open LISTA_PARAMETROS s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                RESULT = new Nodo_AST_FS();
                RESULT.setEtiqueta("FUNCION");
                RESULT.setValor(n1);
                RESULT.setFila(String.valueOf(nright));
                RESULT.setColumna(String.valueOf(nleft));
                RESULT.getHijos().add(n3);
                RESULT.getHijos().add(n2);
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= r_funcion identificador s_par_open s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                RESULT = new Nodo_AST_FS();
                RESULT.setEtiqueta("FUNCION");
                RESULT.setValor(n1);
                RESULT.setFila(String.valueOf(nright));
                RESULT.setColumna(String.valueOf(nleft));
                RESULT.getHijos().add(n2);
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = n1;
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_SENTENCIAS");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(n);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_DECLARACION s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_ASIGNACION s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_IMPRIMIR s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_SI 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_SELECCIONA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA_DETENER s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA_LLAMADA s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA_RETORNAR s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA_DECLARACION ::= r_var LISTA_IDENTIFICADORES s_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                                nodo_expresion.setEtiqueta("EXPRESION");
                                nodo_expresion.setValor("");
                                nodo_expresion.setFila(String.valueOf(n3right));
                                nodo_expresion.setColumna(String.valueOf(n3left));
                                nodo_expresion.getHijos().add(n3);
                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(nodo_expresion);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_DECLARACION ::= r_var LISTA_IDENTIFICADORES s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_ASIGNACION ::= LISTA_IDENTIFICADORES s_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                                nodo_expresion.setEtiqueta("EXPRESION");
                                nodo_expresion.setValor("");
                                nodo_expresion.setFila(String.valueOf(n2right));
                                nodo_expresion.setColumna(String.valueOf(n2left));
                                nodo_expresion.getHijos().add(n2);

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_ASIGNACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(nodo_expresion);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_IMPRIMIR ::= r_imprimir s_par_open EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_IMPRIMIR");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPRIMIR",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_SELECCION ::= EXPRESION_RELACIONAL s_ternario EXPRESION s_dobledot EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_expresion_relacional = new Nodo_AST_FS();
                            nodo_expresion_relacional.setEtiqueta("EXPRESION_RELACIONAL");
                            nodo_expresion_relacional.setValor("");
                            nodo_expresion_relacional.setFila(String.valueOf(n1right));
                            nodo_expresion_relacional.setColumna(String.valueOf(n1left));
                            nodo_expresion_relacional.getHijos().add(n1);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_SELECCION");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(nodo_expresion_relacional);
                            RESULT.getHijos().add(n2);
                            RESULT.getHijos().add(n3);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",9, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close r_sino s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",9, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close LISTA_SENTENCIAS_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",9, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close LISTA_SENTENCIAS_SINO_SI r_sino s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n4 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                        RESULT.getHijos().add(n4);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",9, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_SELECCIONA ::= r_selecciona s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS_CASOS r_defecto s_dobledot s_key_open LISTA_SENTENCIAS s_key_close s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_SELECCIONA");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);
                          
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_SELECCIONA ::= r_selecciona s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS_CASOS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_SELECCIONA");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                          
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_CASO ::= r_caso EXPRESION s_dobledot s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_CASOS");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(nright));
                        RESULT.setColumna(String.valueOf(nleft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASO",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_SINO_SI ::= r_sino r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_SINO_SI");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(iright));
                            RESULT.setColumna(String.valueOf(ileft));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO_SI",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_DETENER ::= r_detener 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_DETENER");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DETENER",13, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_LLAMADA ::= identificador s_par_open LISTA_EXPRESIONES s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_LLAMADA");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n2);
                         
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_LLAMADA ::= identificador s_par_open s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_LLAMADA");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                         
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_RETORNAR ::= r_retornar EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_RETORNAR");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNAR",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_PARAMETROS ::= LISTA_PARAMETROS s_coma r_var identificador 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                            nodo_identificador.setEtiqueta("IDENTIFICADOR");
                            nodo_identificador.setValor(n2);
                            nodo_identificador.setFila(String.valueOf(n2right));
                            nodo_identificador.setColumna(String.valueOf(n2left));

                            n1.getHijos().add(nodo_identificador);
                            RESULT = n1;
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_PARAMETROS ::= r_var identificador 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                            nodo_identificador.setEtiqueta("IDENTIFICADOR");
                            nodo_identificador.setValor(n);
                            nodo_identificador.setFila(String.valueOf(nright));
                            nodo_identificador.setColumna(String.valueOf(nleft));

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_PARAMETROS");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_identificador);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES s_coma identificador 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n2);
                                nodo_identificador.setFila(String.valueOf(n2right));
                                nodo_identificador.setColumna(String.valueOf(n2left));

                                n1.getHijos().add(nodo_identificador);
                                RESULT = n1;
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",17, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA_IDENTIFICADORES ::= identificador 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n);
                                nodo_identificador.setFila(String.valueOf(nright));
                                nodo_identificador.setColumna(String.valueOf(nleft));

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("LISTA_IDENTIFICADORES");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(nodo_identificador);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",17, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA_SENTENCIAS_SINO_SI ::= LISTA_SENTENCIAS_SINO_SI SENTENCIA_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = n1;
                                    RESULT.getHijos().add(n2);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_SINO_SI",18, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_SENTENCIAS_SINO_SI ::= SENTENCIA_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("LISTA_SENTENCIA_SINO_SI");
                                    RESULT.setValor("");
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                    RESULT.getHijos().add(n);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_SINO_SI",18, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_SENTENCIAS_CASOS ::= LISTA_SENTENCIAS_CASOS SENTENCIA_CASO 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = n1;
                                    RESULT.getHijos().add(n2);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_CASOS",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_SENTENCIAS_CASOS ::= SENTENCIA_CASO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("LISTA_SENTENCIA_CASOS");
                                    RESULT.setValor("");
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                    RESULT.getHijos().add(n);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_CASOS",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES s_coma EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = n1;
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(nright));
                            nodo_expresion.setColumna(String.valueOf(nleft));
                            nodo_expresion.getHijos().add(n);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_EXPRESIONES");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION_ARITMETICA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_ARITMETICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION_RELACIONAL 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_RELACIONAL");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION_UNARIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_UNARIA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION_LOGICA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_LOGICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= s_par_open EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= DATO_PRIMITIVO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= SENTENCIA_LLAMADA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= SENTENCIA_SELECCION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_ARITMETICA ::= EXPRESION s_plus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION_ARITMETICA ::= EXPRESION s_minus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION_ARITMETICA ::= EXPRESION s_mul EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION_ARITMETICA ::= EXPRESION s_div EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION_ARITMETICA ::= EXPRESION s_mod EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION_ARITMETICA ::= EXPRESION s_to EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION_ARITMETICA ::= EXPRESION s_increment 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION_ARITMETICA ::= EXPRESION s_decrement 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION_UNARIA ::= s_minus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",23, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_UNARIA ::= s_plus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",23, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION_LOGICA ::= EXPRESION s_or EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",24, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_LOGICA ::= EXPRESION s_and EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",24, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION_LOGICA ::= s_not EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",24, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION_RELACIONAL ::= EXPRESION s_greather EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",25, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION_RELACIONAL ::= EXPRESION s_less EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",25, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION_RELACIONAL ::= EXPRESION s_greather_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",25, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION_RELACIONAL ::= EXPRESION s_less_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",25, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION_RELACIONAL ::= EXPRESION s_compare EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",25, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION_RELACIONAL ::= EXPRESION s_diferent EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",25, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DATO_PRIMITIVO ::= r_nulo 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.nulo.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",26, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DATO_PRIMITIVO ::= booleano 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.booleano.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",26, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DATO_PRIMITIVO ::= entero 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.entero.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",26, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DATO_PRIMITIVO ::= decimal 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.decimal.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",26, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DATO_PRIMITIVO ::= caracter 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.caracter.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft)); 
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",26, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DATO_PRIMITIVO ::= cadena 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.cadena.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",26, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DATO_PRIMITIVO ::= identificador 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.identificador.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",26, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_FS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_FS$do_action(
    int                        CUP$Sintactico_FS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_FS$parser,
    java.util.Stack            CUP$Sintactico_FS$stack,
    int                        CUP$Sintactico_FS$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_FS$do_action_part00000000(
                               CUP$Sintactico_FS$act_num,
                               CUP$Sintactico_FS$parser,
                               CUP$Sintactico_FS$stack,
                               CUP$Sintactico_FS$top);
    }
}

}
