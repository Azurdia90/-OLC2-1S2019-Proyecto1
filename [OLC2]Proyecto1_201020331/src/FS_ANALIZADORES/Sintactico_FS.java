
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package FS_ANALIZADORES;

import java.io.File;
import java_cup.runtime.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import FS_TABLA_SIMBOLOS.Tabla_Enums;
import FS_AST.*;
import UI.ObjetoEntrada;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_FS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tabla_Simbolos_FS_CUP.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico_FS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico_FS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_FS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\006\006\000" +
    "\002\006\005\000\002\005\005\000\002\007\006\000\002" +
    "\010\007\000\002\011\011\000\002\011\015\000\002\011" +
    "\012\000\002\011\016\000\002\012\012\000\002\013\005" +
    "\000\002\013\003\000\002\014\004\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\004\000\002\016\004\000\002\017\004\000\002" +
    "\017\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\012\011\017\046\005\047\012\053\006\001" +
    "\002\000\004\020\157\001\002\000\004\011\017\001\002" +
    "\000\004\021\123\001\002\000\006\017\117\044\120\001" +
    "\002\000\004\002\116\001\002\000\016\002\ufffa\011\ufffa" +
    "\013\ufffa\046\ufffa\047\ufffa\053\ufffa\001\002\000\004\021" +
    "\023\001\002\000\016\002\ufffe\011\ufffe\013\ufffe\046\ufffe" +
    "\047\ufffe\053\ufffe\001\002\000\004\020\022\001\002\000" +
    "\004\020\021\001\002\000\014\002\000\011\017\046\005" +
    "\047\012\053\006\001\002\000\010\017\uffee\020\uffee\044" +
    "\uffee\001\002\000\016\002\uffff\011\uffff\013\uffff\046\uffff" +
    "\047\uffff\053\uffff\001\002\000\016\002\ufffd\011\ufffd\013" +
    "\ufffd\046\ufffd\047\ufffd\053\ufffd\001\002\000\016\002\ufffb" +
    "\011\ufffb\013\ufffb\046\ufffb\047\ufffb\053\ufffb\001\002\000" +
    "\030\004\032\005\043\006\030\007\033\010\025\011\045" +
    "\021\036\023\037\024\042\043\031\045\027\001\002\000" +
    "\052\014\uffe5\015\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\001\002\000\052\014\uffcc\015\uffcc\020\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\001\002\000\052\014\uffe9" +
    "\015\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\001" +
    "\002\000\052\014\uffd1\015\uffd1\020\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\001\002\000\052\014\uffce\015\uffce\020" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\001\002\000\030" +
    "\004\032\005\043\006\030\007\033\010\025\011\045\021" +
    "\036\023\037\024\042\043\031\045\027\001\002\000\052" +
    "\014\uffd0\015\uffd0\020\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\001\002\000\052\014\uffcd\015\uffcd\020\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\001\002\000\052\014\uffe8\015" +
    "\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\001\002" +
    "\000\052\014\111\015\uffea\020\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\042\uffea\001\002\000\030\004\032\005\043\006\030" +
    "\007\033\010\025\011\045\021\036\023\037\024\042\043" +
    "\031\045\027\001\002\000\030\004\032\005\043\006\030" +
    "\007\033\010\025\011\045\021\036\023\037\024\042\043" +
    "\031\045\027\001\002\000\052\014\uffe7\015\uffe7\020\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000\052\014" +
    "\uffeb\015\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\001\002\000\030\004\032\005\043\006\030\007\033\010" +
    "\025\011\045\021\036\023\037\024\042\043\031\045\027" +
    "\001\002\000\052\014\uffcf\015\uffcf\020\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\001\002\000\044\022\065\023\054" +
    "\024\064\025\053\026\050\027\052\030\066\031\060\032" +
    "\047\033\057\034\063\035\062\036\051\037\055\040\061" +
    "\041\046\042\056\001\002\000\052\014\uffcb\015\uffcb\020" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\001\002\000\030" +
    "\004\032\005\043\006\030\007\033\010\025\011\045\021" +
    "\036\023\037\024\042\043\031\045\027\001\002\000\052" +
    "\014\uffdd\015\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\001\002\000\030\004\032\005\043\006\030\007\033" +
    "\010\025\011\045\021\036\023\037\024\042\043\031\045" +
    "\027\001\002\000\030\004\032\005\043\006\030\007\033" +
    "\010\025\011\045\021\036\023\037\024\042\043\031\045" +
    "\027\001\002\000\030\004\032\005\043\006\030\007\033" +
    "\010\025\011\045\021\036\023\037\024\042\043\031\045" +
    "\027\001\002\000\030\004\032\005\043\006\030\007\033" +
    "\010\025\011\045\021\036\023\037\024\042\043\031\045" +
    "\027\001\002\000\030\004\032\005\043\006\030\007\033" +
    "\010\025\011\045\021\036\023\037\024\042\043\031\045" +
    "\027\001\002\000\030\004\032\005\043\006\030\007\033" +
    "\010\025\011\045\021\036\023\037\024\042\043\031\045" +
    "\027\001\002\000\030\004\032\005\043\006\030\007\033" +
    "\010\025\011\045\021\036\023\037\024\042\043\031\045" +
    "\027\001\002\000\030\004\032\005\043\006\030\007\033" +
    "\010\025\011\045\021\036\023\037\024\042\043\031\045" +
    "\027\001\002\000\052\014\uffde\015\uffde\020\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\001\002\000\030\004\032\005" +
    "\043\006\030\007\033\010\025\011\045\021\036\023\037" +
    "\024\042\043\031\045\027\001\002\000\030\004\032\005" +
    "\043\006\030\007\033\010\025\011\045\021\036\023\037" +
    "\024\042\043\031\045\027\001\002\000\030\004\032\005" +
    "\043\006\030\007\033\010\025\011\045\021\036\023\037" +
    "\024\042\043\031\045\027\001\002\000\030\004\032\005" +
    "\043\006\030\007\033\010\025\011\045\021\036\023\037" +
    "\024\042\043\031\045\027\001\002\000\004\020\ufff6\001" +
    "\002\000\030\004\032\005\043\006\030\007\033\010\025" +
    "\011\045\021\036\023\037\024\042\043\031\045\027\001" +
    "\002\000\052\014\uffe0\015\uffe0\020\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\060\032" +
    "\047\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\001\002\000\052\014\uffe3\015\uffe3\020" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\053\026\050\027\052" +
    "\030\066\031\060\032\047\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\001\002\000\052" +
    "\014\uffd2\015\uffd2\020\uffd2\022\uffd2\023\054\024\064\025" +
    "\053\026\050\027\052\030\066\031\060\032\047\033\uffd2" +
    "\034\uffd2\035\062\036\051\037\055\040\061\041\uffd2\042" +
    "\uffd2\001\002\000\052\014\uffd6\015\uffd6\020\uffd6\022\uffd6" +
    "\023\054\024\064\025\053\026\050\027\052\030\066\031" +
    "\060\032\047\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\001\002\000\052\014\uffd5\015" +
    "\uffd5\020\uffd5\022\uffd5\023\054\024\064\025\053\026\050" +
    "\027\052\030\066\031\060\032\047\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\001\002" +
    "\000\052\014\uffd3\015\uffd3\020\uffd3\022\uffd3\023\054\024" +
    "\064\025\053\026\050\027\052\030\066\031\060\032\047" +
    "\033\uffd3\034\uffd3\035\062\036\051\037\055\040\061\041" +
    "\uffd3\042\uffd3\001\002\000\052\014\uffd9\015\uffd9\020\uffd9" +
    "\022\uffd9\023\054\024\064\025\053\026\050\027\052\030" +
    "\066\031\060\032\047\033\057\034\063\035\062\036\051" +
    "\037\055\040\061\041\uffd9\042\uffd9\001\002\000\052\014" +
    "\uffd4\015\uffd4\020\uffd4\022\uffd4\023\054\024\064\025\053" +
    "\026\050\027\052\030\066\031\060\032\047\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\001\002\000\052\014\uffe4\015\uffe4\020\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\053\026\050\027\052\030\066\031\060" +
    "\032\047\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\001\002\000\052\014\uffe2\015\uffe2" +
    "\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\052\030\066\031\060\032\047\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\001\002\000" +
    "\052\014\uffdf\015\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\060\032\047\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\001\002\000\052\014\uffd7\015\uffd7\020\uffd7\022" +
    "\uffd7\023\054\024\064\025\053\026\050\027\052\030\066" +
    "\031\060\032\047\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\001\002\000\052\014\uffe1" +
    "\015\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\052\030\066\031\060\032\047\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\001" +
    "\002\000\052\014\uffda\015\uffda\020\uffda\022\uffda\023\054" +
    "\024\064\025\053\026\050\027\052\030\066\031\060\032" +
    "\047\033\057\034\063\035\062\036\051\037\055\040\061" +
    "\041\uffda\042\056\001\002\000\052\014\uffdc\015\uffdc\020" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\053\026\050\027\052" +
    "\030\066\031\060\032\047\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\001\002\000\052" +
    "\014\uffdb\015\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\053\026\050\027\052\030\066\031\060\032\047\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\001\002\000\044\022\110\023\054\024\064\025\053" +
    "\026\050\027\052\030\066\031\060\032\047\033\057\034" +
    "\063\035\062\036\051\037\055\040\061\041\046\042\056" +
    "\001\002\000\052\014\uffe6\015\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\001\002\000\030\004\032\005\043" +
    "\006\030\007\033\010\025\011\045\021\036\023\037\024" +
    "\042\043\031\045\027\001\002\000\044\015\113\023\054" +
    "\024\064\025\053\026\050\027\052\030\066\031\060\032" +
    "\047\033\057\034\063\035\062\036\051\037\055\040\061" +
    "\041\046\042\056\001\002\000\030\004\032\005\043\006" +
    "\030\007\033\010\025\011\045\021\036\023\037\024\042" +
    "\043\031\045\027\001\002\000\052\014\ufff5\015\ufff5\020" +
    "\ufff5\022\ufff5\023\054\024\064\025\053\026\050\027\052" +
    "\030\066\031\060\032\047\033\057\034\063\035\062\036" +
    "\051\037\055\040\061\041\046\042\056\001\002\000\052" +
    "\014\uffd8\015\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\060\032\047\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\001\002\000\004\002\001\001\002\000\004\011\122" +
    "\001\002\000\030\004\032\005\043\006\030\007\033\010" +
    "\025\011\045\021\036\023\037\024\042\043\031\045\027" +
    "\001\002\000\044\020\ufff7\023\054\024\064\025\053\026" +
    "\050\027\052\030\066\031\060\032\047\033\057\034\063" +
    "\035\062\036\051\037\055\040\061\041\046\042\056\001" +
    "\002\000\010\017\uffef\020\uffef\044\uffef\001\002\000\030" +
    "\004\032\005\043\006\030\007\033\010\025\011\045\021" +
    "\036\023\037\024\042\043\031\045\027\001\002\000\044" +
    "\022\125\023\054\024\064\025\053\026\050\027\052\030" +
    "\066\031\060\032\047\033\057\034\063\035\062\036\051" +
    "\037\055\040\061\041\046\042\056\001\002\000\004\012" +
    "\126\001\002\000\012\011\017\046\005\047\012\053\006" +
    "\001\002\000\014\011\017\013\130\046\005\047\012\053" +
    "\006\001\002\000\020\002\ufff4\011\ufff4\013\ufff4\046\ufff4" +
    "\047\ufff4\053\ufff4\054\133\001\002\000\020\002\uffec\011" +
    "\uffec\013\uffec\046\uffec\047\uffec\053\uffec\054\uffec\001\002" +
    "\000\020\002\ufff2\011\ufff2\013\ufff2\046\ufff2\047\ufff2\053" +
    "\ufff2\054\147\001\002\000\006\012\134\053\135\001\002" +
    "\000\012\011\017\046\005\047\012\053\006\001\002\000" +
    "\004\021\136\001\002\000\030\004\032\005\043\006\030" +
    "\007\033\010\025\011\045\021\036\023\037\024\042\043" +
    "\031\045\027\001\002\000\044\022\140\023\054\024\064" +
    "\025\053\026\050\027\052\030\066\031\060\032\047\033" +
    "\057\034\063\035\062\036\051\037\055\040\061\041\046" +
    "\042\056\001\002\000\004\012\141\001\002\000\012\011" +
    "\017\046\005\047\012\053\006\001\002\000\014\011\017" +
    "\013\143\046\005\047\012\053\006\001\002\000\020\002" +
    "\ufff0\011\ufff0\013\ufff0\046\ufff0\047\ufff0\053\ufff0\054\ufff0" +
    "\001\002\000\014\011\017\013\145\046\005\047\012\053" +
    "\006\001\002\000\016\002\ufff3\011\ufff3\013\ufff3\046\ufff3" +
    "\047\ufff3\053\ufff3\001\002\000\020\002\uffed\011\uffed\013" +
    "\uffed\046\uffed\047\uffed\053\uffed\054\uffed\001\002\000\006" +
    "\012\150\053\135\001\002\000\012\011\017\046\005\047" +
    "\012\053\006\001\002\000\014\011\017\013\152\046\005" +
    "\047\012\053\006\001\002\000\016\002\ufff1\011\ufff1\013" +
    "\ufff1\046\ufff1\047\ufff1\053\ufff1\001\002\000\010\017\117" +
    "\020\154\044\155\001\002\000\004\020\ufff8\001\002\000" +
    "\030\004\032\005\043\006\030\007\033\010\025\011\045" +
    "\021\036\023\037\024\042\043\031\045\027\001\002\000" +
    "\044\020\ufff9\023\054\024\064\025\053\026\050\027\052" +
    "\030\066\031\060\032\047\033\057\034\063\035\062\036" +
    "\051\037\055\040\061\041\046\042\056\001\002\000\016" +
    "\002\ufffc\011\ufffc\013\ufffc\046\ufffc\047\ufffc\053\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\022\002\007\003\015\004\012\005\003\006" +
    "\014\007\013\011\010\013\006\001\001\000\002\001\001" +
    "\000\004\013\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\017\005\003\006\014\007\013\011\010\013\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\037\015\043\016\040" +
    "\017\025\020\033\021\034\022\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\037\015\114\016\040\017" +
    "\025\020\033\021\034\022\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\037\015\106\016\040\017\025\020\033\021\034" +
    "\022\023\001\001\000\020\010\037\015\105\016\040\017" +
    "\025\020\033\021\034\022\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\037\015\104\016\040\017" +
    "\025\020\033\021\034\022\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\037\015" +
    "\103\016\040\017\025\020\033\021\034\022\023\001\001" +
    "\000\002\001\001\000\020\010\037\015\102\016\040\017" +
    "\025\020\033\021\034\022\023\001\001\000\020\010\037" +
    "\015\101\016\040\017\025\020\033\021\034\022\023\001" +
    "\001\000\020\010\037\015\100\016\040\017\025\020\033" +
    "\021\034\022\023\001\001\000\020\010\037\015\077\016" +
    "\040\017\025\020\033\021\034\022\023\001\001\000\020" +
    "\010\037\015\076\016\040\017\025\020\033\021\034\022" +
    "\023\001\001\000\020\010\037\015\075\016\040\017\025" +
    "\020\033\021\034\022\023\001\001\000\020\010\037\015" +
    "\074\016\040\017\025\020\033\021\034\022\023\001\001" +
    "\000\020\010\037\015\073\016\040\017\025\020\033\021" +
    "\034\022\023\001\001\000\002\001\001\000\020\010\037" +
    "\015\072\016\040\017\025\020\033\021\034\022\023\001" +
    "\001\000\020\010\037\015\071\016\040\017\025\020\033" +
    "\021\034\022\023\001\001\000\020\010\037\015\070\016" +
    "\040\017\025\020\033\021\034\022\023\001\001\000\020" +
    "\010\037\015\067\016\040\017\025\020\033\021\034\022" +
    "\023\001\001\000\002\001\001\000\020\010\037\015\066" +
    "\016\040\017\025\020\033\021\034\022\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\037\015\111\016" +
    "\040\017\025\020\033\021\034\022\023\001\001\000\002" +
    "\001\001\000\020\010\037\015\113\016\040\017\025\020" +
    "\033\021\034\022\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\037\015\120\016\040\017\025\020\033\021\034\022\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\037\015\123\016\040\017\025\020\033\021\034\022\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\126\004\012\005\003\006\014\007\013\011\010\013\006" +
    "\001\001\000\016\004\017\005\003\006\014\007\013\011" +
    "\010\013\006\001\001\000\006\012\130\014\131\001\001" +
    "\000\002\001\001\000\004\012\145\001\001\000\002\001" +
    "\001\000\020\003\143\004\012\005\003\006\014\007\013" +
    "\011\010\013\006\001\001\000\002\001\001\000\020\010" +
    "\037\015\136\016\040\017\025\020\033\021\034\022\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\141\004\012\005\003\006\014\007\013\011\010\013\006" +
    "\001\001\000\016\004\017\005\003\006\014\007\013\011" +
    "\010\013\006\001\001\000\002\001\001\000\016\004\017" +
    "\005\003\006\014\007\013\011\010\013\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\150\004\012\005\003\006\014\007\013\011\010\013" +
    "\006\001\001\000\016\004\017\005\003\006\014\007\013" +
    "\011\010\013\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\037\015\155\016\040" +
    "\017\025\020\033\021\034\022\023\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_FS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_FS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_FS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

private ObjetoEntrada entrada;
private Nodo_AST_FS raiz;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

public void setRaiz(Nodo_AST_FS p_raiz)
{
    raiz = p_raiz;
}

public Nodo_AST_FS getRaiz()
{
    return raiz;
}

public void ejecutar_AST()
{
    if(raiz != null)
    {
        Grafica_AST_FS grafica = new Grafica_AST_FS(raiz);
        grafica.graficar_AST();
        AST_FS ejecutar = new AST_FS(raiz,entrada);
        ejecutar.ejecutar_AST();
    }    
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s)
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico FuncionScript");
    error_encontrado.setDescripcion(s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);        
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico FuncionScript");
    error_encontrado.setDescripcion("Error del cual no es posible recuperarse: " + s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);  
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_FS$actions {
  private final Sintactico_FS parser;

  /** Constructor */
  CUP$Sintactico_FS$actions(Sintactico_FS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_FS$do_action_part00000000(
    int                        CUP$Sintactico_FS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_FS$parser,
    java.util.Stack            CUP$Sintactico_FS$stack,
    int                        CUP$Sintactico_FS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_FS$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_FS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS start_val = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_FS$parser.done_parsing();
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_SENTENCIAS 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                raiz = new Nodo_AST_FS();
                raiz.setEtiqueta("AST");
                raiz.setValor("");
                raiz.setFila(String.valueOf(nright));
                raiz.setColumna(String.valueOf(nleft));
                raiz.getHijos().add(n);
                ejecutar_AST();
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = n1;
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_SENTENCIAS");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(n);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA_DECLARACION s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA_ASIGNACION s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA_IMPRIMIR s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA_SI 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA_DECLARACION ::= r_var LISTA_IDENTIFICADORES s_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                                nodo_expresion.setEtiqueta("EXPRESION");
                                nodo_expresion.setValor("");
                                nodo_expresion.setFila(String.valueOf(n3right));
                                nodo_expresion.setColumna(String.valueOf(n3left));
                                nodo_expresion.getHijos().add(n3);
                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(nodo_expresion);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA_DECLARACION ::= r_var LISTA_IDENTIFICADORES s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA_ASIGNACION ::= LISTA_IDENTIFICADORES s_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                                nodo_expresion.setEtiqueta("EXPRESION");
                                nodo_expresion.setValor("");
                                nodo_expresion.setFila(String.valueOf(n2right));
                                nodo_expresion.setColumna(String.valueOf(n2left));
                                nodo_expresion.getHijos().add(n2);

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_ASIGNACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(nodo_expresion);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA_IMPRIMIR ::= r_imprimir s_par_open EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_IMPRIMIR");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA_SELECCION ::= EXPRESION_RELACIONAL s_ternario EXPRESION s_dobledot EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_expresion_relacional = new Nodo_AST_FS();
                            nodo_expresion_relacional.setEtiqueta("EXPRESION_RELACIONAL");
                            nodo_expresion_relacional.setValor("");
                            nodo_expresion_relacional.setFila(String.valueOf(n1right));
                            nodo_expresion_relacional.setColumna(String.valueOf(n1left));
                            nodo_expresion_relacional.getHijos().add(n1);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_SELECCION");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(nodo_expresion_relacional);
                            RESULT.getHijos().add(n2);
                            RESULT.getHijos().add(n3);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close r_sino s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close LISTA_SENTENCIAS_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close LISTA_SENTENCIAS_SINO_SI r_sino s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n4 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                        RESULT.getHijos().add(n4);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_SINO_SI ::= r_sino r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_SINO_SI");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(iright));
                            RESULT.setColumna(String.valueOf(ileft));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO_SI",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES s_coma identificador 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n2);
                                nodo_identificador.setFila(String.valueOf(n2right));
                                nodo_identificador.setColumna(String.valueOf(n2left));

                                n1.getHijos().add(nodo_identificador);
                                RESULT = n1;
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",9, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_IDENTIFICADORES ::= identificador 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n);
                                nodo_identificador.setFila(String.valueOf(nright));
                                nodo_identificador.setColumna(String.valueOf(nleft));

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("LISTA_IDENTIFICADORES");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(nodo_identificador);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",9, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_SENTENCIAS_SINO_SI ::= LISTA_SENTENCIAS_SINO_SI SENTENCIA_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = n1;
                                    RESULT.getHijos().add(n2);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_SINO_SI",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_SENTENCIAS_SINO_SI ::= SENTENCIA_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("LISTA_SENTENCIA_SINO_SI");
                                    RESULT.setValor("");
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                    RESULT.getHijos().add(n);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_SINO_SI",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION_ARITMETICA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_ARITMETICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= EXPRESION_RELACIONAL 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_RELACIONAL");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION_UNARIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_UNARIA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= EXPRESION_LOGICA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_LOGICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= SENTENCIA_SELECCION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= s_par_open EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= DATO_PRIMITIVO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_ARITMETICA ::= EXPRESION s_plus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_ARITMETICA ::= EXPRESION s_minus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_ARITMETICA ::= EXPRESION s_mul EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_ARITMETICA ::= EXPRESION s_div EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_ARITMETICA ::= EXPRESION s_mod EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_ARITMETICA ::= EXPRESION s_to EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_ARITMETICA ::= EXPRESION s_increment 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_ARITMETICA ::= EXPRESION s_decrement 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION_UNARIA ::= s_minus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",13, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION_UNARIA ::= s_plus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",13, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION_LOGICA ::= EXPRESION s_or EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION_LOGICA ::= EXPRESION s_and EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION_LOGICA ::= s_not EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION_RELACIONAL ::= EXPRESION s_greather EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION_RELACIONAL ::= EXPRESION s_less EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_RELACIONAL ::= EXPRESION s_greather_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_RELACIONAL ::= EXPRESION s_less_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_RELACIONAL ::= EXPRESION s_compare EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION_RELACIONAL ::= EXPRESION s_diferent EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DATO_PRIMITIVO ::= r_nulo 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.nulo.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DATO_PRIMITIVO ::= booleano 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.booleano.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DATO_PRIMITIVO ::= entero 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.entero.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DATO_PRIMITIVO ::= decimal 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.decimal.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DATO_PRIMITIVO ::= caracter 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.caracter.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft)); 
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DATO_PRIMITIVO ::= cadena 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.cadena.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DATO_PRIMITIVO ::= identificador 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.identificador.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_FS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_FS$do_action(
    int                        CUP$Sintactico_FS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_FS$parser,
    java.util.Stack            CUP$Sintactico_FS$stack,
    int                        CUP$Sintactico_FS$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_FS$do_action_part00000000(
                               CUP$Sintactico_FS$act_num,
                               CUP$Sintactico_FS$parser,
                               CUP$Sintactico_FS$stack,
                               CUP$Sintactico_FS$top);
    }
}

}
