
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package FS_ANALIZADORES;

import java.io.File;
import java_cup.runtime.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import FS_TABLA_SIMBOLOS.Tabla_Enums;
import FS_AST.*;
import UI.ObjetoEntrada;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_FS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tabla_Simbolos_FS_CUP.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico_FS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico_FS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_FS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\007\000" +
    "\002\005\012\000\002\005\011\000\002\006\004\000\002" +
    "\006\003\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\011\006\000\002\011\005\000" +
    "\002\010\005\000\002\010\005\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\012\006\000\002\013" +
    "\007\000\002\014\011\000\002\014\015\000\002\014\012" +
    "\000\002\014\016\000\002\016\016\000\002\016\011\000" +
    "\002\017\010\000\002\015\012\000\002\020\003\000\002" +
    "\021\006\000\002\021\005\000\002\022\004\000\002\023" +
    "\005\000\002\023\006\000\002\024\004\000\002\025\005" +
    "\000\002\025\004\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\005\000\002\030\005\000\002\031\006\000" +
    "\002\032\005\000\002\033\005\000\002\034\005\000\002" +
    "\035\006\000\002\036\006\000\002\037\006\000\002\040" +
    "\006\000\002\041\006\000\002\042\006\000\002\043\014" +
    "\000\002\044\022\000\002\045\026\000\002\047\034\000" +
    "\002\046\034\000\002\050\026\000\002\051\024\000\002" +
    "\052\030\000\002\052\026\000\002\053\010\000\002\054" +
    "\007\000\002\054\010\000\002\055\007\000\002\055\010" +
    "\000\002\056\006\000\002\056\004\000\002\057\005\000" +
    "\002\057\003\000\002\060\004\000\002\060\003\000\002" +
    "\061\004\000\002\061\003\000\002\062\005\000\002\062" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\005\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\064\005\000\002\064\005\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\064\004\000\002\064\004\000\002\065\004\000\002" +
    "\065\004\000\002\066\005\000\002\066\005\000\002\066" +
    "\004\000\002\067\005\000\002\067\005\000\002\067\005" +
    "\000\002\067\005\000\002\067\005\000\002\067\005\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\072\005\000\002\073\005\000\002\074\005" +
    "\000\002\074\003\000\002\075\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c1\000\026\011\022\050\025\051\024\052\035\053" +
    "\020\054\004\055\014\057\043\062\037\103\046\001\002" +
    "\000\032\004\064\005\101\006\062\007\066\010\057\011" +
    "\105\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\004\022\u01c2\001\002\000\004\046\u01c0\001" +
    "\002\000\004\022\u01bf\001\002\000\004\022\u01be\001\002" +
    "\000\004\022\u01bd\001\002\000\004\022\u01bc\001\002\000" +
    "\030\002\ufffb\011\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\057\ufffb\062\ufffb\103\ufffb\001\002\000" +
    "\004\023\u01a4\001\002\000\004\022\u01a3\001\002\000\030" +
    "\002\ufffa\011\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\057\ufffa\062\ufffa\103\ufffa\001\002\000\004" +
    "\022\u01a2\001\002\000\004\022\uffcf\001\002\000\032\002" +
    "\ufff0\011\ufff0\013\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\057\ufff0\062\ufff0\103\ufff0\001\002\000" +
    "\014\014\110\020\u012e\021\uff9d\023\111\046\uff9d\001\002" +
    "\000\004\022\u012d\001\002\000\004\023\u012a\001\002\000" +
    "\004\011\u0126\001\002\000\004\022\u0124\001\002\000\030" +
    "\002\ufffc\011\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\057\ufffc\062\ufffc\103\ufffc\001\002\000\004" +
    "\022\u0123\001\002\000\004\022\u0122\001\002\000\004\022" +
    "\u0121\001\002\000\004\022\u0120\001\002\000\030\002\000" +
    "\011\022\050\025\051\024\052\035\053\020\054\004\055" +
    "\014\057\043\062\037\103\046\001\002\000\004\023\u0119" +
    "\001\002\000\006\021\u0106\046\u0107\001\002\000\004\011" +
    "\366\001\002\000\004\022\365\001\002\000\004\022\364" +
    "\001\002\000\032\002\ufff1\011\ufff1\013\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\057\ufff1\062\ufff1" +
    "\103\ufff1\001\002\000\004\023\336\001\002\000\004\022" +
    "\335\001\002\000\004\022\334\001\002\000\004\023\053" +
    "\001\002\000\004\002\052\001\002\000\004\022\051\001" +
    "\002\000\032\002\uffed\011\uffed\013\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\057\uffed\062\uffed\103" +
    "\uffed\001\002\000\004\002\001\001\002\000\004\010\054" +
    "\001\002\000\004\021\055\001\002\000\032\004\064\005" +
    "\101\006\062\007\066\010\057\011\105\023\071\025\072" +
    "\026\077\045\063\047\061\103\046\001\002\000\060\013" +
    "\uff91\015\uff91\016\uff91\017\uff91\021\uff91\022\uff91\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\001\002\000\060\013\uff71\015" +
    "\uff71\016\uff71\017\uff71\021\uff71\022\uff71\024\uff71\025\uff71" +
    "\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034" +
    "\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71" +
    "\043\uff71\044\uff71\001\002\000\060\013\uff94\015\uff94\016" +
    "\uff94\017\uff94\021\uff94\022\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035" +
    "\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94" +
    "\044\uff94\001\002\000\060\013\uff76\015\uff76\016\uff76\017" +
    "\uff76\021\uff76\022\uff76\024\uff76\025\uff76\026\uff76\027\uff76" +
    "\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036" +
    "\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76" +
    "\001\002\000\060\013\uff73\015\uff73\016\uff73\017\uff73\021" +
    "\uff73\022\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73" +
    "\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037" +
    "\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73\001\002" +
    "\000\032\004\064\005\101\006\062\007\066\010\057\011" +
    "\105\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\060\013\uff75\015\uff75\016\uff75\017\uff75\021" +
    "\uff75\022\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75" +
    "\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037" +
    "\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\001\002" +
    "\000\060\013\uff8c\015\uff8c\016\uff8c\017\uff8c\021\uff8c\022" +
    "\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\001\002\000\060" +
    "\013\uff72\015\uff72\016\uff72\017\uff72\021\uff72\022\uff72\024" +
    "\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72" +
    "\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041" +
    "\uff72\042\uff72\043\uff72\044\uff72\001\002\000\060\013\uff93" +
    "\015\uff93\016\uff93\017\uff93\021\uff93\022\uff93\024\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\001\002\000\060\013\uff95\015\uff95" +
    "\016\327\017\uff95\021\uff95\022\uff95\024\uff95\025\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95" +
    "\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043" +
    "\uff95\044\uff95\001\002\000\032\004\064\005\101\006\062" +
    "\007\066\010\057\011\105\023\071\025\072\026\077\045" +
    "\063\047\061\103\046\001\002\000\032\004\064\005\101" +
    "\006\062\007\066\010\057\011\105\023\071\025\072\026" +
    "\077\045\063\047\061\103\046\001\002\000\060\013\uff90" +
    "\015\uff90\016\uff90\017\uff90\021\uff90\022\uff90\024\uff90\025" +
    "\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90" +
    "\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042" +
    "\uff90\043\uff90\044\uff90\001\002\000\060\013\uff8a\015\uff8a" +
    "\016\uff8a\017\uff8a\021\uff8a\022\uff8a\024\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\001\002\000\060\013\uff96\015\uff96\016\uff96" +
    "\017\uff96\021\uff96\022\uff96\024\uff96\025\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96" +
    "\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\001\002\000\060\013\uff8f\015\uff8f\016\uff8f\017\uff8f" +
    "\021\uff8f\022\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030" +
    "\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\060\013\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\021\uff8e\022\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\001" +
    "\002\000\060\013\uff74\015\uff74\016\uff74\017\uff74\021\uff74" +
    "\022\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031" +
    "\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74" +
    "\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\001\002\000" +
    "\060\013\uff8d\015\uff8d\016\uff8d\017\uff8d\021\uff8d\022\uff8d" +
    "\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\001\002\000\060\013" +
    "\uff8b\015\uff8b\016\uff8b\017\uff8b\021\uff8b\022\uff8b\024\uff8b" +
    "\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033" +
    "\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\001\002\000\044\021\316\025" +
    "\124\026\132\027\122\030\117\031\121\032\134\033\127" +
    "\034\116\035\130\036\131\037\133\040\120\041\123\042" +
    "\126\043\115\044\125\001\002\000\066\013\uff70\014\110" +
    "\015\uff70\016\uff70\017\uff70\020\106\021\uff70\022\uff70\023" +
    "\111\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\001\002\000\040" +
    "\011\254\063\205\064\172\065\211\066\203\067\164\070" +
    "\163\071\177\072\176\073\174\074\201\075\175\076\173" +
    "\104\253\112\252\001\002\000\062\013\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\160\021\uffc9\022\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\001\002\000\032\004\064\005\101\006" +
    "\062\007\066\010\057\011\105\023\071\025\072\026\077" +
    "\045\063\047\061\103\046\001\002\000\034\004\064\005" +
    "\101\006\062\007\066\010\057\011\105\023\071\024\112" +
    "\025\072\026\077\045\063\047\061\103\046\001\002\000" +
    "\060\013\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\001\002\000\006\021" +
    "\153\024\154\001\002\000\050\015\uff97\021\uff97\024\uff97" +
    "\025\124\026\132\027\122\030\117\031\121\032\134\033" +
    "\127\034\116\035\130\036\131\037\133\040\120\041\123" +
    "\042\126\043\115\044\125\001\002\000\032\004\064\005" +
    "\101\006\062\007\066\010\057\011\105\023\071\025\072" +
    "\026\077\045\063\047\061\103\046\001\002\000\060\013" +
    "\uff82\015\uff82\016\uff82\017\uff82\021\uff82\022\uff82\024\uff82" +
    "\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033" +
    "\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\044\uff82\001\002\000\032\004\064\005" +
    "\101\006\062\007\066\010\057\011\105\023\071\025\072" +
    "\026\077\045\063\047\061\103\046\001\002\000\032\004" +
    "\064\005\101\006\062\007\066\010\057\011\105\023\071" +
    "\025\072\026\077\045\063\047\061\103\046\001\002\000" +
    "\032\004\064\005\101\006\062\007\066\010\057\011\105" +
    "\023\071\025\072\026\077\045\063\047\061\103\046\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\032\004\064\005\101\006\062\007\066" +
    "\010\057\011\105\023\071\025\072\026\077\045\063\047" +
    "\061\103\046\001\002\000\032\004\064\005\101\006\062" +
    "\007\066\010\057\011\105\023\071\025\072\026\077\045" +
    "\063\047\061\103\046\001\002\000\032\004\064\005\101" +
    "\006\062\007\066\010\057\011\105\023\071\025\072\026" +
    "\077\045\063\047\061\103\046\001\002\000\032\004\064" +
    "\005\101\006\062\007\066\010\057\011\105\023\071\025" +
    "\072\026\077\045\063\047\061\103\046\001\002\000\060" +
    "\013\uff83\015\uff83\016\uff83\017\uff83\021\uff83\022\uff83\024" +
    "\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83" +
    "\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041" +
    "\uff83\042\uff83\043\uff83\044\uff83\001\002\000\032\004\064" +
    "\005\101\006\062\007\066\010\057\011\105\023\071\025" +
    "\072\026\077\045\063\047\061\103\046\001\002\000\032" +
    "\004\064\005\101\006\062\007\066\010\057\011\105\023" +
    "\071\025\072\026\077\045\063\047\061\103\046\001\002" +
    "\000\032\004\064\005\101\006\062\007\066\010\057\011" +
    "\105\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\032\004\064\005\101\006\062\007\066\010" +
    "\057\011\105\023\071\025\072\026\077\045\063\047\061" +
    "\103\046\001\002\000\032\004\064\005\101\006\062\007" +
    "\066\010\057\011\105\023\071\025\072\026\077\045\063" +
    "\047\061\103\046\001\002\000\060\013\uff85\015\uff85\016" +
    "\uff85\017\uff85\021\uff85\022\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\033\127\034\116\035" +
    "\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85" +
    "\044\uff85\001\002\000\060\013\uff7b\015\uff7b\016\uff7b\017" +
    "\uff7b\021\uff7b\022\uff7b\024\uff7b\025\124\026\132\027\122" +
    "\030\117\031\121\032\134\033\127\034\116\035\uff7b\036" +
    "\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b" +
    "\001\002\000\060\013\uff88\015\uff88\016\uff88\017\uff88\021" +
    "\uff88\022\uff88\024\uff88\025\uff88\026\uff88\027\122\030\117" +
    "\031\121\032\134\033\127\034\116\035\uff88\036\uff88\037" +
    "\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\001\002" +
    "\000\060\013\uff77\015\uff77\016\uff77\017\uff77\021\uff77\022" +
    "\uff77\024\uff77\025\124\026\132\027\122\030\117\031\121" +
    "\032\134\033\127\034\116\035\uff77\036\uff77\037\133\040" +
    "\120\041\123\042\126\043\uff77\044\uff77\001\002\000\060" +
    "\013\uff78\015\uff78\016\uff78\017\uff78\021\uff78\022\uff78\024" +
    "\uff78\025\124\026\132\027\122\030\117\031\121\032\134" +
    "\033\127\034\116\035\uff78\036\uff78\037\133\040\120\041" +
    "\123\042\126\043\uff78\044\uff78\001\002\000\060\013\uff7a" +
    "\015\uff7a\016\uff7a\017\uff7a\021\uff7a\022\uff7a\024\uff7a\025" +
    "\124\026\132\027\122\030\117\031\121\032\134\033\127" +
    "\034\116\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042" +
    "\uff7a\043\uff7a\044\uff7a\001\002\000\060\013\uff7e\015\uff7e" +
    "\016\uff7e\017\uff7e\021\uff7e\022\uff7e\024\uff7e\025\124\026" +
    "\132\027\122\030\117\031\121\032\134\033\127\034\116" +
    "\035\130\036\131\037\133\040\120\041\123\042\126\043" +
    "\uff7e\044\uff7e\001\002\000\060\013\uff89\015\uff89\016\uff89" +
    "\017\uff89\021\uff89\022\uff89\024\uff89\025\uff89\026\uff89\027" +
    "\122\030\117\031\121\032\134\033\127\034\116\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\001\002\000\060\013\uff79\015\uff79\016\uff79\017\uff79" +
    "\021\uff79\022\uff79\024\uff79\025\124\026\132\027\122\030" +
    "\117\031\121\032\134\033\127\034\116\035\uff79\036\uff79" +
    "\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\001" +
    "\002\000\060\013\uff87\015\uff87\016\uff87\017\uff87\021\uff87" +
    "\022\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031" +
    "\121\032\134\033\127\034\116\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\001\002\000" +
    "\060\013\uff84\015\uff84\016\uff84\017\uff84\021\uff84\022\uff84" +
    "\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032" +
    "\uff84\033\127\034\116\035\uff84\036\uff84\037\uff84\040\uff84" +
    "\041\uff84\042\uff84\043\uff84\044\uff84\001\002\000\060\013" +
    "\uff7c\015\uff7c\016\uff7c\017\uff7c\021\uff7c\022\uff7c\024\uff7c" +
    "\025\124\026\132\027\122\030\117\031\121\032\134\033" +
    "\127\034\116\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\001\002\000\060\013\uff86\015" +
    "\uff86\016\uff86\017\uff86\021\uff86\022\uff86\024\uff86\025\uff86" +
    "\026\uff86\027\uff86\030\uff86\031\121\032\134\033\127\034" +
    "\116\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86" +
    "\043\uff86\044\uff86\001\002\000\060\013\uff7f\015\uff7f\016" +
    "\uff7f\017\uff7f\021\uff7f\022\uff7f\024\uff7f\025\124\026\132" +
    "\027\122\030\117\031\121\032\134\033\127\034\116\035" +
    "\130\036\131\037\133\040\120\041\123\042\126\043\uff7f" +
    "\044\125\001\002\000\032\004\064\005\101\006\062\007" +
    "\066\010\057\011\105\023\071\025\072\026\077\045\063" +
    "\047\061\103\046\001\002\000\060\013\uffce\015\uffce\016" +
    "\uffce\017\uffce\021\uffce\022\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\001\002\000\050\015\uff98\021\uff98\024\uff98\025" +
    "\124\026\132\027\122\030\117\031\121\032\134\033\127" +
    "\034\116\035\130\036\131\037\133\040\120\041\123\042" +
    "\126\043\115\044\125\001\002\000\044\015\157\025\124" +
    "\026\132\027\122\030\117\031\121\032\134\033\127\034" +
    "\116\035\130\036\131\037\133\040\120\041\123\042\126" +
    "\043\115\044\125\001\002\000\062\013\uffca\015\uffca\016" +
    "\uffca\017\uffca\021\uffca\022\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\046\uffca\001\002\000\032\063\205\064\172\065" +
    "\211\066\203\067\164\070\163\071\177\072\176\073\174" +
    "\074\201\075\175\076\173\001\002\000\062\013\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\001\002\000\062\013\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\001\002\000\004\023\246\001" +
    "\002\000\004\023\244\001\002\000\062\013\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\001\002\000\062\013\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\001\002\000\062\013\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\001\002\000\062\013\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\001\002\000\062\013\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\001\002\000\004\023\242\001\002" +
    "\000\004\023\237\001\002\000\004\023\234\001\002\000" +
    "\004\023\231\001\002\000\004\023\226\001\002\000\004" +
    "\023\223\001\002\000\062\013\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\001\002\000\004\023\220\001\002\000\062\013" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\001\002\000\004\023" +
    "\216\001\002\000\062\013\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\001\002\000\004\023\214\001\002\000\062\013\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\001\002\000\062\013\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\001\002\000\062\013\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\001\002\000\004\023\212" +
    "\001\002\000\004\024\213\001\002\000\062\013\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\001\002\000\004\024\215\001" +
    "\002\000\062\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\001" +
    "\002\000\004\024\217\001\002\000\062\013\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\001\002\000\004\011\221\001\002" +
    "\000\004\024\222\001\002\000\062\013\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\001\002\000\004\011\224\001\002\000" +
    "\004\024\225\001\002\000\062\013\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\001\002\000\004\011\227\001\002\000\004" +
    "\024\230\001\002\000\062\013\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\001\002\000\004\011\232\001\002\000\004\024" +
    "\233\001\002\000\062\013\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\001\002\000\004\011\235\001\002\000\004\024\236" +
    "\001\002\000\062\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\001\002\000\004\010\240\001\002\000\004\024\241\001" +
    "\002\000\062\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\001" +
    "\002\000\004\024\243\001\002\000\062\013\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\001\002\000\004\024\245\001\002" +
    "\000\062\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\001\002" +
    "\000\004\011\247\001\002\000\004\024\250\001\002\000" +
    "\062\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\001\002\000" +
    "\062\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\001\002\000" +
    "\004\023\272\001\002\000\004\023\255\001\002\000\062" +
    "\013\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\001\002\000\032" +
    "\004\064\005\101\006\062\007\066\010\057\011\105\023" +
    "\071\025\072\026\077\045\063\047\061\103\046\001\002" +
    "\000\044\021\257\025\124\026\132\027\122\030\117\031" +
    "\121\032\134\033\127\034\116\035\130\036\131\037\133" +
    "\040\120\041\123\042\126\043\115\044\125\001\002\000" +
    "\032\004\064\005\101\006\062\007\066\010\057\011\105" +
    "\023\071\025\072\026\077\045\063\047\061\103\046\001" +
    "\002\000\044\021\261\025\124\026\132\027\122\030\117" +
    "\031\121\032\134\033\127\034\116\035\130\036\131\037" +
    "\133\040\120\041\123\042\126\043\115\044\125\001\002" +
    "\000\004\010\262\001\002\000\004\021\263\001\002\000" +
    "\032\004\064\005\101\006\062\007\066\010\057\011\105" +
    "\023\071\025\072\026\077\045\063\047\061\103\046\001" +
    "\002\000\044\021\265\025\124\026\132\027\122\030\117" +
    "\031\121\032\134\033\127\034\116\035\130\036\131\037" +
    "\133\040\120\041\123\042\126\043\115\044\125\001\002" +
    "\000\032\004\064\005\101\006\062\007\066\010\057\011" +
    "\105\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\044\021\267\025\124\026\132\027\122\030" +
    "\117\031\121\032\134\033\127\034\116\035\130\036\131" +
    "\037\133\040\120\041\123\042\126\043\115\044\125\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\044\024\271\025\124\026\132\027\122" +
    "\030\117\031\121\032\134\033\127\034\116\035\130\036" +
    "\131\037\133\040\120\041\123\042\126\043\115\044\125" +
    "\001\002\000\060\013\uffad\015\uffad\016\uffad\017\uffad\021" +
    "\uffad\022\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\001\002" +
    "\000\032\004\064\005\101\006\062\007\066\010\057\011" +
    "\105\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\044\021\274\025\124\026\132\027\122\030" +
    "\117\031\121\032\134\033\127\034\116\035\130\036\131" +
    "\037\133\040\120\041\123\042\126\043\115\044\125\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\044\021\276\025\124\026\132\027\122" +
    "\030\117\031\121\032\134\033\127\034\116\035\130\036" +
    "\131\037\133\040\120\041\123\042\126\043\115\044\125" +
    "\001\002\000\004\010\277\001\002\000\004\021\300\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\044\021\302\025\124\026\132\027\122" +
    "\030\117\031\121\032\134\033\127\034\116\035\130\036" +
    "\131\037\133\040\120\041\123\042\126\043\115\044\125" +
    "\001\002\000\032\004\064\005\101\006\062\007\066\010" +
    "\057\011\105\023\071\025\072\026\077\045\063\047\061" +
    "\103\046\001\002\000\044\021\304\025\124\026\132\027" +
    "\122\030\117\031\121\032\134\033\127\034\116\035\130" +
    "\036\131\037\133\040\120\041\123\042\126\043\115\044" +
    "\125\001\002\000\032\004\064\005\101\006\062\007\066" +
    "\010\057\011\105\023\071\025\072\026\077\045\063\047" +
    "\061\103\046\001\002\000\044\021\306\025\124\026\132" +
    "\027\122\030\117\031\121\032\134\033\127\034\116\035" +
    "\130\036\131\037\133\040\120\041\123\042\126\043\115" +
    "\044\125\001\002\000\032\004\064\005\101\006\062\007" +
    "\066\010\057\011\105\023\071\025\072\026\077\045\063" +
    "\047\061\103\046\001\002\000\044\021\310\025\124\026" +
    "\132\027\122\030\117\031\121\032\134\033\127\034\116" +
    "\035\130\036\131\037\133\040\120\041\123\042\126\043" +
    "\115\044\125\001\002\000\032\004\064\005\101\006\062" +
    "\007\066\010\057\011\105\023\071\025\072\026\077\045" +
    "\063\047\061\103\046\001\002\000\046\021\313\024\312" +
    "\025\124\026\132\027\122\030\117\031\121\032\134\033" +
    "\127\034\116\035\130\036\131\037\133\040\120\041\123" +
    "\042\126\043\115\044\125\001\002\000\060\013\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\001\002\000\032\004\064\005\101\006" +
    "\062\007\066\010\057\011\105\023\071\025\072\026\077" +
    "\045\063\047\061\103\046\001\002\000\044\024\315\025" +
    "\124\026\132\027\122\030\117\031\121\032\134\033\127" +
    "\034\116\035\130\036\131\037\133\040\120\041\123\042" +
    "\126\043\115\044\125\001\002\000\060\013\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\001\002\000\032\004\064\005\101\006\062" +
    "\007\066\010\057\011\105\023\071\025\072\026\077\045" +
    "\063\047\061\103\046\001\002\000\044\021\320\025\124" +
    "\026\132\027\122\030\117\031\121\032\134\033\127\034" +
    "\116\035\130\036\131\037\133\040\120\041\123\042\126" +
    "\043\115\044\125\001\002\000\032\004\064\005\101\006" +
    "\062\007\066\010\057\011\105\023\071\025\072\026\077" +
    "\045\063\047\061\103\046\001\002\000\044\024\322\025" +
    "\124\026\132\027\122\030\117\031\121\032\134\033\127" +
    "\034\116\035\130\036\131\037\133\040\120\041\123\042" +
    "\126\043\115\044\125\001\002\000\060\013\uffae\015\uffae" +
    "\016\uffae\017\uffae\021\uffae\022\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\001\002\000\060\013\uff81\015\uff81\016\uff81" +
    "\017\uff81\021\uff81\022\uff81\024\uff81\025\uff81\026\uff81\027" +
    "\122\030\117\031\121\032\134\033\127\034\116\035\uff81" +
    "\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044" +
    "\uff81\001\002\000\060\013\uff80\015\uff80\016\uff80\017\uff80" +
    "\021\uff80\022\uff80\024\uff80\025\uff80\026\uff80\027\122\030" +
    "\117\031\121\032\134\033\127\034\116\035\uff80\036\uff80" +
    "\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\001" +
    "\002\000\044\024\326\025\124\026\132\027\122\030\117" +
    "\031\121\032\134\033\127\034\116\035\130\036\131\037" +
    "\133\040\120\041\123\042\126\043\115\044\125\001\002" +
    "\000\060\013\uff92\015\uff92\016\uff92\017\uff92\021\uff92\022" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040" +
    "\uff92\041\uff92\042\uff92\043\uff92\044\uff92\001\002\000\032" +
    "\004\064\005\101\006\062\007\066\010\057\011\105\023" +
    "\071\025\072\026\077\045\063\047\061\103\046\001\002" +
    "\000\044\017\331\025\124\026\132\027\122\030\117\031" +
    "\121\032\134\033\127\034\116\035\130\036\131\037\133" +
    "\040\120\041\123\042\126\043\115\044\125\001\002\000" +
    "\032\004\064\005\101\006\062\007\066\010\057\011\105" +
    "\023\071\025\072\026\077\045\063\047\061\103\046\001" +
    "\002\000\060\013\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8" +
    "\022\uffd8\024\uffd8\025\124\026\132\027\122\030\117\031" +
    "\121\032\134\033\127\034\116\035\130\036\131\037\133" +
    "\040\120\041\123\042\126\043\115\044\125\001\002\000" +
    "\060\013\uff7d\015\uff7d\016\uff7d\017\uff7d\021\uff7d\022\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032" +
    "\uff7d\033\127\034\116\035\uff7d\036\uff7d\037\uff7d\040\uff7d" +
    "\041\uff7d\042\uff7d\043\uff7d\044\uff7d\001\002\000\032\002" +
    "\uffe2\011\uffe2\013\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\057\uffe2\062\uffe2\103\uffe2\001\002\000" +
    "\032\002\uffe3\011\uffe3\013\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\057\uffe3\062\uffe3\103\uffe3\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\044\024\340\025\124\026\132\027\122" +
    "\030\117\031\121\032\134\033\127\034\116\035\130\036" +
    "\131\037\133\040\120\041\123\042\126\043\115\044\125" +
    "\001\002\000\004\012\341\001\002\000\004\060\342\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\010\013\345\060\342\061\346\001\002" +
    "\000\010\013\uff99\060\uff99\061\uff99\001\002\000\032\002" +
    "\uffd2\011\uffd2\013\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\057\uffd2\062\uffd2\103\uffd2\001\002\000" +
    "\004\017\350\001\002\000\010\013\uff9a\060\uff9a\061\uff9a" +
    "\001\002\000\004\012\351\001\002\000\022\011\022\050" +
    "\025\051\024\053\020\054\004\055\014\057\043\103\046" +
    "\001\002\000\024\011\ufff5\013\ufff5\050\ufff5\051\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\057\ufff5\103\ufff5\001\002\000\024" +
    "\011\022\013\354\050\025\051\024\053\020\054\004\055" +
    "\014\057\043\103\046\001\002\000\004\013\356\001\002" +
    "\000\024\011\ufff6\013\ufff6\050\ufff6\051\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\057\ufff6\103\ufff6\001\002\000\032\002\uffd3" +
    "\011\uffd3\013\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\057\uffd3\062\uffd3\103\uffd3\001\002\000\044" +
    "\017\360\025\124\026\132\027\122\030\117\031\121\032" +
    "\134\033\127\034\116\035\130\036\131\037\133\040\120" +
    "\041\123\042\126\043\115\044\125\001\002\000\004\012" +
    "\361\001\002\000\022\011\022\050\025\051\024\053\020" +
    "\054\004\055\014\057\043\103\046\001\002\000\024\011" +
    "\022\013\363\050\025\051\024\053\020\054\004\055\014" +
    "\057\043\103\046\001\002\000\010\013\uffd1\060\uffd1\061" +
    "\uffd1\001\002\000\032\002\ufff4\011\ufff4\013\ufff4\050\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\057\ufff4\062" +
    "\ufff4\103\ufff4\001\002\000\032\002\uffe8\011\uffe8\013\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\057" +
    "\uffe8\062\uffe8\103\uffe8\001\002\000\004\023\367\001\002" +
    "\000\006\024\370\050\372\001\002\000\004\012\u0103\001" +
    "\002\000\006\021\374\024\375\001\002\000\004\011\373" +
    "\001\002\000\006\021\uff9f\024\uff9f\001\002\000\004\050" +
    "\u0101\001\002\000\004\012\376\001\002\000\022\011\022" +
    "\050\025\051\024\053\020\054\004\055\014\057\043\103" +
    "\046\001\002\000\024\011\022\013\u0100\050\025\051\024" +
    "\053\020\054\004\055\014\057\043\103\046\001\002\000" +
    "\030\002\ufff8\011\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\057\ufff8\062\ufff8\103\ufff8\001\002\000" +
    "\004\011\u0102\001\002\000\006\021\uffa0\024\uffa0\001\002" +
    "\000\022\011\022\050\025\051\024\053\020\054\004\055" +
    "\014\057\043\103\046\001\002\000\024\011\022\013\u0105" +
    "\050\025\051\024\053\020\054\004\055\014\057\043\103" +
    "\046\001\002\000\030\002\ufff7\011\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\062\ufff7\103" +
    "\ufff7\001\002\000\004\011\u0118\001\002\000\036\004\064" +
    "\005\101\006\062\007\066\010\057\011\105\012\u010b\014" +
    "\u0109\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\004\022\uffdb\001\002\000\032\004\064\005" +
    "\101\006\062\007\066\010\057\011\105\023\071\025\072" +
    "\026\077\045\063\047\061\103\046\001\002\000\004\022" +
    "\uffda\001\002\000\004\011\u010e\001\002\000\004\022\uffde" +
    "\001\002\000\044\022\uffdc\025\124\026\132\027\122\030" +
    "\117\031\121\032\134\033\127\034\116\035\130\036\131" +
    "\037\133\040\120\041\123\042\126\043\115\044\125\001" +
    "\002\000\004\017\u0114\001\002\000\006\013\u0112\021\u0111" +
    "\001\002\000\006\013\uff6c\021\uff6c\001\002\000\004\011" +
    "\u010e\001\002\000\004\022\uff6e\001\002\000\006\013\uff6d" +
    "\021\uff6d\001\002\000\032\004\064\005\101\006\062\007" +
    "\066\010\057\011\105\023\071\025\072\026\077\045\063" +
    "\047\061\103\046\001\002\000\046\013\uff6b\021\uff6b\025" +
    "\124\026\132\027\122\030\117\031\121\032\134\033\127" +
    "\034\116\035\130\036\131\037\133\040\120\041\123\042" +
    "\126\043\115\044\125\001\002\000\006\015\u0117\021\153" +
    "\001\002\000\004\022\uff6f\001\002\000\010\021\uff9e\022" +
    "\uff9e\046\uff9e\001\002\000\004\010\u011a\001\002\000\004" +
    "\024\u011b\001\002\000\004\022\u011c\001\002\000\030\002" +
    "\ufff9\011\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\057\ufff9\062\ufff9\103\ufff9\001\002\000\030\002" +
    "\ufffd\011\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\057\ufffd\062\ufffd\103\ufffd\001\002\000\030\002" +
    "\uffff\011\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff" +
    "\055\uffff\057\uffff\062\uffff\103\uffff\001\002\000\030\002" +
    "\ufffe\011\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\057\ufffe\062\ufffe\103\ufffe\001\002\000\032\002" +
    "\uffe1\011\uffe1\013\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\057\uffe1\062\uffe1\103\uffe1\001\002\000" +
    "\032\002\uffe6\011\uffe6\013\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\057\uffe6\062\uffe6\103\uffe6\001" +
    "\002\000\032\002\uffee\011\uffee\013\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\057\uffee\062\uffee\103" +
    "\uffee\001\002\000\032\002\uffe5\011\uffe5\013\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057\uffe5\062" +
    "\uffe5\103\uffe5\001\002\000\032\002\uffef\011\uffef\013\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\057" +
    "\uffef\062\uffef\103\uffef\001\002\000\010\021\u0106\022\u0127" +
    "\046\u0128\001\002\000\010\021\uff9d\022\uff9d\046\uff9d\001" +
    "\002\000\004\022\uffdf\001\002\000\036\004\064\005\101" +
    "\006\062\007\066\010\057\011\105\012\u010b\014\u0109\023" +
    "\071\025\072\026\077\045\063\047\061\103\046\001\002" +
    "\000\004\022\uffe0\001\002\000\032\004\064\005\101\006" +
    "\062\007\066\010\057\011\105\023\071\025\072\026\077" +
    "\045\063\047\061\103\046\001\002\000\044\024\u012c\025" +
    "\124\026\132\027\122\030\117\031\121\032\134\033\127" +
    "\034\116\035\130\036\131\037\133\040\120\041\123\042" +
    "\126\043\115\044\125\001\002\000\004\022\uffd9\001\002" +
    "\000\032\002\uffec\011\uffec\013\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\057\uffec\062\uffec\103\uffec" +
    "\001\002\000\060\011\254\063\205\064\172\065\211\066" +
    "\203\067\164\070\163\071\177\072\176\073\174\074\201" +
    "\075\175\076\173\104\253\105\u0136\106\u012f\107\u0133\110" +
    "\u0130\111\u0132\112\252\116\u0134\117\u0135\120\u0131\001\002" +
    "\000\004\023\u018b\001\002\000\004\023\u017a\001\002\000" +
    "\004\023\u0176\001\002\000\004\023\u0167\001\002\000\004" +
    "\023\u0150\001\002\000\004\023\u014d\001\002\000\004\023" +
    "\u0148\001\002\000\004\023\u0137\001\002\000\032\004\064" +
    "\005\101\006\062\007\066\010\057\011\105\023\071\025" +
    "\072\026\077\045\063\047\061\103\046\001\002\000\044" +
    "\021\u0139\025\124\026\132\027\122\030\117\031\121\032" +
    "\134\033\127\034\116\035\130\036\131\037\133\040\120" +
    "\041\123\042\126\043\115\044\125\001\002\000\032\004" +
    "\064\005\101\006\062\007\066\010\057\011\105\023\071" +
    "\025\072\026\077\045\063\047\061\103\046\001\002\000" +
    "\044\021\u013b\025\124\026\132\027\122\030\117\031\121" +
    "\032\134\033\127\034\116\035\130\036\131\037\133\040" +
    "\120\041\123\042\126\043\115\044\125\001\002\000\004" +
    "\010\u013c\001\002\000\004\021\u013d\001\002\000\032\004" +
    "\064\005\101\006\062\007\066\010\057\011\105\023\071" +
    "\025\072\026\077\045\063\047\061\103\046\001\002\000" +
    "\044\021\u013f\025\124\026\132\027\122\030\117\031\121" +
    "\032\134\033\127\034\116\035\130\036\131\037\133\040" +
    "\120\041\123\042\126\043\115\044\125\001\002\000\032" +
    "\004\064\005\101\006\062\007\066\010\057\011\105\023" +
    "\071\025\072\026\077\045\063\047\061\103\046\001\002" +
    "\000\044\021\u0141\025\124\026\132\027\122\030\117\031" +
    "\121\032\134\033\127\034\116\035\130\036\131\037\133" +
    "\040\120\041\123\042\126\043\115\044\125\001\002\000" +
    "\032\004\064\005\101\006\062\007\066\010\057\011\105" +
    "\023\071\025\072\026\077\045\063\047\061\103\046\001" +
    "\002\000\044\021\u0143\025\124\026\132\027\122\030\117" +
    "\031\121\032\134\033\127\034\116\035\130\036\131\037" +
    "\133\040\120\041\123\042\126\043\115\044\125\001\002" +
    "\000\032\004\064\005\101\006\062\007\066\010\057\011" +
    "\105\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\044\021\u0145\025\124\026\132\027\122\030" +
    "\117\031\121\032\134\033\127\034\116\035\130\036\131" +
    "\037\133\040\120\041\123\042\126\043\115\044\125\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\044\024\u0147\025\124\026\132\027\122" +
    "\030\117\031\121\032\134\033\127\034\116\035\130\036" +
    "\131\037\133\040\120\041\123\042\126\043\115\044\125" +
    "\001\002\000\004\022\uffac\001\002\000\006\011\u014b\024" +
    "\u0149\001\002\000\004\022\uffa4\001\002\000\004\024\u014c" +
    "\001\002\000\004\023\111\001\002\000\004\022\uffa3\001" +
    "\002\000\004\011\u014b\001\002\000\004\024\u014f\001\002" +
    "\000\004\022\uffa5\001\002\000\032\004\064\005\101\006" +
    "\062\007\066\010\057\011\105\023\071\025\072\026\077" +
    "\045\063\047\061\103\046\001\002\000\044\021\u0152\025" +
    "\124\026\132\027\122\030\117\031\121\032\134\033\127" +
    "\034\116\035\130\036\131\037\133\040\120\041\123\042" +
    "\126\043\115\044\125\001\002\000\032\004\064\005\101" +
    "\006\062\007\066\010\057\011\105\023\071\025\072\026" +
    "\077\045\063\047\061\103\046\001\002\000\044\021\u0154" +
    "\025\124\026\132\027\122\030\117\031\121\032\134\033" +
    "\127\034\116\035\130\036\131\037\133\040\120\041\123" +
    "\042\126\043\115\044\125\001\002\000\032\004\064\005" +
    "\101\006\062\007\066\010\057\011\105\023\071\025\072" +
    "\026\077\045\063\047\061\103\046\001\002\000\044\021" +
    "\u0156\025\124\026\132\027\122\030\117\031\121\032\134" +
    "\033\127\034\116\035\130\036\131\037\133\040\120\041" +
    "\123\042\126\043\115\044\125\001\002\000\032\004\064" +
    "\005\101\006\062\007\066\010\057\011\105\023\071\025" +
    "\072\026\077\045\063\047\061\103\046\001\002\000\044" +
    "\021\u0158\025\124\026\132\027\122\030\117\031\121\032" +
    "\134\033\127\034\116\035\130\036\131\037\133\040\120" +
    "\041\123\042\126\043\115\044\125\001\002\000\004\010" +
    "\u0159\001\002\000\004\021\u015a\001\002\000\032\004\064" +
    "\005\101\006\062\007\066\010\057\011\105\023\071\025" +
    "\072\026\077\045\063\047\061\103\046\001\002\000\044" +
    "\021\u015c\025\124\026\132\027\122\030\117\031\121\032" +
    "\134\033\127\034\116\035\130\036\131\037\133\040\120" +
    "\041\123\042\126\043\115\044\125\001\002\000\032\004" +
    "\064\005\101\006\062\007\066\010\057\011\105\023\071" +
    "\025\072\026\077\045\063\047\061\103\046\001\002\000" +
    "\044\021\u015e\025\124\026\132\027\122\030\117\031\121" +
    "\032\134\033\127\034\116\035\130\036\131\037\133\040" +
    "\120\041\123\042\126\043\115\044\125\001\002\000\032" +
    "\004\064\005\101\006\062\007\066\010\057\011\105\023" +
    "\071\025\072\026\077\045\063\047\061\103\046\001\002" +
    "\000\044\021\u0160\025\124\026\132\027\122\030\117\031" +
    "\121\032\134\033\127\034\116\035\130\036\131\037\133" +
    "\040\120\041\123\042\126\043\115\044\125\001\002\000" +
    "\032\004\064\005\101\006\062\007\066\010\057\011\105" +
    "\023\071\025\072\026\077\045\063\047\061\103\046\001" +
    "\002\000\044\021\u0162\025\124\026\132\027\122\030\117" +
    "\031\121\032\134\033\127\034\116\035\130\036\131\037" +
    "\133\040\120\041\123\042\126\043\115\044\125\001\002" +
    "\000\032\004\064\005\101\006\062\007\066\010\057\011" +
    "\105\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\044\021\u0164\025\124\026\132\027\122\030" +
    "\117\031\121\032\134\033\127\034\116\035\130\036\131" +
    "\037\133\040\120\041\123\042\126\043\115\044\125\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\044\024\u0166\025\124\026\132\027\122" +
    "\030\117\031\121\032\134\033\127\034\116\035\130\036" +
    "\131\037\133\040\120\041\123\042\126\043\115\044\125" +
    "\001\002\000\004\022\uffaa\001\002\000\032\004\064\005" +
    "\101\006\062\007\066\010\057\011\105\023\071\025\072" +
    "\026\077\045\063\047\061\103\046\001\002\000\044\021" +
    "\u0169\025\124\026\132\027\122\030\117\031\121\032\134" +
    "\033\127\034\116\035\130\036\131\037\133\040\120\041" +
    "\123\042\126\043\115\044\125\001\002\000\032\004\064" +
    "\005\101\006\062\007\066\010\057\011\105\023\071\025" +
    "\072\026\077\045\063\047\061\103\046\001\002\000\044" +
    "\021\u016b\025\124\026\132\027\122\030\117\031\121\032" +
    "\134\033\127\034\116\035\130\036\131\037\133\040\120" +
    "\041\123\042\126\043\115\044\125\001\002\000\032\004" +
    "\064\005\101\006\062\007\066\010\057\011\105\023\071" +
    "\025\072\026\077\045\063\047\061\103\046\001\002\000" +
    "\044\021\u016d\025\124\026\132\027\122\030\117\031\121" +
    "\032\134\033\127\034\116\035\130\036\131\037\133\040" +
    "\120\041\123\042\126\043\115\044\125\001\002\000\032" +
    "\004\064\005\101\006\062\007\066\010\057\011\105\023" +
    "\071\025\072\026\077\045\063\047\061\103\046\001\002" +
    "\000\044\021\u016f\025\124\026\132\027\122\030\117\031" +
    "\121\032\134\033\127\034\116\035\130\036\131\037\133" +
    "\040\120\041\123\042\126\043\115\044\125\001\002\000" +
    "\032\004\064\005\101\006\062\007\066\010\057\011\105" +
    "\023\071\025\072\026\077\045\063\047\061\103\046\001" +
    "\002\000\044\021\u0171\025\124\026\132\027\122\030\117" +
    "\031\121\032\134\033\127\034\116\035\130\036\131\037" +
    "\133\040\120\041\123\042\126\043\115\044\125\001\002" +
    "\000\032\004\064\005\101\006\062\007\066\010\057\011" +
    "\105\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\044\021\u0173\025\124\026\132\027\122\030" +
    "\117\031\121\032\134\033\127\034\116\035\130\036\131" +
    "\037\133\040\120\041\123\042\126\043\115\044\125\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\044\024\u0175\025\124\026\132\027\122" +
    "\030\117\031\121\032\134\033\127\034\116\035\130\036" +
    "\131\037\133\040\120\041\123\042\126\043\115\044\125" +
    "\001\002\000\004\022\uffa8\001\002\000\006\011\u014b\024" +
    "\u0177\001\002\000\004\022\uffa2\001\002\000\004\024\u0179" +
    "\001\002\000\004\022\uffa1\001\002\000\032\004\064\005" +
    "\101\006\062\007\066\010\057\011\105\023\071\025\072" +
    "\026\077\045\063\047\061\103\046\001\002\000\044\021" +
    "\u017c\025\124\026\132\027\122\030\117\031\121\032\134" +
    "\033\127\034\116\035\130\036\131\037\133\040\120\041" +
    "\123\042\126\043\115\044\125\001\002\000\032\004\064" +
    "\005\101\006\062\007\066\010\057\011\105\023\071\025" +
    "\072\026\077\045\063\047\061\103\046\001\002\000\044" +
    "\021\u017e\025\124\026\132\027\122\030\117\031\121\032" +
    "\134\033\127\034\116\035\130\036\131\037\133\040\120" +
    "\041\123\042\126\043\115\044\125\001\002\000\032\004" +
    "\064\005\101\006\062\007\066\010\057\011\105\023\071" +
    "\025\072\026\077\045\063\047\061\103\046\001\002\000" +
    "\044\021\u0180\025\124\026\132\027\122\030\117\031\121" +
    "\032\134\033\127\034\116\035\130\036\131\037\133\040" +
    "\120\041\123\042\126\043\115\044\125\001\002\000\032" +
    "\004\064\005\101\006\062\007\066\010\057\011\105\023" +
    "\071\025\072\026\077\045\063\047\061\103\046\001\002" +
    "\000\044\021\u0182\025\124\026\132\027\122\030\117\031" +
    "\121\032\134\033\127\034\116\035\130\036\131\037\133" +
    "\040\120\041\123\042\126\043\115\044\125\001\002\000" +
    "\032\004\064\005\101\006\062\007\066\010\057\011\105" +
    "\023\071\025\072\026\077\045\063\047\061\103\046\001" +
    "\002\000\044\021\u0184\025\124\026\132\027\122\030\117" +
    "\031\121\032\134\033\127\034\116\035\130\036\131\037" +
    "\133\040\120\041\123\042\126\043\115\044\125\001\002" +
    "\000\032\004\064\005\101\006\062\007\066\010\057\011" +
    "\105\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\044\021\u0186\025\124\026\132\027\122\030" +
    "\117\031\121\032\134\033\127\034\116\035\130\036\131" +
    "\037\133\040\120\041\123\042\126\043\115\044\125\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\044\021\u0188\025\124\026\132\027\122" +
    "\030\117\031\121\032\134\033\127\034\116\035\130\036" +
    "\131\037\133\040\120\041\123\042\126\043\115\044\125" +
    "\001\002\000\032\004\064\005\101\006\062\007\066\010" +
    "\057\011\105\023\071\025\072\026\077\045\063\047\061" +
    "\103\046\001\002\000\044\024\u018a\025\124\026\132\027" +
    "\122\030\117\031\121\032\134\033\127\034\116\035\130" +
    "\036\131\037\133\040\120\041\123\042\126\043\115\044" +
    "\125\001\002\000\004\022\uffa9\001\002\000\032\004\064" +
    "\005\101\006\062\007\066\010\057\011\105\023\071\025" +
    "\072\026\077\045\063\047\061\103\046\001\002\000\044" +
    "\021\u018d\025\124\026\132\027\122\030\117\031\121\032" +
    "\134\033\127\034\116\035\130\036\131\037\133\040\120" +
    "\041\123\042\126\043\115\044\125\001\002\000\032\004" +
    "\064\005\101\006\062\007\066\010\057\011\105\023\071" +
    "\025\072\026\077\045\063\047\061\103\046\001\002\000" +
    "\044\021\u018f\025\124\026\132\027\122\030\117\031\121" +
    "\032\134\033\127\034\116\035\130\036\131\037\133\040" +
    "\120\041\123\042\126\043\115\044\125\001\002\000\032" +
    "\004\064\005\101\006\062\007\066\010\057\011\105\023" +
    "\071\025\072\026\077\045\063\047\061\103\046\001\002" +
    "\000\044\021\u0191\025\124\026\132\027\122\030\117\031" +
    "\121\032\134\033\127\034\116\035\130\036\131\037\133" +
    "\040\120\041\123\042\126\043\115\044\125\001\002\000" +
    "\032\004\064\005\101\006\062\007\066\010\057\011\105" +
    "\023\071\025\072\026\077\045\063\047\061\103\046\001" +
    "\002\000\044\021\u0193\025\124\026\132\027\122\030\117" +
    "\031\121\032\134\033\127\034\116\035\130\036\131\037" +
    "\133\040\120\041\123\042\126\043\115\044\125\001\002" +
    "\000\004\010\u0194\001\002\000\004\021\u0195\001\002\000" +
    "\032\004\064\005\101\006\062\007\066\010\057\011\105" +
    "\023\071\025\072\026\077\045\063\047\061\103\046\001" +
    "\002\000\044\021\u0197\025\124\026\132\027\122\030\117" +
    "\031\121\032\134\033\127\034\116\035\130\036\131\037" +
    "\133\040\120\041\123\042\126\043\115\044\125\001\002" +
    "\000\032\004\064\005\101\006\062\007\066\010\057\011" +
    "\105\023\071\025\072\026\077\045\063\047\061\103\046" +
    "\001\002\000\044\021\u0199\025\124\026\132\027\122\030" +
    "\117\031\121\032\134\033\127\034\116\035\130\036\131" +
    "\037\133\040\120\041\123\042\126\043\115\044\125\001" +
    "\002\000\032\004\064\005\101\006\062\007\066\010\057" +
    "\011\105\023\071\025\072\026\077\045\063\047\061\103" +
    "\046\001\002\000\044\021\u019b\025\124\026\132\027\122" +
    "\030\117\031\121\032\134\033\127\034\116\035\130\036" +
    "\131\037\133\040\120\041\123\042\126\043\115\044\125" +
    "\001\002\000\032\004\064\005\101\006\062\007\066\010" +
    "\057\011\105\023\071\025\072\026\077\045\063\047\061" +
    "\103\046\001\002\000\044\021\u019d\025\124\026\132\027" +
    "\122\030\117\031\121\032\134\033\127\034\116\035\130" +
    "\036\131\037\133\040\120\041\123\042\126\043\115\044" +
    "\125\001\002\000\032\004\064\005\101\006\062\007\066" +
    "\010\057\011\105\023\071\025\072\026\077\045\063\047" +
    "\061\103\046\001\002\000\044\021\u019f\025\124\026\132" +
    "\027\122\030\117\031\121\032\134\033\127\034\116\035" +
    "\130\036\131\037\133\040\120\041\123\042\126\043\115" +
    "\044\125\001\002\000\032\004\064\005\101\006\062\007" +
    "\066\010\057\011\105\023\071\025\072\026\077\045\063" +
    "\047\061\103\046\001\002\000\044\024\u01a1\025\124\026" +
    "\132\027\122\030\117\031\121\032\134\033\127\034\116" +
    "\035\130\036\131\037\133\040\120\041\123\042\126\043" +
    "\115\044\125\001\002\000\004\022\uffab\001\002\000\032" +
    "\002\ufff3\011\ufff3\013\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\057\ufff3\062\ufff3\103\ufff3\001\002" +
    "\000\032\002\uffe4\011\uffe4\013\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4\062\uffe4\103\uffe4" +
    "\001\002\000\032\004\064\005\101\006\062\007\066\010" +
    "\057\011\105\023\071\025\072\026\077\045\063\047\061" +
    "\103\046\001\002\000\044\024\u01a6\025\124\026\132\027" +
    "\122\030\117\031\121\032\134\033\127\034\116\035\130" +
    "\036\131\037\133\040\120\041\123\042\126\043\115\044" +
    "\125\001\002\000\004\012\u01a7\001\002\000\022\011\022" +
    "\050\025\051\024\053\020\054\004\055\014\057\043\103" +
    "\046\001\002\000\024\011\022\013\u01a9\050\025\051\024" +
    "\053\020\054\004\055\014\057\043\103\046\001\002\000" +
    "\034\002\uffd7\011\uffd7\013\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\u01ac\057\uffd7\062\uffd7\103" +
    "\uffd7\001\002\000\034\002\uff9b\011\uff9b\013\uff9b\050\uff9b" +
    "\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057" +
    "\uff9b\062\uff9b\103\uff9b\001\002\000\034\002\uffd5\011\uffd5" +
    "\013\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\u01b8\057\uffd5\062\uffd5\103\uffd5\001\002\000\006" +
    "\012\u01ad\055\u01ae\001\002\000\022\011\022\050\025\051" +
    "\024\053\020\054\004\055\014\057\043\103\046\001\002" +
    "\000\004\023\u01af\001\002\000\032\004\064\005\101\006" +
    "\062\007\066\010\057\011\105\023\071\025\072\026\077" +
    "\045\063\047\061\103\046\001\002\000\044\024\u01b1\025" +
    "\124\026\132\027\122\030\117\031\121\032\134\033\127" +
    "\034\116\035\130\036\131\037\133\040\120\041\123\042" +
    "\126\043\115\044\125\001\002\000\004\012\u01b2\001\002" +
    "\000\022\011\022\050\025\051\024\053\020\054\004\055" +
    "\014\057\043\103\046\001\002\000\024\011\022\013\u01b4" +
    "\050\025\051\024\053\020\054\004\055\014\057\043\103" +
    "\046\001\002\000\034\002\uffd0\011\uffd0\013\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\062\uffd0\103\uffd0\001\002\000\024\011\022\013\u01b6" +
    "\050\025\051\024\053\020\054\004\055\014\057\043\103" +
    "\046\001\002\000\032\002\uffd6\011\uffd6\013\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\062" +
    "\uffd6\103\uffd6\001\002\000\034\002\uff9c\011\uff9c\013\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\062\uff9c\103\uff9c\001\002\000\006\012\u01b9" +
    "\055\u01ae\001\002\000\022\011\022\050\025\051\024\053" +
    "\020\054\004\055\014\057\043\103\046\001\002\000\024" +
    "\011\022\013\u01bb\050\025\051\024\053\020\054\004\055" +
    "\014\057\043\103\046\001\002\000\032\002\uffd4\011\uffd4" +
    "\013\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\057\uffd4\062\uffd4\103\uffd4\001\002\000\032\002\uffea" +
    "\011\uffea\013\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054" +
    "\uffea\055\uffea\057\uffea\062\uffea\103\uffea\001\002\000\032" +
    "\002\ufff2\011\ufff2\013\ufff2\050\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\057\ufff2\062\ufff2\103\ufff2\001\002" +
    "\000\032\002\uffeb\011\uffeb\013\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\057\uffeb\062\uffeb\103\uffeb" +
    "\001\002\000\032\002\uffe7\011\uffe7\013\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\057\uffe7\062\uffe7" +
    "\103\uffe7\001\002\000\036\004\064\005\101\006\062\007" +
    "\066\010\057\011\105\012\u010b\014\u0109\023\071\025\072" +
    "\026\077\045\063\047\061\103\046\001\002\000\004\022" +
    "\uffdd\001\002\000\032\002\uffe9\011\uffe9\013\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\057\uffe9\062" +
    "\uffe9\103\uffe9\001\002\000\044\022\uffcc\025\124\026\132" +
    "\027\122\030\117\031\121\032\134\033\127\034\116\035" +
    "\130\036\131\037\133\040\120\041\123\042\126\043\115" +
    "\044\125\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c1\000\070\002\046\003\033\004\026\005\012\007" +
    "\015\010\016\011\040\012\010\014\041\016\020\020\025" +
    "\021\030\022\047\023\005\024\022\043\007\044\011\045" +
    "\004\046\006\047\037\050\031\051\027\052\014\053\043" +
    "\054\044\055\032\057\035\001\001\000\034\013\072\021" +
    "\075\023\077\024\101\043\064\044\102\052\073\063\u01c2" +
    "\064\074\065\057\066\066\067\067\070\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u0124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\004\u011d\005\u011e\007\u011c\010" +
    "\016\011\040\012\010\014\041\016\020\020\025\021\030" +
    "\022\047\023\005\024\022\043\007\044\011\045\004\046" +
    "\006\047\037\050\031\051\027\052\014\053\043\054\044" +
    "\055\032\057\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\013\072\021\075\023\077" +
    "\024\101\043\064\044\102\052\073\063\103\064\074\065" +
    "\057\066\066\067\067\070\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\013\072\021\075\023\077\024\101" +
    "\043\064\044\102\052\073\063\332\064\074\065\057\066" +
    "\066\067\067\070\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\013\072\021\075\023\077\024\101\043\064" +
    "\044\102\052\073\063\324\064\074\065\057\066\066\067" +
    "\067\070\055\001\001\000\034\013\072\021\075\023\077" +
    "\024\101\043\064\044\102\052\073\063\323\064\074\065" +
    "\057\066\066\067\067\070\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\013\072\021\075\023\077\024\101\043\064\044\102" +
    "\052\073\063\322\064\074\065\057\066\066\067\067\070" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\106\001\001\000\034\026\250\027\160\030\207\031\165" +
    "\032\166\033\161\034\201\035\205\036\206\037\167\040" +
    "\164\041\170\042\203\001\001\000\002\001\001\000\034" +
    "\013\072\021\075\023\077\024\101\043\064\044\102\052" +
    "\073\063\155\064\074\065\057\066\066\067\067\070\055" +
    "\001\001\000\036\013\072\021\075\023\077\024\101\043" +
    "\064\044\102\052\073\062\112\063\113\064\074\065\057" +
    "\066\066\067\067\070\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\013\072\021\075" +
    "\023\077\024\101\043\064\044\102\052\073\063\151\064" +
    "\074\065\057\066\066\067\067\070\055\001\001\000\002" +
    "\001\001\000\034\013\072\021\075\023\077\024\101\043" +
    "\064\044\102\052\073\063\150\064\074\065\057\066\066" +
    "\067\067\070\055\001\001\000\034\013\072\021\075\023" +
    "\077\024\101\043\064\044\102\052\073\063\147\064\074" +
    "\065\057\066\066\067\067\070\055\001\001\000\034\013" +
    "\072\021\075\023\077\024\101\043\064\044\102\052\073" +
    "\063\146\064\074\065\057\066\066\067\067\070\055\001" +
    "\001\000\034\013\072\021\075\023\077\024\101\043\064" +
    "\044\102\052\073\063\145\064\074\065\057\066\066\067" +
    "\067\070\055\001\001\000\034\013\072\021\075\023\077" +
    "\024\101\043\064\044\102\052\073\063\144\064\074\065" +
    "\057\066\066\067\067\070\055\001\001\000\034\013\072" +
    "\021\075\023\077\024\101\043\064\044\102\052\073\063" +
    "\143\064\074\065\057\066\066\067\067\070\055\001\001" +
    "\000\034\013\072\021\075\023\077\024\101\043\064\044" +
    "\102\052\073\063\142\064\074\065\057\066\066\067\067" +
    "\070\055\001\001\000\034\013\072\021\075\023\077\024" +
    "\101\043\064\044\102\052\073\063\141\064\074\065\057" +
    "\066\066\067\067\070\055\001\001\000\002\001\001\000" +
    "\034\013\072\021\075\023\077\024\101\043\064\044\102" +
    "\052\073\063\140\064\074\065\057\066\066\067\067\070" +
    "\055\001\001\000\034\013\072\021\075\023\077\024\101" +
    "\043\064\044\102\052\073\063\137\064\074\065\057\066" +
    "\066\067\067\070\055\001\001\000\034\013\072\021\075" +
    "\023\077\024\101\043\064\044\102\052\073\063\136\064" +
    "\074\065\057\066\066\067\067\070\055\001\001\000\034" +
    "\013\072\021\075\023\077\024\101\043\064\044\102\052" +
    "\073\063\135\064\074\065\057\066\066\067\067\070\055" +
    "\001\001\000\034\013\072\021\075\023\077\024\101\043" +
    "\064\044\102\052\073\063\134\064\074\065\057\066\066" +
    "\067\067\070\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\013" +
    "\072\021\075\023\077\024\101\043\064\044\102\052\073" +
    "\063\154\064\074\065\057\066\066\067\067\070\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\026\177\027\160\030\207\031" +
    "\165\032\166\033\161\034\201\035\205\036\206\037\167" +
    "\040\164\041\170\042\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\013\072\021\075\023\077\024\101\043\064" +
    "\044\102\052\073\063\255\064\074\065\057\066\066\067" +
    "\067\070\055\001\001\000\002\001\001\000\034\013\072" +
    "\021\075\023\077\024\101\043\064\044\102\052\073\063" +
    "\257\064\074\065\057\066\066\067\067\070\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\013\072\021\075\023\077\024\101\043\064\044\102" +
    "\052\073\063\263\064\074\065\057\066\066\067\067\070" +
    "\055\001\001\000\002\001\001\000\034\013\072\021\075" +
    "\023\077\024\101\043\064\044\102\052\073\063\265\064" +
    "\074\065\057\066\066\067\067\070\055\001\001\000\002" +
    "\001\001\000\034\013\072\021\075\023\077\024\101\043" +
    "\064\044\102\052\073\063\267\064\074\065\057\066\066" +
    "\067\067\070\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\013\072\021\075\023\077\024\101\043\064" +
    "\044\102\052\073\063\272\064\074\065\057\066\066\067" +
    "\067\070\055\001\001\000\002\001\001\000\034\013\072" +
    "\021\075\023\077\024\101\043\064\044\102\052\073\063" +
    "\274\064\074\065\057\066\066\067\067\070\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\013\072\021\075\023\077\024\101\043\064\044\102" +
    "\052\073\063\300\064\074\065\057\066\066\067\067\070" +
    "\055\001\001\000\002\001\001\000\034\013\072\021\075" +
    "\023\077\024\101\043\064\044\102\052\073\063\302\064" +
    "\074\065\057\066\066\067\067\070\055\001\001\000\002" +
    "\001\001\000\034\013\072\021\075\023\077\024\101\043" +
    "\064\044\102\052\073\063\304\064\074\065\057\066\066" +
    "\067\067\070\055\001\001\000\002\001\001\000\034\013" +
    "\072\021\075\023\077\024\101\043\064\044\102\052\073" +
    "\063\306\064\074\065\057\066\066\067\067\070\055\001" +
    "\001\000\002\001\001\000\034\013\072\021\075\023\077" +
    "\024\101\043\064\044\102\052\073\063\310\064\074\065" +
    "\057\066\066\067\067\070\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\013\072\021\075\023\077\024" +
    "\101\043\064\044\102\052\073\063\313\064\074\065\057" +
    "\066\066\067\067\070\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\013\072\021\075\023\077\024\101" +
    "\043\064\044\102\052\073\063\316\064\074\065\057\066" +
    "\066\067\067\070\055\001\001\000\002\001\001\000\034" +
    "\013\072\021\075\023\077\024\101\043\064\044\102\052" +
    "\073\063\320\064\074\065\057\066\066\067\067\070\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\013\072\021\075\023\077\024\101\043\064\044" +
    "\102\052\073\063\327\064\074\065\057\066\066\067\067" +
    "\070\055\001\001\000\002\001\001\000\034\013\072\021" +
    "\075\023\077\024\101\043\064\044\102\052\073\063\331" +
    "\064\074\065\057\066\066\067\067\070\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\013\072\021\075\023\077\024\101\043" +
    "\064\044\102\052\073\063\336\064\074\065\057\066\066" +
    "\067\067\070\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\343\061\342\001\001\000\034\013\072" +
    "\021\075\023\077\024\101\043\064\044\102\052\073\063" +
    "\356\064\074\065\057\066\066\067\067\070\055\001\001" +
    "\000\004\017\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\006\352\007\351\010\016\011\040\012\010\014" +
    "\041\016\020\020\025\021\030\022\047\023\005\024\022" +
    "\043\007\044\011\045\004\046\006\047\037\050\031\051" +
    "\027\052\014\053\043\054\044\055\032\057\035\001\001" +
    "\000\002\001\001\000\060\007\354\010\016\011\040\012" +
    "\010\014\041\016\020\020\025\021\030\022\047\023\005" +
    "\024\022\043\007\044\011\045\004\046\006\047\037\050" +
    "\031\051\027\052\014\053\043\054\044\055\032\057\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\006\361" +
    "\007\351\010\016\011\040\012\010\014\041\016\020\020" +
    "\025\021\030\022\047\023\005\024\022\043\007\044\011" +
    "\045\004\046\006\047\037\050\031\051\027\052\014\053" +
    "\043\054\044\055\032\057\035\001\001\000\060\007\354" +
    "\010\016\011\040\012\010\014\041\016\020\020\025\021" +
    "\030\022\047\023\005\024\022\043\007\044\011\045\004" +
    "\046\006\047\037\050\031\051\027\052\014\053\043\054" +
    "\044\055\032\057\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\006\376\007\351\010\016\011\040\012\010" +
    "\014\041\016\020\020\025\021\030\022\047\023\005\024" +
    "\022\043\007\044\011\045\004\046\006\047\037\050\031" +
    "\051\027\052\014\053\043\054\044\055\032\057\035\001" +
    "\001\000\060\007\354\010\016\011\040\012\010\014\041" +
    "\016\020\020\025\021\030\022\047\023\005\024\022\043" +
    "\007\044\011\045\004\046\006\047\037\050\031\051\027" +
    "\052\014\053\043\054\044\055\032\057\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\006\u0103\007\351\010\016\011\040\012\010\014\041\016" +
    "\020\020\025\021\030\022\047\023\005\024\022\043\007" +
    "\044\011\045\004\046\006\047\037\050\031\051\027\052" +
    "\014\053\043\054\044\055\032\057\035\001\001\000\060" +
    "\007\354\010\016\011\040\012\010\014\041\016\020\020" +
    "\025\021\030\022\047\023\005\024\022\043\007\044\011" +
    "\045\004\046\006\047\037\050\031\051\027\052\014\053" +
    "\043\054\044\055\032\057\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\013\072\021\075\023\077\024" +
    "\101\043\064\044\102\052\073\063\u010c\064\074\065\057" +
    "\066\066\067\067\070\055\071\u010b\072\u0107\073\u0109\001" +
    "\001\000\002\001\001\000\036\013\072\021\075\023\077" +
    "\024\101\043\064\044\102\052\073\062\u0115\063\113\064" +
    "\074\065\057\066\066\067\067\070\055\001\001\000\002" +
    "\001\001\000\006\074\u010e\075\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\u0112\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\013\072\021\075\023\077" +
    "\024\101\043\064\044\102\052\073\063\u0114\064\074\065" +
    "\057\066\066\067\067\070\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\013\072\021\075" +
    "\023\077\024\101\043\064\044\102\052\073\063\u010c\064" +
    "\074\065\057\066\066\067\067\070\055\071\u0128\072\u0107" +
    "\073\u0109\001\001\000\002\001\001\000\034\013\072\021" +
    "\075\023\077\024\101\043\064\044\102\052\073\063\u012a" +
    "\064\074\065\057\066\066\067\067\070\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\026\250\027\160\030\207\031\165\032\166\033\161\034" +
    "\201\035\205\036\206\037\167\040\164\041\170\042\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\013\072\021" +
    "\075\023\077\024\101\043\064\044\102\052\073\063\u0137" +
    "\064\074\065\057\066\066\067\067\070\055\001\001\000" +
    "\002\001\001\000\034\013\072\021\075\023\077\024\101" +
    "\043\064\044\102\052\073\063\u0139\064\074\065\057\066" +
    "\066\067\067\070\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\013\072\021\075\023" +
    "\077\024\101\043\064\044\102\052\073\063\u013d\064\074" +
    "\065\057\066\066\067\067\070\055\001\001\000\002\001" +
    "\001\000\034\013\072\021\075\023\077\024\101\043\064" +
    "\044\102\052\073\063\u013f\064\074\065\057\066\066\067" +
    "\067\070\055\001\001\000\002\001\001\000\034\013\072" +
    "\021\075\023\077\024\101\043\064\044\102\052\073\063" +
    "\u0141\064\074\065\057\066\066\067\067\070\055\001\001" +
    "\000\002\001\001\000\034\013\072\021\075\023\077\024" +
    "\101\043\064\044\102\052\073\063\u0143\064\074\065\057" +
    "\066\066\067\067\070\055\001\001\000\002\001\001\000" +
    "\034\013\072\021\075\023\077\024\101\043\064\044\102" +
    "\052\073\063\u0145\064\074\065\057\066\066\067\067\070" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0149\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u014d\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\013\072\021" +
    "\075\023\077\024\101\043\064\044\102\052\073\063\u0150" +
    "\064\074\065\057\066\066\067\067\070\055\001\001\000" +
    "\002\001\001\000\034\013\072\021\075\023\077\024\101" +
    "\043\064\044\102\052\073\063\u0152\064\074\065\057\066" +
    "\066\067\067\070\055\001\001\000\002\001\001\000\034" +
    "\013\072\021\075\023\077\024\101\043\064\044\102\052" +
    "\073\063\u0154\064\074\065\057\066\066\067\067\070\055" +
    "\001\001\000\002\001\001\000\034\013\072\021\075\023" +
    "\077\024\101\043\064\044\102\052\073\063\u0156\064\074" +
    "\065\057\066\066\067\067\070\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\013\072" +
    "\021\075\023\077\024\101\043\064\044\102\052\073\063" +
    "\u015a\064\074\065\057\066\066\067\067\070\055\001\001" +
    "\000\002\001\001\000\034\013\072\021\075\023\077\024" +
    "\101\043\064\044\102\052\073\063\u015c\064\074\065\057" +
    "\066\066\067\067\070\055\001\001\000\002\001\001\000" +
    "\034\013\072\021\075\023\077\024\101\043\064\044\102" +
    "\052\073\063\u015e\064\074\065\057\066\066\067\067\070" +
    "\055\001\001\000\002\001\001\000\034\013\072\021\075" +
    "\023\077\024\101\043\064\044\102\052\073\063\u0160\064" +
    "\074\065\057\066\066\067\067\070\055\001\001\000\002" +
    "\001\001\000\034\013\072\021\075\023\077\024\101\043" +
    "\064\044\102\052\073\063\u0162\064\074\065\057\066\066" +
    "\067\067\070\055\001\001\000\002\001\001\000\034\013" +
    "\072\021\075\023\077\024\101\043\064\044\102\052\073" +
    "\063\u0164\064\074\065\057\066\066\067\067\070\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\013\072" +
    "\021\075\023\077\024\101\043\064\044\102\052\073\063" +
    "\u0167\064\074\065\057\066\066\067\067\070\055\001\001" +
    "\000\002\001\001\000\034\013\072\021\075\023\077\024" +
    "\101\043\064\044\102\052\073\063\u0169\064\074\065\057" +
    "\066\066\067\067\070\055\001\001\000\002\001\001\000" +
    "\034\013\072\021\075\023\077\024\101\043\064\044\102" +
    "\052\073\063\u016b\064\074\065\057\066\066\067\067\070" +
    "\055\001\001\000\002\001\001\000\034\013\072\021\075" +
    "\023\077\024\101\043\064\044\102\052\073\063\u016d\064" +
    "\074\065\057\066\066\067\067\070\055\001\001\000\002" +
    "\001\001\000\034\013\072\021\075\023\077\024\101\043" +
    "\064\044\102\052\073\063\u016f\064\074\065\057\066\066" +
    "\067\067\070\055\001\001\000\002\001\001\000\034\013" +
    "\072\021\075\023\077\024\101\043\064\044\102\052\073" +
    "\063\u0171\064\074\065\057\066\066\067\067\070\055\001" +
    "\001\000\002\001\001\000\034\013\072\021\075\023\077" +
    "\024\101\043\064\044\102\052\073\063\u0173\064\074\065" +
    "\057\066\066\067\067\070\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u0177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\013\072" +
    "\021\075\023\077\024\101\043\064\044\102\052\073\063" +
    "\u017a\064\074\065\057\066\066\067\067\070\055\001\001" +
    "\000\002\001\001\000\034\013\072\021\075\023\077\024" +
    "\101\043\064\044\102\052\073\063\u017c\064\074\065\057" +
    "\066\066\067\067\070\055\001\001\000\002\001\001\000" +
    "\034\013\072\021\075\023\077\024\101\043\064\044\102" +
    "\052\073\063\u017e\064\074\065\057\066\066\067\067\070" +
    "\055\001\001\000\002\001\001\000\034\013\072\021\075" +
    "\023\077\024\101\043\064\044\102\052\073\063\u0180\064" +
    "\074\065\057\066\066\067\067\070\055\001\001\000\002" +
    "\001\001\000\034\013\072\021\075\023\077\024\101\043" +
    "\064\044\102\052\073\063\u0182\064\074\065\057\066\066" +
    "\067\067\070\055\001\001\000\002\001\001\000\034\013" +
    "\072\021\075\023\077\024\101\043\064\044\102\052\073" +
    "\063\u0184\064\074\065\057\066\066\067\067\070\055\001" +
    "\001\000\002\001\001\000\034\013\072\021\075\023\077" +
    "\024\101\043\064\044\102\052\073\063\u0186\064\074\065" +
    "\057\066\066\067\067\070\055\001\001\000\002\001\001" +
    "\000\034\013\072\021\075\023\077\024\101\043\064\044" +
    "\102\052\073\063\u0188\064\074\065\057\066\066\067\067" +
    "\070\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\013\072\021\075\023\077\024\101\043\064\044\102" +
    "\052\073\063\u018b\064\074\065\057\066\066\067\067\070" +
    "\055\001\001\000\002\001\001\000\034\013\072\021\075" +
    "\023\077\024\101\043\064\044\102\052\073\063\u018d\064" +
    "\074\065\057\066\066\067\067\070\055\001\001\000\002" +
    "\001\001\000\034\013\072\021\075\023\077\024\101\043" +
    "\064\044\102\052\073\063\u018f\064\074\065\057\066\066" +
    "\067\067\070\055\001\001\000\002\001\001\000\034\013" +
    "\072\021\075\023\077\024\101\043\064\044\102\052\073" +
    "\063\u0191\064\074\065\057\066\066\067\067\070\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\013\072\021\075\023\077\024\101\043\064\044" +
    "\102\052\073\063\u0195\064\074\065\057\066\066\067\067" +
    "\070\055\001\001\000\002\001\001\000\034\013\072\021" +
    "\075\023\077\024\101\043\064\044\102\052\073\063\u0197" +
    "\064\074\065\057\066\066\067\067\070\055\001\001\000" +
    "\002\001\001\000\034\013\072\021\075\023\077\024\101" +
    "\043\064\044\102\052\073\063\u0199\064\074\065\057\066" +
    "\066\067\067\070\055\001\001\000\002\001\001\000\034" +
    "\013\072\021\075\023\077\024\101\043\064\044\102\052" +
    "\073\063\u019b\064\074\065\057\066\066\067\067\070\055" +
    "\001\001\000\002\001\001\000\034\013\072\021\075\023" +
    "\077\024\101\043\064\044\102\052\073\063\u019d\064\074" +
    "\065\057\066\066\067\067\070\055\001\001\000\002\001" +
    "\001\000\034\013\072\021\075\023\077\024\101\043\064" +
    "\044\102\052\073\063\u019f\064\074\065\057\066\066\067" +
    "\067\070\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\013\072\021" +
    "\075\023\077\024\101\043\064\044\102\052\073\063\u01a4" +
    "\064\074\065\057\066\066\067\067\070\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\006\u01a7\007\351" +
    "\010\016\011\040\012\010\014\041\016\020\020\025\021" +
    "\030\022\047\023\005\024\022\043\007\044\011\045\004" +
    "\046\006\047\037\050\031\051\027\052\014\053\043\054" +
    "\044\055\032\057\035\001\001\000\060\007\354\010\016" +
    "\011\040\012\010\014\041\016\020\020\025\021\030\022" +
    "\047\023\005\024\022\043\007\044\011\045\004\046\006" +
    "\047\037\050\031\051\027\052\014\053\043\054\044\055" +
    "\032\057\035\001\001\000\006\015\u01a9\060\u01aa\001\001" +
    "\000\002\001\001\000\004\015\u01b6\001\001\000\002\001" +
    "\001\000\062\006\u01b4\007\351\010\016\011\040\012\010" +
    "\014\041\016\020\020\025\021\030\022\047\023\005\024" +
    "\022\043\007\044\011\045\004\046\006\047\037\050\031" +
    "\051\027\052\014\053\043\054\044\055\032\057\035\001" +
    "\001\000\002\001\001\000\034\013\072\021\075\023\077" +
    "\024\101\043\064\044\102\052\073\063\u01af\064\074\065" +
    "\057\066\066\067\067\070\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\006\u01b2\007\351\010\016\011" +
    "\040\012\010\014\041\016\020\020\025\021\030\022\047" +
    "\023\005\024\022\043\007\044\011\045\004\046\006\047" +
    "\037\050\031\051\027\052\014\053\043\054\044\055\032" +
    "\057\035\001\001\000\060\007\354\010\016\011\040\012" +
    "\010\014\041\016\020\020\025\021\030\022\047\023\005" +
    "\024\022\043\007\044\011\045\004\046\006\047\037\050" +
    "\031\051\027\052\014\053\043\054\044\055\032\057\035" +
    "\001\001\000\002\001\001\000\060\007\354\010\016\011" +
    "\040\012\010\014\041\016\020\020\025\021\030\022\047" +
    "\023\005\024\022\043\007\044\011\045\004\046\006\047" +
    "\037\050\031\051\027\052\014\053\043\054\044\055\032" +
    "\057\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\006\u01b9\007\351\010\016\011\040" +
    "\012\010\014\041\016\020\020\025\021\030\022\047\023" +
    "\005\024\022\043\007\044\011\045\004\046\006\047\037" +
    "\050\031\051\027\052\014\053\043\054\044\055\032\057" +
    "\035\001\001\000\060\007\354\010\016\011\040\012\010" +
    "\014\041\016\020\020\025\021\030\022\047\023\005\024" +
    "\022\043\007\044\011\045\004\046\006\047\037\050\031" +
    "\051\027\052\014\053\043\054\044\055\032\057\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\013\072\021" +
    "\075\023\077\024\101\043\064\044\102\052\073\063\u010c" +
    "\064\074\065\057\066\066\067\067\070\055\071\u01c0\072" +
    "\u0107\073\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_FS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_FS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_FS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

private ObjetoEntrada entrada;
private Nodo_AST_FS raiz;
private boolean importar;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

public void setRaiz(Nodo_AST_FS p_raiz)
{
    raiz = p_raiz;
}

public Nodo_AST_FS getRaiz()
{
    return raiz;
}

public void setImportar(boolean p_importar)
{
    importar = p_importar;
}

public boolean getImportar()
{
    return importar;
}

public void ejecutar_AST()
{
    if(raiz != null)
    {
        Grafica_AST_FS grafica = new Grafica_AST_FS(raiz);
        grafica.graficar_AST();
        AST_FS ejecutar = new AST_FS(raiz,entrada,importar);
        ejecutar.ejecutar_AST();
    }    
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s)
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico FuncionScript");
    error_encontrado.setDescripcion(s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);        
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico FuncionScript");
    error_encontrado.setDescripcion("Error del cual no es posible recuperarse: " + s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);  
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_FS$actions {
  private final Sintactico_FS parser;

  /** Constructor */
  CUP$Sintactico_FS$actions(Sintactico_FS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_FS$do_action_part00000000(
    int                        CUP$Sintactico_FS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_FS$parser,
    java.util.Stack            CUP$Sintactico_FS$stack,
    int                        CUP$Sintactico_FS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_FS$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_FS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS start_val = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_FS$parser.done_parsing();
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO_FS 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                raiz = new Nodo_AST_FS();
                raiz.setEtiqueta("AST");
                raiz.setValor("");
                raiz.setFila(String.valueOf(nright));
                raiz.setColumna(String.valueOf(nleft));
                raiz.getHijos().add(n);
                ejecutar_AST();
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO_FS ::= CUERPO_FS SENTENCIA_IMPORTAR 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n1;
                    RESULT.getHijos().add(n2);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("CUERPO_FS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO_FS ::= CUERPO_FS FUNCION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n1;
                    RESULT.getHijos().add(n2);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("CUERPO_FS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO_FS ::= CUERPO_FS SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n1;
                    RESULT.getHijos().add(n2);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("CUERPO_FS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_FS ::= SENTENCIA_IMPORTAR 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("CUERPO_FS");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("CUERPO_FS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_FS ::= FUNCION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("CUERPO_FS");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("CUERPO_FS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_FS ::= SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("CUERPO_FS");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("CUERPO_FS",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA_IMPORTAR ::= r_importar s_par_open cadena s_par_close s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_IMPORTAR");
                            RESULT.setValor(n2);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= r_funcion identificador s_par_open LISTA_PARAMETROS s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                RESULT = new Nodo_AST_FS();
                RESULT.setEtiqueta("FUNCION");
                RESULT.setValor(n1);
                RESULT.setFila(String.valueOf(nright));
                RESULT.setColumna(String.valueOf(nleft));
                RESULT.getHijos().add(n3);
                RESULT.getHijos().add(n2);
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= r_funcion identificador s_par_open s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                RESULT = new Nodo_AST_FS();
                RESULT.setEtiqueta("FUNCION");
                RESULT.setValor(n1);
                RESULT.setFila(String.valueOf(nright));
                RESULT.setColumna(String.valueOf(nleft));
                RESULT.getHijos().add(n2);
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = n1;
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_SENTENCIAS");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(n);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_DECLARACION s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_ASIGNACION s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA_IMPRIMIR s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA_SI 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA_SELECCIONA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA_DETENER s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA_LLAMADA s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA_RETORNAR s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA_LLAMADA_FUNCIONES_ARREGLO s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA_CREAR_VENTANA s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA_CREAR_CONTENEDOR s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA_CREAR_TEXTO s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA_CREAR_CAJA_TEXTO s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA_CREAR_AREA_TEXTO s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA_CREAR_CONTROL_NUMERICO s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA_CREAR_DESPLEGABLE s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA_CREAR_BOTON s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA_EVENTO_ALCLIC s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA_EVENTO_ALCARGAR s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA_EVENTO_ALCERRAR s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_DECLARACION ::= r_var LISTA_IDENTIFICADORES s_equal VALOR 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_DECLARACION ::= r_var LISTA_IDENTIFICADORES s_dotcoma 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_ASIGNACION ::= LISTA_IDENTIFICADORES s_equal VALOR 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_ASIGNACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_ASIGNACION ::= SENTENCIA_ACCESO s_equal VALOR 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_ASIGNACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                RESULT = new Nodo_AST_FS();
                RESULT.setEtiqueta("EXPRESION");
                RESULT.setValor("");
                RESULT.setFila(String.valueOf(nright));
                RESULT.setColumna(String.valueOf(nleft));
                RESULT.getHijos().add(n);
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("VALOR",55, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR ::= ARREGLO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                RESULT = n;
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("VALOR",55, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= OBJETO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                RESULT = n;
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("VALOR",55, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_IMPRIMIR ::= r_imprimir s_par_open EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_IMPRIMIR");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPRIMIR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_SELECCION ::= EXPRESION_RELACIONAL s_ternario EXPRESION s_dobledot EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_expresion_relacional = new Nodo_AST_FS();
                            nodo_expresion_relacional.setEtiqueta("EXPRESION_RELACIONAL");
                            nodo_expresion_relacional.setValor("");
                            nodo_expresion_relacional.setFila(String.valueOf(n1right));
                            nodo_expresion_relacional.setColumna(String.valueOf(n1left));
                            nodo_expresion_relacional.getHijos().add(n1);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_SELECCION");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(nodo_expresion_relacional);
                            RESULT.getHijos().add(n2);
                            RESULT.getHijos().add(n3);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close r_sino s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close LISTA_SENTENCIAS_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_SI ::= r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close LISTA_SENTENCIAS_SINO_SI r_sino s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n4 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                        RESULT.getHijos().add(n4);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_SELECCIONA ::= r_selecciona s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS_CASOS r_defecto s_dobledot s_key_open LISTA_SENTENCIAS s_key_close s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_SELECCIONA");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);
                          
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_SELECCIONA ::= r_selecciona s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS_CASOS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_SELECCIONA");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                          
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",12, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_CASO ::= r_caso EXPRESION s_dobledot s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_CASOS");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(nright));
                        RESULT.setColumna(String.valueOf(nleft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASO",13, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_SINO_SI ::= r_sino r_si s_par_open EXPRESION s_par_close s_key_open LISTA_SENTENCIAS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_SINO_SI");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(iright));
                            RESULT.setColumna(String.valueOf(ileft));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_DETENER ::= r_detener 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_DETENER");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DETENER",14, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_LLAMADA ::= identificador s_par_open LISTA_EXPRESIONES s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_LLAMADA");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n2);
                         
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_LLAMADA ::= identificador s_par_open s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_LLAMADA");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                         
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_RETORNAR ::= r_retornar EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_RETORNAR");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNAR",16, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_ACCESO ::= identificador s_dot identificador 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_id = new Nodo_AST_FS();
                            nodo_id.setEtiqueta("IDENTIFICADOR");
                            nodo_id.setValor(n2);
                            nodo_id.setFila(String.valueOf(n2right));
                            nodo_id.setColumna(String.valueOf(n2left));

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_ACCESO");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(nodo_id);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_ACCESO ::= identificador s_cor_open EXPRESION s_cor_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_ACCESO");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ACCESO",17, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_LLAMADA_FUNCIONES_ARREGLO ::= identificador LISTA_LLAMADAS_FUNCIONES_ARREGLO 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                                RESULT = new Nodo_AST_FS();
                                                RESULT.setEtiqueta("SENTENCIA_LLAMADA_FUNCIONES_ARREGLO");
                                                RESULT.setValor(n1);
                                                RESULT.setFila(String.valueOf(n1right));
                                                RESULT.setColumna(String.valueOf(n1left));
                                                RESULT.getHijos().add(n2); 
                                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA_FUNCIONES_ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_LLAMADAS_FUNCIONES_ARREGLO ::= LISTA_LLAMADAS_FUNCIONES_ARREGLO s_dot FUNCION_ARREGLO 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                            RESULT = n1;
                                            RESULT.getHijos().add(n2);
                                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADAS_FUNCIONES_ARREGLO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_LLAMADAS_FUNCIONES_ARREGLO ::= s_dot FUNCION_ARREGLO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                            RESULT = new Nodo_AST_FS();
                                            RESULT.setEtiqueta("LISTA_LLAMADAS_FUNCIONES_ARREGLO");
                                            RESULT.setValor("");
                                            RESULT.setFila(String.valueOf(nright));
                                            RESULT.setColumna(String.valueOf(nleft));
                                            RESULT.getHijos().add(n);                                                    
                                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADAS_FUNCIONES_ARREGLO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCION_ARREGLO ::= FUNCION_DESCENDENTE 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCION_ARREGLO ::= FUNCION_ASCENDENTE 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION_ARREGLO ::= FUNCION_CREAR_DESDE_ARCHIVO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION_ARREGLO ::= FUNCION_INVERTIR 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCION_ARREGLO ::= FUNCION_MAXIMO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCION_ARREGLO ::= FUNCION_MINIMO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCION_ARREGLO ::= FUNCION_FILTRAR 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCION_ARREGLO ::= FUNCION_BUSCAR 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCION_ARREGLO ::= FUNCION_MAP 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCION_ARREGLO ::= FUNCION_REDUCE 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCION_ARREGLO ::= FUNCION_TODOS 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n; 
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCION_ARREGLO ::= FUNCION_ALGUNO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n;
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCION_DESCENDENTE ::= r_descendente s_par_open s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_DESCENDENTE");
                            RESULT.setValor(n);
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_DESCENDENTE",21, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCION_ASCENDENTE ::= r_ascendente s_par_open s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_ASCENDENTE");
                            RESULT.setValor(n);
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ASCENDENTE",22, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCION_CREAR_DESDE_ARCHIVO ::= r_creararray s_par_open cadena s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("FUNCION_CREAR_DESDE_ARCHIVO");
                                    RESULT.setValor(n1);
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_CREAR_DESDE_ARCHIVO",23, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCION_INVERTIR ::= r_invertir s_par_open s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_INVERTIR");
                            RESULT.setValor(n);
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_INVERTIR",24, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCION_MAXIMO ::= r_maximo s_par_open s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_MAXIMO");
                            RESULT.setValor(n);
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_MAXIMO",25, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCION_MINIMO ::= r_minimo s_par_open s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_MINIMO");
                            RESULT.setValor(n);
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_MINIMO",26, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCION_FILTRAR ::= r_filtrar s_par_open identificador s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_FILTRAR");
                            RESULT.setValor(n2);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_FILTRAR",27, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCION_BUSCAR ::= r_buscar s_par_open identificador s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_BUSCAR");
                            RESULT.setValor(n2);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_BUSCAR",28, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCION_MAP ::= r_map s_par_open identificador s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_MAP");
                            RESULT.setValor(n2);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_MAP",29, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCION_REDUCE ::= r_reduce s_par_open identificador s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_REDUCE");
                            RESULT.setValor(n2);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_REDUCE",30, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCION_TODOS ::= r_todos s_par_open identificador s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_TODOS");
                            RESULT.setValor(n2);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_TODOS",31, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCION_ALGUNO ::= r_alguno s_par_open identificador s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("FUNCION_ALGUNO");
                            RESULT.setValor(n2);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("FUNCION_ALGUNO",32, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_CREAR_VENTANA ::= r_crearventana s_par_open cadena s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n4 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n5 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_CREAR_VENTANA");
                                RESULT.setValor(n2);
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n5);
                                RESULT.getHijos().add(n3);
                                RESULT.getHijos().add(n4);                                
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CREAR_VENTANA",33, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_CREAR_CONTENEDOR ::= identificador s_dot r_crearcontenedor s_par_open EXPRESION s_coma EXPRESION s_coma cadena s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n5 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n6 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n7 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                Nodo_AST_FS nodo_color = new Nodo_AST_FS();
                                nodo_color.setEtiqueta("COLOR");
                                nodo_color.setValor(n4);
                                nodo_color.setFila(String.valueOf(n4right));
                                nodo_color.setColumna(String.valueOf(n4left));
                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_CREAR_CONTENEDOR");
                                RESULT.setValor(n1);
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(nodo_color);
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);                                
                                RESULT.getHijos().add(n5);
                                RESULT.getHijos().add(n6);
                                RESULT.getHijos().add(n7);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CREAR_CONTENEDOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_CREAR_TEXTO ::= identificador s_dot r_creartexto s_par_open EXPRESION s_coma EXPRESION s_coma cadena s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n5 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		Nodo_AST_FS n6 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n7 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n8 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n9left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n9right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n9 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                            Nodo_AST_FS nodo_color = new Nodo_AST_FS();
                            nodo_color.setEtiqueta("COLOR");
                            nodo_color.setValor(n4);
                            nodo_color.setFila(String.valueOf(n4right));
                            nodo_color.setColumna(String.valueOf(n4left));
                            
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_CREAR_TEXTO");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(nodo_color);
                            RESULT.getHijos().add(n2);
                            RESULT.getHijos().add(n3);                                
                            RESULT.getHijos().add(n5);
                            RESULT.getHijos().add(n6);
                            RESULT.getHijos().add(n7);
                            RESULT.getHijos().add(n8);
                            RESULT.getHijos().add(n9);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CREAR_TEXTO",35, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_CREAR_CAJA_TEXTO ::= identificador s_dot r_crearcajatexto s_par_open EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma cadena s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-25)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-25)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-25)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-21)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-21)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-21)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).right;
		Nodo_AST_FS n4 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).right;
		Nodo_AST_FS n5 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		Nodo_AST_FS n7 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n8 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n9left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int n9right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		Nodo_AST_FS n9 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n10left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n10right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n10 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n11left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n11right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n11 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n12left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n12right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n12 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                Nodo_AST_FS nodo_color = new Nodo_AST_FS();
                                nodo_color.setEtiqueta("COLOR");
                                nodo_color.setValor(n6);
                                nodo_color.setFila(String.valueOf(n6right));
                                nodo_color.setColumna(String.valueOf(n6left));
                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_CREAR_CAJA_TEXTO");
                                RESULT.setValor(n1);
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(nodo_color);
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);                                
                                RESULT.getHijos().add(n4);
                                RESULT.getHijos().add(n5);
                                RESULT.getHijos().add(n7);
                                RESULT.getHijos().add(n8);
                                RESULT.getHijos().add(n9);
                                RESULT.getHijos().add(n10);
                                RESULT.getHijos().add(n11);
                                RESULT.getHijos().add(n12);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CREAR_CAJA_TEXTO",37, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-25)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_CREAR_AREA_TEXTO ::= identificador s_dot r_crearareatexto s_par_open EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma cadena s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-25)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-25)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-25)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-21)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-21)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-21)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).right;
		Nodo_AST_FS n4 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).right;
		Nodo_AST_FS n5 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		Nodo_AST_FS n7 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n8 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n9left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int n9right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		Nodo_AST_FS n9 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n10left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n10right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n10 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n11left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n11right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n11 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n12left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n12right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n12 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                Nodo_AST_FS nodo_color = new Nodo_AST_FS();
                                nodo_color.setEtiqueta("COLOR");
                                nodo_color.setValor(n6);
                                nodo_color.setFila(String.valueOf(n6right));
                                nodo_color.setColumna(String.valueOf(n6left));
                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_CREAR_AREA_TEXTO");
                                RESULT.setValor(n1);
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(nodo_color);
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);                                
                                RESULT.getHijos().add(n4);
                                RESULT.getHijos().add(n5);
                                RESULT.getHijos().add(n7);
                                RESULT.getHijos().add(n8);
                                RESULT.getHijos().add(n9);
                                RESULT.getHijos().add(n10);
                                RESULT.getHijos().add(n11);
                                RESULT.getHijos().add(n12);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CREAR_AREA_TEXTO",36, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-25)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_CREAR_CONTROL_NUMERICO ::= identificador s_dot r_crearcontrolnumerico s_par_open EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		Nodo_AST_FS n4 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n5 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		Nodo_AST_FS n6 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n7 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n8 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n9left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n9right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n9 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		                                            
                                            RESULT = new Nodo_AST_FS();
                                            RESULT.setEtiqueta("SENTENCIA_CREAR_CONTROL_NUMERICO");
                                            RESULT.setValor(n1);
                                            RESULT.setFila(String.valueOf(n1right));
                                            RESULT.setColumna(String.valueOf(n1left));
                                            RESULT.getHijos().add(n2);
                                            RESULT.getHijos().add(n3);
                                            RESULT.getHijos().add(n4);
                                            RESULT.getHijos().add(n5);
                                            RESULT.getHijos().add(n6);
                                            RESULT.getHijos().add(n7);
                                            RESULT.getHijos().add(n8);
                                            RESULT.getHijos().add(n9);
                                            
                                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CREAR_CONTROL_NUMERICO",38, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_CREAR_DESPLEGABLE ::= identificador s_dot r_creardesplegable s_par_open EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n4 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		Nodo_AST_FS n5 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n6 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n7 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n8 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		                                            
                                        RESULT = new Nodo_AST_FS();
                                        RESULT.setEtiqueta("SENTENCIA_CREAR_DESPLEGABLE");
                                        RESULT.setValor(n1);
                                        RESULT.setFila(String.valueOf(n1right));
                                        RESULT.setColumna(String.valueOf(n1left));
                                        RESULT.getHijos().add(n2);
                                        RESULT.getHijos().add(n3);
                                        RESULT.getHijos().add(n4);
                                        RESULT.getHijos().add(n5);
                                        RESULT.getHijos().add(n6);
                                        RESULT.getHijos().add(n7);
                                        RESULT.getHijos().add(n8);
                                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CREAR_DESPLEGABLE",39, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_CREAR_BOTON ::= identificador s_dot r_crearboton s_par_open EXPRESION s_coma EXPRESION s_coma cadena s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-21)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-21)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-21)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-17)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		Nodo_AST_FS n5 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n6 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		Nodo_AST_FS n7 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n8 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n9left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n9right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n9 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n10left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n10right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n10 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		  
                                Nodo_AST_FS nodo_color = new Nodo_AST_FS();
                                nodo_color.setEtiqueta("COLOR");
                                nodo_color.setValor(n4);
                                nodo_color.setFila(String.valueOf(n4right));
                                nodo_color.setColumna(String.valueOf(n4left));                              
                                RESULT = new Nodo_AST_FS();

                                RESULT.setEtiqueta("SENTENCIA_CREAR_BOTON");
                                RESULT.setValor(n1);
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(nodo_color);
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);                                
                                RESULT.getHijos().add(n5);
                                RESULT.getHijos().add(n6);
                                RESULT.getHijos().add(n7);
                                RESULT.getHijos().add(n8);
                                RESULT.getHijos().add(n9);
                                RESULT.getHijos().add(n10);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CREAR_BOTON",40, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-21)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_CREAR_BOTON ::= identificador s_dot r_crearboton s_par_open EXPRESION s_coma EXPRESION s_coma cadena s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_coma EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-15)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).right;
		Nodo_AST_FS n3 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-13)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-11)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).right;
		Nodo_AST_FS n5 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-9)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).right;
		Nodo_AST_FS n6 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-7)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		Nodo_AST_FS n7 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n8 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n9left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n9right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n9 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                Nodo_AST_FS nodo_color = new Nodo_AST_FS();
                                nodo_color.setEtiqueta("COLOR");
                                nodo_color.setValor(n4);
                                nodo_color.setFila(String.valueOf(n4right));
                                nodo_color.setColumna(String.valueOf(n4left));
                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_CREAR_BOTON");
                                RESULT.setValor(n1);
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(nodo_color);
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);                                                                
                                RESULT.getHijos().add(n5);
                                RESULT.getHijos().add(n6);
                                RESULT.getHijos().add(n7);
                                RESULT.getHijos().add(n8);
                                RESULT.getHijos().add(n9);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CREAR_BOTON",40, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-19)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_EVENTO_ALCLIC ::= identificador s_dot r_clic s_par_open SENTENCIA_LLAMADA s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_EVENTO_ALCLIC");
                                RESULT.setValor(n1);
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EVENTO_ALCLIC",41, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_EVENTO_ALCARGAR ::= identificador s_dot r_cargar s_par_open s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("SENTENCIA_EVENTO_ALCARGAR");
                                    RESULT.setValor(n);
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EVENTO_ALCARGAR",42, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_EVENTO_ALCARGAR ::= identificador s_dot r_cargar s_par_open SENTENCIA_LLAMADA s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("SENTENCIA_EVENTO_ALCARGAR");
                                    RESULT.setValor(n1);
                                    RESULT.setFila(String.valueOf(n1right));
                                    RESULT.setColumna(String.valueOf(n1left));
                                    RESULT.getHijos().add(n2);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EVENTO_ALCARGAR",42, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_EVENTO_ALCERRAR ::= identificador s_dot r_cerrar s_par_open s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("SENTENCIA_EVENTO_ALCERRAR");
                                    RESULT.setValor(n);
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EVENTO_ALCERRAR",43, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_EVENTO_ALCERRAR ::= identificador s_dot r_cerrar s_par_open SENTENCIA_LLAMADA s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("SENTENCIA_EVENTO_ALCERRAR");
                                    RESULT.setValor(n1);
                                    RESULT.setFila(String.valueOf(n1right));
                                    RESULT.setColumna(String.valueOf(n1left));
                                    RESULT.getHijos().add(n2);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EVENTO_ALCERRAR",43, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTA_PARAMETROS ::= LISTA_PARAMETROS s_coma r_var identificador 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                            nodo_identificador.setEtiqueta("IDENTIFICADOR");
                            nodo_identificador.setValor(n2);
                            nodo_identificador.setFila(String.valueOf(n2right));
                            nodo_identificador.setColumna(String.valueOf(n2left));

                            n1.getHijos().add(nodo_identificador);
                            RESULT = n1;
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",44, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTA_PARAMETROS ::= r_var identificador 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                            nodo_identificador.setEtiqueta("IDENTIFICADOR");
                            nodo_identificador.setValor(n);
                            nodo_identificador.setFila(String.valueOf(nright));
                            nodo_identificador.setColumna(String.valueOf(nleft));

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_PARAMETROS");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_identificador);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",44, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES s_coma identificador 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n2);
                                nodo_identificador.setFila(String.valueOf(n2right));
                                nodo_identificador.setColumna(String.valueOf(n2left));

                                n1.getHijos().add(nodo_identificador);
                                RESULT = n1;
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",45, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LISTA_IDENTIFICADORES ::= identificador 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n);
                                nodo_identificador.setFila(String.valueOf(nright));
                                nodo_identificador.setColumna(String.valueOf(nleft));

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("LISTA_IDENTIFICADORES");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(nodo_identificador);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",45, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LISTA_SENTENCIAS_SINO_SI ::= LISTA_SENTENCIAS_SINO_SI SENTENCIA_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = n1;
                                    RESULT.getHijos().add(n2);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_SINO_SI",46, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LISTA_SENTENCIAS_SINO_SI ::= SENTENCIA_SINO_SI 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("LISTA_SENTENCIA_SINO_SI");
                                    RESULT.setValor("");
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                    RESULT.getHijos().add(n);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_SINO_SI",46, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LISTA_SENTENCIAS_CASOS ::= LISTA_SENTENCIAS_CASOS SENTENCIA_CASO 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = n1;
                                    RESULT.getHijos().add(n2);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_CASOS",47, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LISTA_SENTENCIAS_CASOS ::= SENTENCIA_CASO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("LISTA_SENTENCIA_CASOS");
                                    RESULT.setValor("");
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                    RESULT.getHijos().add(n);
                                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS_CASOS",47, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES s_coma EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = n1;
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",48, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(nright));
                            nodo_expresion.setColumna(String.valueOf(nleft));
                            nodo_expresion.getHijos().add(n);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_EXPRESIONES");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",48, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= EXPRESION_ARITMETICA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_ARITMETICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= EXPRESION_RELACIONAL 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_RELACIONAL");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= EXPRESION_UNARIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_UNARIA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= EXPRESION_LOGICA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_LOGICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= s_par_open EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= DATO_PRIMITIVO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= SENTENCIA_SELECCION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= SENTENCIA_LLAMADA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= SENTENCIA_ACCESO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= SENTENCIA_LLAMADA_FUNCIONES_ARREGLO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= SENTENCIA_CREAR_VENTANA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= SENTENCIA_CREAR_CONTENEDOR 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= SENTENCIA_CREAR_BOTON 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION_ARITMETICA ::= EXPRESION s_plus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",50, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION_ARITMETICA ::= EXPRESION s_minus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",50, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION_ARITMETICA ::= EXPRESION s_mul EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",50, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION_ARITMETICA ::= EXPRESION s_div EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",50, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION_ARITMETICA ::= EXPRESION s_mod EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",50, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION_ARITMETICA ::= EXPRESION s_to EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",50, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION_ARITMETICA ::= EXPRESION s_increment 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",50, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION_ARITMETICA ::= EXPRESION s_decrement 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",50, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION_UNARIA ::= s_minus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",51, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION_UNARIA ::= s_plus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",51, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION_LOGICA ::= EXPRESION s_or EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",52, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION_LOGICA ::= EXPRESION s_and EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",52, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION_LOGICA ::= s_not EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",52, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION_RELACIONAL ::= EXPRESION s_greather EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION_RELACIONAL ::= EXPRESION s_less EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION_RELACIONAL ::= EXPRESION s_greather_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION_RELACIONAL ::= EXPRESION s_less_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION_RELACIONAL ::= EXPRESION s_compare EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION_RELACIONAL ::= EXPRESION s_diferent EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DATO_PRIMITIVO ::= r_nulo 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.nulo.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DATO_PRIMITIVO ::= booleano 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.booleano.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DATO_PRIMITIVO ::= entero 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.entero.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DATO_PRIMITIVO ::= decimal 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.decimal.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DATO_PRIMITIVO ::= caracter 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.caracter.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft)); 
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DATO_PRIMITIVO ::= cadena 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.cadena.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DATO_PRIMITIVO ::= identificador 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.identificador.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ARREGLO ::= s_cor_open LISTA_EXPRESIONES s_cor_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                RESULT = new Nodo_AST_FS();
                RESULT.setEtiqueta("ARREGLO");
                RESULT.setValor("");
                RESULT.setFila(String.valueOf(nright));
                RESULT.setColumna(String.valueOf(nleft));
                RESULT.getHijos().add(n);
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("ARREGLO",56, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OBJETO ::= s_key_open LISTA_ATRIBUTOS s_key_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-1)).value;
		
                RESULT = new Nodo_AST_FS();
                RESULT.setEtiqueta("OBJETO");
                RESULT.setValor("");
                RESULT.setFila(String.valueOf(nright));
                RESULT.setColumna(String.valueOf(nleft));
                RESULT.getHijos().add(n);
            
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("OBJETO",57, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LISTA_ATRIBUTOS ::= LISTA_ATRIBUTOS s_coma ATRIBUTO 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = n1;
                        RESULT.getHijos().add(n2);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_ATRIBUTOS",58, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LISTA_ATRIBUTOS ::= ATRIBUTO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("LISTA_ATRIBUTOS");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(nright));
                        RESULT.setColumna(String.valueOf(nleft));
                        RESULT.getHijos().add(n);
                    
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("LISTA_ATRIBUTOS",58, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ATRIBUTO ::= identificador s_dobledot EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_FS$stack.peek()).value;
		
                    Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                    nodo_expresion.setEtiqueta("EXPRESION");
                    nodo_expresion.setValor("");
                    nodo_expresion.setFila(String.valueOf(n2right));
                    nodo_expresion.setColumna(String.valueOf(n2left));
                    nodo_expresion.getHijos().add(n2);

                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("ATRIBUTO");
                    RESULT.setValor(n1);
                    RESULT.setFila(String.valueOf(n1right));
                    RESULT.setColumna(String.valueOf(n1left));
                    RESULT.getHijos().add(nodo_expresion);
                
              CUP$Sintactico_FS$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",59, ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.elementAt(CUP$Sintactico_FS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_FS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_FS$do_action(
    int                        CUP$Sintactico_FS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_FS$parser,
    java.util.Stack            CUP$Sintactico_FS$stack,
    int                        CUP$Sintactico_FS$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_FS$do_action_part00000000(
                               CUP$Sintactico_FS$act_num,
                               CUP$Sintactico_FS$parser,
                               CUP$Sintactico_FS$stack,
                               CUP$Sintactico_FS$top);
    }
}

}
