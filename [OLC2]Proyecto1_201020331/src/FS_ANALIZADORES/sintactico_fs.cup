package FS_ANALIZADORES;

import java.io.File;
import java_cup.runtime.*; 

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import java.util.ArrayList;
import javax.swing.JOptionPane;

import FS_TABLA_SIMBOLOS.Tabla_Enums;

import FS_AST.*;

import UI.ObjetoEntrada;

parser code 
{: 

private ObjetoEntrada entrada;
private Nodo_AST_FS raiz;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

public void setRaiz(Nodo_AST_FS p_raiz)
{
    raiz = p_raiz;
}

public Nodo_AST_FS getRaiz()
{
    return raiz;
}

public void ejecutar_AST()
{
    if(raiz != null)
    {
        Grafica_AST_FS grafica = new Grafica_AST_FS(raiz);
        grafica.graficar_AST();
        AST_FS ejecutar = new AST_FS(raiz,entrada);
        ejecutar.ejecutar_AST();
    }    
}


:}

//expresiones usadas en el lenguaje
terminal String booleano;
terminal String entero;
terminal String decimal;
terminal String caracter;
terminal String cadena;
terminal String identificador;

//simbolos utilizados en el lenguaje
terminal String s_key_open;
terminal String s_key_close;
terminal String s_ternario;
terminal String s_dobledot;
terminal String s_dot;
terminal String s_coma;
terminal String s_dotcoma;
 
//simbolos para expresiones
terminal String s_par_open; 
terminal String s_par_close; 
terminal String s_plus;
terminal String s_minus;
terminal String s_mul;
terminal String s_div;
terminal String s_to;
terminal String s_mod;
terminal String s_increment; 
terminal String s_decrement;
terminal String s_compare;
terminal String s_diferent;
terminal String s_less;
terminal String s_greather;
terminal String s_less_equal;
terminal String s_greather_equal;
terminal String s_or; 
terminal String s_and;
terminal String s_not;
terminal String s_equal;

//palabras reservadas
terminal String r_nulo;
terminal String r_var;
terminal String r_imprimir;
terminal String r_importar;
terminal String r_detener;
terminal String r_retornar;
terminal String r_si;
terminal String r_sino;
terminal String r_selecciona;
terminal String r_caso;
terminal String r_defecto;
terminal String r_funcion;

//funciones nativas de arreglos
terminal String r_descendente;
terminal String r_ascendente;
terminal String r_invertir;
terminal String r_maximo;
terminal String r_minimo;
terminal String r_filtrar;
terminal String r_buscar;
terminal String r_map;
terminal String r_reduce;
terminal String r_todos;
terminal String r_alguno;
terminal String r_creararray;

//funciones nativas interfaz
terminal String r_leergxml;
terminal String r_obteneretiqueta;
terminal String r_obtenerid;
terminal String r_obtenernombre;
terminal String r_crearventana;
terminal String r_crearcontenedor;
terminal String r_creartexto;
terminal String r_crearcajatexto;
terminal String r_crearareatexto;
terminal String r_crearcontrolnumerico;
terminal String r_creardesplegable;
terminal String r_crearboton;
terminal String r_crearimagen;
terminal String r_crearreproductor;
terminal String r_crearvideo;

//eventos
terminal String r_clic;
terminal String r_cargar;
terminal String r_cerrar;

//NO TERMINALES
non terminal Nodo_AST_FS INICIO;

non terminal Nodo_AST_FS LISTA_SENTENCIAS;
non terminal Nodo_AST_FS SENTENCIA;
non terminal Nodo_AST_FS SENTENCIA_ASIGNACION;
non terminal Nodo_AST_FS SENTENCIA_DECLARACION;
non terminal Nodo_AST_FS SENTENCIA_IMPRIMIR;

non terminal Nodo_AST_FS LISTA_IDENTIFICADORES;

non terminal Nodo_AST_FS EXPRESION;
non terminal Nodo_AST_FS EXPRESION_ARITMETICA;
non terminal Nodo_AST_FS EXPRESION_UNARIA;
non terminal Nodo_AST_FS EXPRESION_LOGICA;
non terminal Nodo_AST_FS EXPRESION_RELACIONAL;
non terminal Nodo_AST_FS DATO_PRIMITIVO;

precedence	right 		s_equal;
precedence	left 		s_or;
precedence 	left 		s_and; 
precedence  left        s_compare, s_diferent;
precedence  left        s_greather, s_greather_equal, s_less, s_less_equal;
precedence  left        s_plus, s_minus;
precedence  left        s_mul, s_div;
precedence  left        s_mod, s_to;
precedence  right       s_not; 
precedence  right       s_dot; 
precedence  right       s_increment, s_decrement;

start with INICIO;

INICIO ::=  LISTA_SENTENCIAS:n
            {:
                raiz = new Nodo_AST_FS();
                raiz.setEtiqueta("AST");
                raiz.setValor("");
                raiz.setFila(String.valueOf(nright));
                raiz.setColumna(String.valueOf(nleft));
                raiz.getHijos().add(n);
                ejecutar_AST();
            :};

LISTA_SENTENCIAS ::=    LISTA_SENTENCIAS:n1 SENTENCIA:n2
                        {:
                            RESULT = n1;
                            RESULT.getHijos().add(n2);
                        :}
                        | SENTENCIA:n
                        {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_SENTENCIAS");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(n);
                        :};

SENTENCIA   ::=     SENTENCIA_DECLARACION:n 
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_ASIGNACION:n
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_IMPRIMIR:n
                    {:
                        RESULT = n;
                    :};


/*******************************************INSTRUCCCIONES****************************************************************************/

//DECLACION
SENTENCIA_DECLARACION ::=   r_var:n1 LISTA_IDENTIFICADORES:n2 s_equal EXPRESION:n3 s_dotcoma
                            {:
                                Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                                nodo_expresion.setEtiqueta("EXPRESION");
                                nodo_expresion.setValor("");
                                nodo_expresion.setFila(String.valueOf(n3right));
                                nodo_expresion.setColumna(String.valueOf(n3left));
                                nodo_expresion.getHijos().add(n3);
                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(nodo_expresion);
                            :}
                            |r_var:n1 LISTA_IDENTIFICADORES:n2 s_dotcoma
                            {:
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                            :};
//ASIGNACION
SENTENCIA_ASIGNACION ::=    LISTA_IDENTIFICADORES:n1 s_equal EXPRESION:n2 s_dotcoma
                            {:
                                Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                                nodo_expresion.setEtiqueta("EXPRESION");
                                nodo_expresion.setValor("");
                                nodo_expresion.setFila(String.valueOf(n2right));
                                nodo_expresion.setColumna(String.valueOf(n2left));
                                nodo_expresion.getHijos().add(n2);

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_ASIGNACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(nodo_expresion);
                            :};

SENTENCIA_IMPRIMIR ::=  r_imprimir:n s_par_open EXPRESION:n2 s_par_close s_dotcoma
                        {:
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_IMPRIMIR");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        :};

//PRODUCCIONES AUXILIARES
LISTA_IDENTIFICADORES ::=   LISTA_IDENTIFICADORES:n1 s_coma identificador:n2
                            {:
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n2);
                                nodo_identificador.setFila(String.valueOf(n2right));
                                nodo_identificador.setColumna(String.valueOf(n2left));

                                n1.getHijos().add(nodo_identificador);
                                RESULT = n1;
                            :}
                            |identificador:n
                            {:
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n);
                                nodo_identificador.setFila(String.valueOf(nright));
                                nodo_identificador.setColumna(String.valueOf(nleft));

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("LISTA_IDENTIFICADORES");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(nodo_identificador);
                            :};

/*******************************************EXPRESIONES*******************************************************************************/

EXPRESION ::=    EXPRESION_ARITMETICA:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_ARITMETICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |EXPRESION_RELACIONAL:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_RELACIONAL");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |EXPRESION_UNARIA:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_UNARIA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |EXPRESION_LOGICA:n  
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_LOGICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :} 
                |s_par_open  EXPRESION:n  s_par_close
                {:
                    RESULT = n;
                :}
                |DATO_PRIMITIVO:n 
                {:
                    RESULT = n;
                :};



EXPRESION_ARITMETICA ::=    EXPRESION:n1 s_plus:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_minus:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_mul:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_div:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_mod:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_to:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_increment:o
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            :}
                            |EXPRESION:n1 s_decrement:o
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            :};

EXPRESION_UNARIA ::=    s_minus:o EXPRESION:n1
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        :}
                        |s_plus:o EXPRESION:n1
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        :};

EXPRESION_LOGICA ::=    EXPRESION:n1 s_or:o EXPRESION:n2
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        :}
                        |EXPRESION:n1 s_and:o EXPRESION:n2
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        :}
                        |s_not:o EXPRESION:n1
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        :};

EXPRESION_RELACIONAL ::=    EXPRESION:n1 s_greather:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_less:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_greather_equal:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_less_equal:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_compare:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_diferent:o EXPRESION:n2   
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :};                     
  
DATO_PRIMITIVO ::=  r_nulo:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.nulo.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |booleano:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.booleano.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |entero:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.entero.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |decimal:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.decimal.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |caracter:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.caracter.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft)); 
                    :}
                    |cadena:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.cadena.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |identificador:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.identificador.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :};