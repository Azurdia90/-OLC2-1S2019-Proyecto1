package FS_ANALIZADORES;

import java.io.File;
import java_cup.runtime.*; 

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import java.util.ArrayList;
import javax.swing.JOptionPane;

import FS_TABLA_SIMBOLOS.Tabla_Enums;

import FS_AST.*;

import UI.ObjetoEntrada;

parser code 
{: 

private ObjetoEntrada entrada;
private Nodo_AST_FS raiz;
private boolean importar;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

public void setRaiz(Nodo_AST_FS p_raiz)
{
    raiz = p_raiz;
}

public Nodo_AST_FS getRaiz()
{
    return raiz;
}

public void setImportar(boolean p_importar)
{
    importar = p_importar;
}

public boolean getImportar()
{
    return importar;
}

public void ejecutar_AST()
{
    if(raiz != null)
    {
        Grafica_AST_FS grafica = new Grafica_AST_FS(raiz);
        grafica.graficar_AST();
        AST_FS ejecutar = new AST_FS(raiz,entrada,importar);
        ejecutar.ejecutar_AST();
    }    
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s)
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico FuncionScript");
    error_encontrado.setDescripcion(s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);        
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico FuncionScript");
    error_encontrado.setDescripcion("Error del cual no es posible recuperarse: " + s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);  
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 

:}

//expresiones usadas en el lenguaje
terminal String booleano;
terminal String entero;
terminal String decimal;
terminal String caracter;
terminal String cadena;
terminal String identificador;

//simbolos utilizados en el lenguaje
terminal String s_key_open;
terminal String s_key_close;
terminal String s_ternario;
terminal String s_dobledot;
terminal String s_dot;
terminal String s_coma;
terminal String s_dotcoma;
 
//simbolos para expresiones
terminal String s_par_open; 
terminal String s_par_close; 
terminal String s_plus;
terminal String s_minus;
terminal String s_mul;
terminal String s_div;
terminal String s_to;
terminal String s_mod;
terminal String s_increment; 
terminal String s_decrement;
terminal String s_compare;
terminal String s_diferent;
terminal String s_less;
terminal String s_greather;
terminal String s_less_equal;
terminal String s_greather_equal;
terminal String s_or; 
terminal String s_and;
terminal String s_not;
terminal String s_equal;

//palabras reservadas
terminal String r_nulo;
terminal String r_var;
terminal String r_imprimir;
terminal String r_importar;
terminal String r_detener;
terminal String r_retornar;
terminal String r_si;
terminal String r_sino;
terminal String r_selecciona;
terminal String r_caso;
terminal String r_defecto;
terminal String r_funcion;

//funciones nativas de arreglos
terminal String r_descendente;
terminal String r_ascendente;
terminal String r_invertir;
terminal String r_maximo;
terminal String r_minimo;
terminal String r_filtrar;
terminal String r_buscar;
terminal String r_map;
terminal String r_reduce;
terminal String r_todos;
terminal String r_alguno;
terminal String r_creararray;

//funciones nativas interfaz
terminal String r_leergxml;
terminal String r_obteneretiqueta;
terminal String r_obtenerid;
terminal String r_obtenernombre;
terminal String r_crearventana;
terminal String r_crearcontenedor;
terminal String r_creartexto;
terminal String r_crearcajatexto;
terminal String r_crearareatexto;
terminal String r_crearcontrolnumerico;
terminal String r_creardesplegable;
terminal String r_crearboton;
terminal String r_crearimagen;
terminal String r_crearreproductor;
terminal String r_crearvideo;

//eventos
terminal String r_clic;
terminal String r_cargar;
terminal String r_cerrar;

//NO TERMINALES
non terminal Nodo_AST_FS INICIO;
non terminal Nodo_AST_FS CUERPO_FS;

non terminal Nodo_AST_FS SENTENCIA_IMPORTAR;

non terminal Nodo_AST_FS FUNCION;

non terminal Nodo_AST_FS LISTA_SENTENCIAS;
non terminal Nodo_AST_FS SENTENCIA;
non terminal Nodo_AST_FS SENTENCIA_ASIGNACION;
non terminal Nodo_AST_FS SENTENCIA_DECLARACION;
non terminal Nodo_AST_FS SENTENCIA_IMPRIMIR;
non terminal Nodo_AST_FS SENTENCIA_SELECCION;
non terminal Nodo_AST_FS SENTENCIA_SI;
non terminal Nodo_AST_FS SENTENCIA_SINO_SI;
non terminal Nodo_AST_FS SENTENCIA_SELECCIONA;
non terminal Nodo_AST_FS SENTENCIA_CASO;
non terminal Nodo_AST_FS SENTENCIA_DETENER;
non terminal Nodo_AST_FS SENTENCIA_LLAMADA;
non terminal Nodo_AST_FS SENTENCIA_RETORNAR;
non terminal Nodo_AST_FS SENTENCIA_ACCESO;
non terminal Nodo_AST_FS SENTENCIA_CREAR_VENTANA;
non terminal Nodo_AST_FS SENTENCIA_CREAR_CONTENEDOR;
non terminal Nodo_AST_FS SENTENCIA_EVENTO_ALCARGAR;
non terminal Nodo_AST_FS SENTENCIA_EVENTO_ALCERRAR;

non terminal Nodo_AST_FS LISTA_PARAMETROS;
non terminal Nodo_AST_FS LISTA_IDENTIFICADORES;
non terminal Nodo_AST_FS LISTA_SENTENCIAS_SINO_SI;
non terminal Nodo_AST_FS LISTA_SENTENCIAS_CASOS;

non terminal Nodo_AST_FS LISTA_EXPRESIONES;
non terminal Nodo_AST_FS EXPRESION;
non terminal Nodo_AST_FS EXPRESION_ARITMETICA;
non terminal Nodo_AST_FS EXPRESION_UNARIA;
non terminal Nodo_AST_FS EXPRESION_LOGICA;
non terminal Nodo_AST_FS EXPRESION_RELACIONAL;
non terminal Nodo_AST_FS DATO_PRIMITIVO;

precedence	right 		s_equal;
precedence  right  		identificador;
precedence  right       s_ternario;

precedence	left 		s_or;
precedence 	left 		s_and; 
precedence  left        s_compare, s_diferent;
precedence  left        s_greather, s_greather_equal, s_less, s_less_equal;
precedence  left        s_plus, s_minus;
precedence  left        s_mul, s_div;
precedence  left        s_mod, s_to;

precedence  right       s_not; 
precedence  right       s_dot; 
precedence  right       s_increment, s_decrement;

start with INICIO;

INICIO ::=  CUERPO_FS:n
            {:
                raiz = new Nodo_AST_FS();
                raiz.setEtiqueta("AST");
                raiz.setValor("");
                raiz.setFila(String.valueOf(nright));
                raiz.setColumna(String.valueOf(nleft));
                raiz.getHijos().add(n);
                ejecutar_AST();
            :};

CUERPO_FS ::=   CUERPO_FS:n1 SENTENCIA_IMPORTAR:n2
                {:
                    RESULT = n1;
                    RESULT.getHijos().add(n2);
                :}
                |CUERPO_FS:n1 FUNCION:n2
                {:
                    RESULT = n1;
                    RESULT.getHijos().add(n2);
                :}
                |CUERPO_FS:n1 SENTENCIA:n2
                {:
                    RESULT = n1;
                    RESULT.getHijos().add(n2);
                :}
                |SENTENCIA_IMPORTAR:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("CUERPO_FS");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |FUNCION:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("CUERPO_FS");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |SENTENCIA:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("CUERPO_FS");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}; 


SENTENCIA_IMPORTAR ::=  r_importar:n1 s_par_open cadena:n2 s_par_close s_dotcoma
                        {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_IMPORTAR");
                            RESULT.setValor(n2);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                        :};

FUNCION ::= r_funcion:n identificador:n1 s_par_open LISTA_PARAMETROS:n2 s_par_close s_key_open LISTA_SENTENCIAS:n3 s_key_close
            {:
                RESULT = new Nodo_AST_FS();
                RESULT.setEtiqueta("FUNCION");
                RESULT.setValor(n1);
                RESULT.setFila(String.valueOf(nright));
                RESULT.setColumna(String.valueOf(nleft));
                RESULT.getHijos().add(n3);
                RESULT.getHijos().add(n2);
            :}
            |r_funcion:n identificador:n1 s_par_open s_par_close s_key_open LISTA_SENTENCIAS:n2 s_key_close
            {:
                RESULT = new Nodo_AST_FS();
                RESULT.setEtiqueta("FUNCION");
                RESULT.setValor(n1);
                RESULT.setFila(String.valueOf(nright));
                RESULT.setColumna(String.valueOf(nleft));
                RESULT.getHijos().add(n2);
            :};

LISTA_SENTENCIAS ::=    LISTA_SENTENCIAS:n1 SENTENCIA:n2
                        {:
                            RESULT = n1;
                            RESULT.getHijos().add(n2);
                        :}
                        | SENTENCIA:n
                        {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_SENTENCIAS");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(n);
                        :};

SENTENCIA   ::=     SENTENCIA_DECLARACION:n s_dotcoma
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_ASIGNACION:n s_dotcoma
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_IMPRIMIR:n s_dotcoma
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_SI:n
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_SELECCIONA:n
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_DETENER:n s_dotcoma
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_LLAMADA:n s_dotcoma
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_RETORNAR:n s_dotcoma
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_CREAR_VENTANA:n s_dotcoma
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_CREAR_CONTENEDOR:n s_dotcoma
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_EVENTO_ALCARGAR:n s_dotcoma
                    {:
                        RESULT = n;
                    :}
                    |SENTENCIA_EVENTO_ALCERRAR:n s_dotcoma
                    {:
                        RESULT = n;
                    :};


/*******************************************INSTRUCCCIONES****************************************************************************/

//DECLACION
SENTENCIA_DECLARACION ::=   r_var:n1 LISTA_IDENTIFICADORES:n2 s_equal EXPRESION:n3 
                            {:
                                Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                                nodo_expresion.setEtiqueta("EXPRESION");
                                nodo_expresion.setValor("");
                                nodo_expresion.setFila(String.valueOf(n3right));
                                nodo_expresion.setColumna(String.valueOf(n3left));
                                nodo_expresion.getHijos().add(n3);
                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(nodo_expresion);
                            :}
                            |r_var:n1 LISTA_IDENTIFICADORES:n2 s_dotcoma
                            {:
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_DECLARACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n2);
                            :};
//ASIGNACION
SENTENCIA_ASIGNACION ::=    LISTA_IDENTIFICADORES:n1 s_equal EXPRESION:n2 
                            {:
                                Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                                nodo_expresion.setEtiqueta("EXPRESION");
                                nodo_expresion.setValor("");
                                nodo_expresion.setFila(String.valueOf(n2right));
                                nodo_expresion.setColumna(String.valueOf(n2left));
                                nodo_expresion.getHijos().add(n2);

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_ASIGNACION");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(nodo_expresion);
                            :};

SENTENCIA_IMPRIMIR ::=  r_imprimir:n s_par_open EXPRESION:n2 s_par_close 
                        {:
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_IMPRIMIR");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        :};

SENTENCIA_SELECCION  ::= EXPRESION_RELACIONAL:n1 s_ternario EXPRESION:n2 s_dobledot EXPRESION:n3
                        {:
                            Nodo_AST_FS nodo_expresion_relacional = new Nodo_AST_FS();
                            nodo_expresion_relacional.setEtiqueta("EXPRESION_RELACIONAL");
                            nodo_expresion_relacional.setValor("");
                            nodo_expresion_relacional.setFila(String.valueOf(n1right));
                            nodo_expresion_relacional.setColumna(String.valueOf(n1left));
                            nodo_expresion_relacional.getHijos().add(n1);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_SELECCION");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(nodo_expresion_relacional);
                            RESULT.getHijos().add(n2);
                            RESULT.getHijos().add(n3);
                        :};                        

SENTENCIA_SI ::=    r_si:i s_par_open EXPRESION:n1 s_par_close s_key_open LISTA_SENTENCIAS:n2 s_key_close
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                    :}
                    |r_si:i s_par_open EXPRESION:n1 s_par_close s_key_open LISTA_SENTENCIAS:n2 s_key_close r_sino s_key_open LISTA_SENTENCIAS:n3 s_key_close
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                    :}
                    |r_si:i s_par_open EXPRESION:n1 s_par_close s_key_open LISTA_SENTENCIAS:n2 s_key_close LISTA_SENTENCIAS_SINO_SI:n3 
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                    :}
                    |r_si:i s_par_open EXPRESION:n1 s_par_close s_key_open LISTA_SENTENCIAS:n2 s_key_close LISTA_SENTENCIAS_SINO_SI:n3 r_sino s_key_open LISTA_SENTENCIAS:n4 s_key_close
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_SI");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(iright));
                        RESULT.setColumna(String.valueOf(ileft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                        RESULT.getHijos().add(n3);
                        RESULT.getHijos().add(n4);
                    :}; 

SENTENCIA_SELECCIONA ::=  r_selecciona:n s_par_open EXPRESION:n1 s_par_close s_key_open LISTA_SENTENCIAS_CASOS:n2  r_defecto s_dobledot  s_key_open LISTA_SENTENCIAS:n3 s_key_close s_key_close
                          {:
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_SELECCIONA");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);
                          :}
                          |r_selecciona:n s_par_open EXPRESION:n1 s_par_close s_key_open LISTA_SENTENCIAS_CASOS:n2 s_key_close
                          {:
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_SELECCIONA");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                          :};

SENTENCIA_CASO  ::= r_caso:n EXPRESION:n1 s_dobledot s_key_open LISTA_SENTENCIAS:n2 s_key_close 
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta("SENTENCIA_CASOS");
                        RESULT.setValor("");
                        RESULT.setFila(String.valueOf(nright));
                        RESULT.setColumna(String.valueOf(nleft));
                        RESULT.getHijos().add(n1);
                        RESULT.getHijos().add(n2);
                    :};                          

SENTENCIA_SINO_SI ::=   r_sino r_si:i s_par_open EXPRESION:n1 s_par_close s_key_open LISTA_SENTENCIAS:n2 s_key_close
                        {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_SINO_SI");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(iright));
                            RESULT.setColumna(String.valueOf(ileft));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        :};

SENTENCIA_DETENER ::=   r_detener:n
                        {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_DETENER");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                        :}; 

SENTENCIA_LLAMADA   ::=  identificador:n1 s_par_open LISTA_EXPRESIONES:n2 s_par_close
                         {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_LLAMADA");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n2);
                         :}
                         |identificador:n1 s_par_open s_par_close
                         {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_LLAMADA");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                         :};

SENTENCIA_RETORNAR  ::= r_retornar:n EXPRESION:n1
                        {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_RETORNAR");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(n1);
                        :};

/*
SENTENCIA_ACCESO    ::= identificador:n1 s_dot SENTENCIA_LLAMADA:n2
                        {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_ACCESO");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n2);
                        :};*/

SENTENCIA_CREAR_VENTANA    ::= r_crearventana:n1 s_par_open cadena:n2 s_coma EXPRESION:n3 s_coma EXPRESION:n4 s_coma EXPRESION:n5 s_par_close
                            {:
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_CREAR_VENTANA");
                                RESULT.setValor(n2);
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n5);
                                RESULT.getHijos().add(n3);
                                RESULT.getHijos().add(n4);                                
                            :};

SENTENCIA_CREAR_CONTENEDOR  ::= identificador:n1 s_dot r_crearcontenedor s_par_open EXPRESION:n2 s_coma EXPRESION:n3 s_coma cadena:n4 s_coma EXPRESION:n5 s_coma EXPRESION:n6 s_coma EXPRESION:n7 s_par_close
                            {:
                                Nodo_AST_FS nodo_color = new Nodo_AST_FS();
                                nodo_color.setEtiqueta("COLOR");
                                nodo_color.setValor(n4);
                                nodo_color.setFila(String.valueOf(n4right));
                                nodo_color.setColumna(String.valueOf(n4left));
                                
                                RESULT.setEtiqueta("SENTENCIA_CREAR_CONTENEDOR");
                                RESULT.setValor(n1);
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(nodo_color);
                                RESULT.getHijos().add(n2);
                                RESULT.getHijos().add(n3);                                
                                RESULT.getHijos().add(n5);
                                RESULT.getHijos().add(n6);
                                RESULT.getHijos().add(n7);
                            :};                            

SENTENCIA_EVENTO_ALCARGAR   ::= identificador:n s_dot r_cargar s_par_open s_par_close
                            {:
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_EVENTO_ALCARGAR");
                                RESULT.setValor(n);
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                            :};    

SENTENCIA_EVENTO_ALCERRAR   ::= identificador:n s_dot r_cerrar s_par_open s_par_close
                            {:
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("SENTENCIA_EVENTO_ALCERRAR");
                                RESULT.setValor(n);
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                            :};                                                    

//PRODUCCIONES AUXILIARES

LISTA_PARAMETROS ::=    LISTA_PARAMETROS:n1 s_coma r_var identificador:n2
                        {:
                            Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                            nodo_identificador.setEtiqueta("IDENTIFICADOR");
                            nodo_identificador.setValor(n2);
                            nodo_identificador.setFila(String.valueOf(n2right));
                            nodo_identificador.setColumna(String.valueOf(n2left));

                            n1.getHijos().add(nodo_identificador);
                            RESULT = n1;
                        :}
                        |r_var identificador:n
                        {:
                            Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                            nodo_identificador.setEtiqueta("IDENTIFICADOR");
                            nodo_identificador.setValor(n);
                            nodo_identificador.setFila(String.valueOf(nright));
                            nodo_identificador.setColumna(String.valueOf(nleft));

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_PARAMETROS");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_identificador);
                        :};

LISTA_IDENTIFICADORES ::=   LISTA_IDENTIFICADORES:n1 s_coma identificador:n2
                            {:
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n2);
                                nodo_identificador.setFila(String.valueOf(n2right));
                                nodo_identificador.setColumna(String.valueOf(n2left));

                                n1.getHijos().add(nodo_identificador);
                                RESULT = n1;
                            :}
                            |identificador:n
                            {:
                                Nodo_AST_FS nodo_identificador = new Nodo_AST_FS();
                                nodo_identificador.setEtiqueta("IDENTIFICADOR");
                                nodo_identificador.setValor(n);
                                nodo_identificador.setFila(String.valueOf(nright));
                                nodo_identificador.setColumna(String.valueOf(nleft));

                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta("LISTA_IDENTIFICADORES");
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(nright));
                                RESULT.setColumna(String.valueOf(nleft));
                                RESULT.getHijos().add(nodo_identificador);
                            :};

LISTA_SENTENCIAS_SINO_SI ::=   LISTA_SENTENCIAS_SINO_SI:n1 SENTENCIA_SINO_SI:n2
                                {:
                                    RESULT = n1;
                                    RESULT.getHijos().add(n2);
                                :}
                                |SENTENCIA_SINO_SI:n
                                {:
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("LISTA_SENTENCIA_SINO_SI");
                                    RESULT.setValor("");
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                    RESULT.getHijos().add(n);
                                :};   

LISTA_SENTENCIAS_CASOS ::=   LISTA_SENTENCIAS_CASOS:n1 SENTENCIA_CASO:n2
                                {:
                                    RESULT = n1;
                                    RESULT.getHijos().add(n2);
                                :}
                                |SENTENCIA_CASO:n
                                {:
                                    RESULT = new Nodo_AST_FS();
                                    RESULT.setEtiqueta("LISTA_SENTENCIA_CASOS");
                                    RESULT.setValor("");
                                    RESULT.setFila(String.valueOf(nright));
                                    RESULT.setColumna(String.valueOf(nleft));
                                    RESULT.getHijos().add(n);
                                :};                                                                 

/*******************************************EXPRESIONES*******************************************************************************/

LISTA_EXPRESIONES ::=   LISTA_EXPRESIONES:n1 s_coma EXPRESION:n2 
                        {:
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = n1;
                            RESULT.getHijos().add(nodo_expresion);
                        :}
                        |EXPRESION:n
                        {:
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(nright));
                            nodo_expresion.setColumna(String.valueOf(nleft));
                            nodo_expresion.getHijos().add(n);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_EXPRESIONES");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        :};


EXPRESION ::=    EXPRESION_ARITMETICA:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_ARITMETICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |EXPRESION_RELACIONAL:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_RELACIONAL");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |EXPRESION_UNARIA:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_UNARIA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |EXPRESION_LOGICA:n  
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_LOGICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :} 
                |s_par_open  EXPRESION:n  s_par_close
                {:
                    RESULT = n;
                :}               
                |DATO_PRIMITIVO:n 
                {:
                    RESULT = n;
                :}
                |SENTENCIA_SELECCION:n
                {:
                    RESULT = n;
                :} 
                |SENTENCIA_LLAMADA:n
                {:
                    RESULT = n;
                :}
                |SENTENCIA_ACCESO:n
                {:
                    RESULT = n;
                :}
                |SENTENCIA_CREAR_VENTANA:n
                {:
                    RESULT = n;
                :};



EXPRESION_ARITMETICA ::=    EXPRESION:n1 s_plus:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_minus:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_mul:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_div:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_mod:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_to:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_increment:o
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            :}
                            |EXPRESION:n1 s_decrement:o
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            :};

EXPRESION_UNARIA ::=    s_minus:o EXPRESION:n1
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        :}
                        |s_plus:o EXPRESION:n1
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        :};

EXPRESION_LOGICA ::=    EXPRESION:n1 s_or:o EXPRESION:n2
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        :}
                        |EXPRESION:n1 s_and:o EXPRESION:n2
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        :}
                        |s_not:o EXPRESION:n1
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        :};

EXPRESION_RELACIONAL ::=    EXPRESION:n1 s_greather:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_less:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_greather_equal:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_less_equal:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_compare:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_diferent:o EXPRESION:n2   
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :};                     
  
DATO_PRIMITIVO ::=  r_nulo:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.nulo.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |booleano:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.booleano.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |entero:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.entero.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |decimal:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.decimal.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |caracter:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.caracter.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft)); 
                    :}
                    |cadena:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.cadena.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |identificador:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.identificador.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :};