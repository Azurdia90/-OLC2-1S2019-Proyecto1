/* The following code was generated by JFlex 1.6.1 */

package GXML_ANALIZADORES;

import	java_cup.runtime.Symbol; 
import UI.ObjetoEntrada;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico_gxml.jflex</tt>
 */
public class Lexico_GXML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CA = 2;
  public static final int comentario_single = 4;
  public static final int comentario_multi = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\64\1\61\1\63\1\62\1\62\22\0\1\64\1\37\1\5"+
    "\1\60\1\57\1\35\1\42\1\6\1\26\1\27\1\32\1\30\1\43"+
    "\1\31\1\4\1\33\12\3\2\0\1\23\1\36\1\40\2\0\1\13"+
    "\1\53\1\51\1\12\1\10\1\15\1\56\1\55\1\45\2\1\1\16"+
    "\1\46\1\21\1\14\1\47\1\1\1\11\1\20\1\50\1\22\1\7"+
    "\1\1\1\52\1\54\1\1\3\0\1\34\1\2\1\0\1\13\1\53"+
    "\1\51\1\12\1\10\1\15\1\56\1\55\1\45\2\1\1\16\1\46"+
    "\1\21\1\14\1\47\1\1\1\11\1\20\1\50\1\22\1\7\1\1"+
    "\1\52\1\54\1\1\1\24\1\41\1\25\7\0\1\63\75\0\1\1"+
    "\154\0\2\44\115\0\1\17\u1e98\0\1\1\17\0\1\63\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\2\1\10\2"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\1\1\23"+
    "\1\1\5\2\1\24\1\2\1\25\2\1\1\26\1\27"+
    "\1\30\1\31\2\30\2\0\1\32\1\0\13\2\1\0"+
    "\4\2\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\0\1\43\3\2\1\0\4\2\1\0"+
    "\4\2\1\44\1\45\1\31\1\46\1\47\14\2\1\0"+
    "\4\2\1\0\3\2\1\0\3\2\1\50\1\0\10\2"+
    "\1\0\3\2\1\51\1\52\2\2\1\0\1\2\1\0"+
    "\2\2\1\0\3\2\1\53\1\0\1\2\1\0\2\2"+
    "\1\0\1\2\1\54\1\2\2\55\2\2\1\0\5\2"+
    "\1\0\3\2\1\56\2\0\1\2\2\57\1\2\1\0"+
    "\1\2\1\0\2\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\60\1\61\2\2\1\0\1\2"+
    "\1\62\1\63\2\2\2\64\2\2\1\0\2\65\1\66"+
    "\1\0\1\2\1\0\1\2\1\67\1\0\1\2\2\70"+
    "\1\0\1\2\2\71\2\2\1\0\2\2\1\72\1\2"+
    "\1\73\3\0\2\2\1\0\1\2\2\74\1\0\1\2"+
    "\1\0\2\2\1\75\2\76\1\2\3\0\2\2\1\0"+
    "\1\2\2\77\1\0\2\2\1\0\1\2\3\0\2\2"+
    "\1\0\1\2\1\0\2\2\2\100\3\0\2\2\2\101"+
    "\2\102\1\103\1\0\1\104\1\0\1\104\1\2\2\0"+
    "\1\2\1\0\2\105\3\0\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\324\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\324\0\324\0\324\0\324"+
    "\0\u03ef\0\u0424\0\324\0\324\0\324\0\324\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\324\0\u0562\0\u0597\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\u0109\0\u06a0\0\u0109\0\u06d5\0\u070a\0\u073f"+
    "\0\u0774\0\324\0\u073f\0\u073f\0\u07a9\0\u07de\0\u01a8\0\324"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\324\0\324\0\324\0\324\0\324\0\324\0\324"+
    "\0\324\0\324\0\u0b98\0\u0109\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\324\0\324\0\324\0\u07de\0\324\0\u0e7e\0\u0eb3"+
    "\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203"+
    "\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u0109"+
    "\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e"+
    "\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u0109\0\u0109\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u0109\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977"+
    "\0\u19ac\0\u19e1\0\u0109\0\u1a16\0\324\0\u0109\0\u1a4b\0\u1a80"+
    "\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28"+
    "\0\u1c5d\0\u1c92\0\u0109\0\u1cc7\0\u1cfc\0\u1d31\0\324\0\u0109"+
    "\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u0109\0\u0109"+
    "\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u0109\0\u0109\0\u2120\0\u2155"+
    "\0\324\0\u0109\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u0109"+
    "\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u0109\0\u2367\0\u239c\0\324"+
    "\0\u0109\0\u23d1\0\u2406\0\324\0\u0109\0\u243b\0\u2470\0\u24a5"+
    "\0\u24da\0\u250f\0\u0109\0\u2544\0\u0109\0\u2579\0\u25ae\0\u25e3"+
    "\0\u2618\0\u264d\0\u2682\0\u26b7\0\324\0\u0109\0\u26ec\0\u2721"+
    "\0\u2756\0\u278b\0\u27c0\0\u0109\0\324\0\u0109\0\u27f5\0\u282a"+
    "\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\324\0\u0109"+
    "\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10"+
    "\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\324"+
    "\0\u0109\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\324\0\u0109"+
    "\0\324\0\u0109\0\u0109\0\u2dc1\0\324\0\u2df6\0\u0109\0\u2e2b"+
    "\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\324\0\u0109\0\u2f34\0\u2f69"+
    "\0\u2f9e\0\324";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\6\1\21\1\22\1\5"+
    "\1\6\1\23\1\6\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\2\6\1\56\1\57"+
    "\2\60\1\0\1\60\23\61\1\5\41\61\61\62\1\63"+
    "\1\64\1\62\1\64\60\62\1\65\2\60\1\0\1\64"+
    "\66\0\3\6\3\0\10\6\1\0\3\6\22\0\12\6"+
    "\7\0\1\6\5\0\10\6\1\0\3\6\22\0\12\6"+
    "\11\0\1\10\1\66\60\0\5\67\1\70\57\67\6\71"+
    "\1\0\56\71\1\0\3\6\3\0\1\6\1\72\6\6"+
    "\1\0\3\6\22\0\12\6\7\0\3\6\3\0\10\6"+
    "\1\0\1\6\1\73\1\6\22\0\12\6\7\0\3\6"+
    "\3\0\1\6\1\74\6\6\1\0\3\6\22\0\12\6"+
    "\7\0\3\6\3\0\1\6\1\75\2\6\1\76\3\6"+
    "\1\0\3\6\22\0\12\6\7\0\3\6\3\0\7\6"+
    "\1\77\1\0\1\6\1\100\1\101\22\0\4\6\1\102"+
    "\5\6\7\0\3\6\3\0\4\6\1\103\3\6\1\0"+
    "\2\6\1\104\22\0\12\6\7\0\3\6\3\0\10\6"+
    "\1\0\3\6\21\0\1\105\1\106\11\6\7\0\3\6"+
    "\3\0\1\6\1\107\3\6\1\110\2\6\1\0\2\6"+
    "\1\111\22\0\12\6\44\0\1\112\56\0\1\113\65\0"+
    "\1\114\71\0\1\115\64\0\1\116\64\0\1\117\67\0"+
    "\1\120\65\0\1\121\34\0\1\122\33\0\1\123\17\0"+
    "\3\6\3\0\3\6\1\124\4\6\1\0\3\6\22\0"+
    "\1\6\1\125\10\6\7\0\3\6\3\0\4\6\1\126"+
    "\3\6\1\0\2\6\1\127\21\0\1\130\1\131\11\6"+
    "\7\0\3\6\3\0\4\6\1\132\3\6\1\0\3\6"+
    "\22\0\12\6\7\0\3\6\3\0\1\6\1\133\2\6"+
    "\1\134\3\6\1\0\3\6\21\0\1\135\1\136\11\6"+
    "\7\0\3\6\3\0\5\6\1\137\2\6\1\0\2\6"+
    "\1\140\22\0\12\6\7\0\3\6\3\0\5\6\1\141"+
    "\2\6\1\0\3\6\22\0\12\6\66\0\1\142\64\0"+
    "\1\143\65\0\2\60\1\0\1\60\23\61\1\0\41\61"+
    "\57\0\1\144\10\0\1\145\67\0\1\146\57\0\3\6"+
    "\3\0\2\6\1\147\5\6\1\0\1\6\1\150\1\6"+
    "\22\0\12\6\7\0\3\6\3\0\1\151\7\6\1\0"+
    "\3\6\22\0\12\6\7\0\3\6\3\0\6\6\1\152"+
    "\1\6\1\0\3\6\22\0\12\6\7\0\3\6\3\0"+
    "\6\6\1\153\1\6\1\0\3\6\22\0\12\6\7\0"+
    "\3\6\3\0\10\6\1\0\3\6\22\0\3\6\1\154"+
    "\6\6\7\0\3\6\3\0\10\6\1\0\3\6\22\0"+
    "\3\6\1\155\6\6\7\0\3\6\3\0\10\6\1\0"+
    "\3\6\22\0\4\6\1\156\5\6\7\0\3\6\3\0"+
    "\10\6\1\0\3\6\22\0\3\6\1\157\6\6\7\0"+
    "\3\6\3\0\10\6\1\0\3\6\22\0\4\6\1\160"+
    "\5\6\7\0\3\6\3\0\7\6\1\161\1\0\3\6"+
    "\22\0\12\6\7\0\3\6\3\0\1\6\1\162\6\6"+
    "\1\0\3\6\22\0\12\6\25\0\2\163\45\0\3\6"+
    "\3\0\10\6\1\163\1\164\2\6\22\0\12\6\7\0"+
    "\3\6\3\0\10\6\1\0\3\6\22\0\11\6\1\165"+
    "\7\0\3\6\3\0\10\6\1\0\3\6\22\0\1\6"+
    "\1\166\10\6\7\0\3\6\3\0\7\6\1\167\1\0"+
    "\3\6\22\0\12\6\55\0\1\170\16\0\3\6\3\0"+
    "\10\6\1\0\3\6\22\0\2\6\1\171\7\6\7\0"+
    "\3\6\3\0\10\6\1\0\3\6\22\0\5\6\1\172"+
    "\4\6\7\0\3\6\3\0\7\6\1\173\1\0\3\6"+
    "\22\0\12\6\27\0\1\174\44\0\3\6\3\0\10\6"+
    "\1\0\1\6\1\175\1\6\22\0\12\6\7\0\3\6"+
    "\3\0\10\6\1\0\3\6\22\0\3\6\1\176\6\6"+
    "\7\0\3\6\3\0\10\6\1\0\3\6\22\0\5\6"+
    "\1\177\4\6\7\0\3\6\3\0\10\6\1\0\3\6"+
    "\22\0\1\6\1\200\10\6\55\0\1\201\16\0\3\6"+
    "\3\0\10\6\1\0\3\6\22\0\2\6\1\202\7\6"+
    "\7\0\3\6\3\0\7\6\1\203\1\0\1\6\1\204"+
    "\1\6\22\0\12\6\7\0\3\6\3\0\2\6\1\205"+
    "\5\6\1\0\3\6\22\0\12\6\7\0\3\6\3\0"+
    "\2\6\1\206\5\6\1\0\3\6\22\0\3\6\1\207"+
    "\6\6\7\0\3\6\3\0\3\6\1\210\4\6\1\0"+
    "\3\6\22\0\12\6\7\0\3\6\3\0\10\6\1\0"+
    "\3\6\22\0\3\6\1\211\6\6\7\0\3\6\3\0"+
    "\10\6\1\0\3\6\21\0\1\212\1\213\11\6\7\0"+
    "\3\6\3\0\1\6\1\214\6\6\1\0\3\6\22\0"+
    "\12\6\7\0\3\6\3\0\1\6\1\215\6\6\1\0"+
    "\3\6\22\0\12\6\7\0\3\6\3\0\5\6\1\216"+
    "\2\6\1\0\3\6\22\0\12\6\7\0\3\6\3\0"+
    "\5\6\1\217\2\6\1\0\3\6\22\0\12\6\7\0"+
    "\3\6\3\0\10\6\1\0\3\6\22\0\10\6\1\220"+
    "\1\6\7\0\3\6\3\0\5\6\1\221\2\6\1\0"+
    "\3\6\22\0\12\6\7\0\3\6\3\0\10\6\1\0"+
    "\3\6\21\0\1\222\1\223\11\6\7\0\3\6\3\0"+
    "\10\6\1\224\1\225\2\6\22\0\12\6\7\0\3\6"+
    "\3\0\10\6\1\0\1\6\1\226\1\6\22\0\12\6"+
    "\56\0\1\227\15\0\3\6\3\0\10\6\1\0\3\6"+
    "\22\0\3\6\1\230\6\6\7\0\3\6\3\0\2\6"+
    "\1\231\5\6\1\0\3\6\22\0\12\6\7\0\3\6"+
    "\3\0\10\6\1\0\3\6\22\0\6\6\1\232\3\6"+
    "\7\0\3\6\3\0\5\6\1\233\2\6\1\0\3\6"+
    "\22\0\12\6\22\0\1\234\51\0\3\6\3\0\5\6"+
    "\1\235\2\6\1\0\3\6\22\0\12\6\7\0\3\6"+
    "\3\0\10\6\1\0\3\6\21\0\1\236\1\237\11\6"+
    "\7\0\3\6\3\0\10\6\1\0\3\6\22\0\3\6"+
    "\1\240\6\6\52\0\2\241\20\0\3\6\3\0\10\6"+
    "\1\0\3\6\21\0\1\241\1\242\11\6\7\0\3\6"+
    "\3\0\10\6\1\0\3\6\22\0\10\6\1\243\1\6"+
    "\7\0\3\6\3\0\10\6\1\0\3\6\22\0\3\6"+
    "\1\244\6\6\22\0\1\245\51\0\3\6\3\0\5\6"+
    "\1\246\2\6\1\0\3\6\22\0\12\6\7\0\3\6"+
    "\3\0\5\6\1\247\2\6\1\0\3\6\22\0\12\6"+
    "\7\0\3\6\3\0\10\6\1\0\3\6\22\0\3\6"+
    "\1\250\6\6\7\0\3\6\3\0\10\6\1\251\1\252"+
    "\2\6\22\0\12\6\7\0\3\6\3\0\3\6\1\253"+
    "\4\6\1\0\3\6\22\0\12\6\7\0\3\6\3\0"+
    "\5\6\1\254\2\6\1\0\3\6\22\0\12\6\7\0"+
    "\3\6\3\0\4\6\1\255\3\6\1\0\3\6\22\0"+
    "\12\6\7\0\3\6\3\0\4\6\1\256\3\6\1\0"+
    "\3\6\22\0\12\6\21\0\1\257\52\0\3\6\3\0"+
    "\4\6\1\260\3\6\1\0\3\6\22\0\12\6\7\0"+
    "\3\6\3\0\2\6\1\261\5\6\1\0\3\6\22\0"+
    "\12\6\7\0\3\6\3\0\10\6\1\0\3\6\22\0"+
    "\4\6\1\262\5\6\7\0\3\6\3\0\5\6\1\263"+
    "\2\6\1\0\3\6\22\0\12\6\7\0\3\6\3\0"+
    "\10\6\1\0\3\6\6\0\1\264\13\0\12\6\22\0"+
    "\1\265\51\0\3\6\3\0\5\6\1\266\2\6\1\0"+
    "\3\6\22\0\12\6\22\0\1\267\51\0\3\6\3\0"+
    "\5\6\1\270\2\6\1\0\3\6\22\0\12\6\7\0"+
    "\3\6\3\0\10\6\1\0\3\6\22\0\3\6\1\271"+
    "\6\6\21\0\1\272\52\0\3\6\3\0\4\6\1\273"+
    "\3\6\1\0\3\6\22\0\12\6\7\0\3\6\3\0"+
    "\10\6\1\0\3\6\21\0\1\274\1\275\11\6\7\0"+
    "\3\6\3\0\2\6\1\276\5\6\1\0\3\6\22\0"+
    "\12\6\17\0\1\277\54\0\3\6\3\0\2\6\1\300"+
    "\5\6\1\0\3\6\22\0\12\6\54\0\1\301\17\0"+
    "\3\6\3\0\10\6\1\0\3\6\22\0\1\6\1\302"+
    "\10\6\7\0\3\6\3\0\10\6\1\0\3\6\21\0"+
    "\1\303\1\304\11\6\54\0\1\305\17\0\3\6\3\0"+
    "\10\6\1\0\3\6\22\0\1\6\1\306\10\6\7\0"+
    "\3\6\3\0\5\6\1\307\2\6\1\0\3\6\22\0"+
    "\12\6\7\0\3\6\3\0\2\6\1\310\5\6\1\0"+
    "\3\6\22\0\12\6\7\0\3\6\3\0\1\6\1\311"+
    "\1\312\5\6\1\0\3\6\22\0\12\6\52\0\2\313"+
    "\20\0\3\6\3\0\10\6\1\0\3\6\21\0\1\313"+
    "\1\314\11\6\7\0\3\6\3\0\1\6\1\315\6\6"+
    "\1\0\3\6\22\0\12\6\7\0\3\6\3\0\10\6"+
    "\1\0\1\6\1\316\1\6\22\0\12\6\7\0\3\6"+
    "\3\0\3\6\1\317\4\6\1\0\3\6\22\0\12\6"+
    "\7\0\3\6\3\0\10\6\1\0\1\6\1\320\1\6"+
    "\22\0\12\6\17\0\1\321\54\0\3\6\3\0\2\6"+
    "\1\322\5\6\1\0\3\6\22\0\12\6\7\0\3\6"+
    "\3\0\1\6\1\323\6\6\1\0\3\6\22\0\12\6"+
    "\7\0\3\6\3\0\10\6\1\0\3\6\22\0\3\6"+
    "\1\324\6\6\17\0\1\325\74\0\1\326\44\0\3\6"+
    "\3\0\10\6\1\0\1\6\1\327\1\6\22\0\12\6"+
    "\7\0\3\6\3\0\1\6\1\330\6\6\1\0\3\6"+
    "\22\0\12\6\20\0\1\331\53\0\3\6\3\0\3\6"+
    "\1\332\4\6\1\0\3\6\22\0\12\6\56\0\1\333"+
    "\15\0\3\6\3\0\10\6\1\0\3\6\22\0\3\6"+
    "\1\334\6\6\7\0\3\6\3\0\1\6\1\335\6\6"+
    "\1\0\3\6\22\0\12\6\56\0\1\336\15\0\3\6"+
    "\3\0\10\6\1\0\3\6\22\0\3\6\1\337\6\6"+
    "\22\0\1\340\51\0\3\6\3\0\5\6\1\341\2\6"+
    "\1\0\3\6\22\0\12\6\54\0\1\342\17\0\3\6"+
    "\3\0\10\6\1\0\3\6\22\0\1\6\1\343\10\6"+
    "\22\0\1\344\51\0\3\6\3\0\5\6\1\345\2\6"+
    "\1\0\3\6\22\0\12\6\7\0\3\6\3\0\10\6"+
    "\1\0\1\6\1\346\1\6\22\0\12\6\7\0\3\6"+
    "\3\0\5\6\1\347\2\6\1\0\3\6\22\0\12\6"+
    "\15\0\1\350\56\0\3\6\3\0\1\351\7\6\1\0"+
    "\3\6\22\0\12\6\7\0\3\6\3\0\1\6\1\352"+
    "\6\6\1\0\3\6\22\0\12\6\7\0\3\6\3\0"+
    "\4\6\1\353\3\6\1\0\3\6\22\0\12\6\7\0"+
    "\3\6\3\0\10\6\1\0\1\6\1\354\1\6\22\0"+
    "\12\6\7\0\3\6\3\0\5\6\1\355\2\6\1\0"+
    "\3\6\22\0\12\6\16\0\1\356\71\0\1\357\26\0"+
    "\2\360\20\0\3\6\3\0\6\6\1\361\1\6\1\0"+
    "\3\6\21\0\1\360\1\362\11\6\21\0\1\363\52\0"+
    "\3\6\3\0\4\6\1\364\3\6\1\0\3\6\22\0"+
    "\12\6\21\0\1\365\52\0\3\6\3\0\4\6\1\366"+
    "\3\6\1\0\3\6\22\0\12\6\21\0\1\367\52\0"+
    "\3\6\3\0\4\6\1\370\3\6\1\0\3\6\22\0"+
    "\12\6\16\0\1\371\55\0\3\6\3\0\1\6\1\372"+
    "\6\6\1\0\3\6\22\0\12\6\7\0\3\6\3\0"+
    "\1\6\1\373\6\6\1\0\3\6\22\0\12\6\7\0"+
    "\3\6\3\0\7\6\1\374\1\0\3\6\22\0\12\6"+
    "\21\0\1\375\52\0\3\6\3\0\4\6\1\376\3\6"+
    "\1\0\3\6\22\0\12\6\7\0\3\6\3\0\2\6"+
    "\1\225\5\6\1\0\3\6\22\0\12\6\7\0\3\6"+
    "\3\0\10\6\1\0\3\6\22\0\4\6\1\377\5\6"+
    "\55\0\1\u0100\61\0\2\u0101\40\0\1\u0102\44\0\3\6"+
    "\3\0\10\6\1\0\3\6\21\0\1\u0101\1\u0103\11\6"+
    "\7\0\3\6\3\0\10\6\1\0\1\6\1\u0104\1\6"+
    "\22\0\12\6\56\0\1\u0105\15\0\3\6\3\0\10\6"+
    "\1\0\3\6\22\0\3\6\1\u0106\6\6\17\0\1\u0107"+
    "\54\0\3\6\3\0\2\6\1\u0108\5\6\1\0\3\6"+
    "\22\0\12\6\20\0\1\u0109\53\0\3\6\3\0\3\6"+
    "\1\u010a\4\6\1\0\3\6\22\0\12\6\7\0\3\6"+
    "\3\0\3\6\1\u010b\4\6\1\0\3\6\22\0\12\6"+
    "\7\0\3\6\3\0\10\6\1\0\3\6\21\0\1\u010c"+
    "\1\u010d\11\6\17\0\1\u010e\74\0\1\u010f\107\0\2\u0110"+
    "\20\0\3\6\3\0\10\6\1\0\1\6\1\u0111\1\6"+
    "\22\0\12\6\7\0\3\6\3\0\10\6\1\0\3\6"+
    "\21\0\1\u0110\1\u0112\11\6\22\0\1\u0113\51\0\3\6"+
    "\3\0\5\6\1\u0114\2\6\1\0\3\6\22\0\12\6"+
    "\52\0\2\u0115\20\0\3\6\3\0\10\6\1\0\3\6"+
    "\21\0\1\u0115\1\u0116\11\6\7\0\3\6\3\0\5\6"+
    "\1\u0117\2\6\1\0\3\6\22\0\12\6\21\0\1\u0118"+
    "\52\0\3\6\3\0\4\6\1\u0119\3\6\1\0\3\6"+
    "\22\0\12\6\22\0\1\u011a\63\0\1\u011b\122\0\1\u011c"+
    "\14\0\3\6\3\0\4\6\1\u011d\3\6\1\0\3\6"+
    "\22\0\12\6\7\0\3\6\3\0\10\6\1\0\3\6"+
    "\22\0\4\6\1\u011e\5\6\25\0\2\u011f\45\0\3\6"+
    "\3\0\10\6\1\u011f\1\u0120\2\6\22\0\12\6\21\0"+
    "\1\u0121\52\0\3\6\3\0\4\6\1\u0122\3\6\1\0"+
    "\3\6\22\0\12\6\7\0\3\6\3\0\2\6\1\u0123"+
    "\5\6\1\0\3\6\22\0\12\6\20\0\1\u0124\70\0"+
    "\1\u0125\112\0\2\u0126\20\0\3\6\3\0\7\6\1\u0127"+
    "\1\0\3\6\22\0\12\6\7\0\3\6\3\0\10\6"+
    "\1\0\3\6\21\0\1\u0126\1\u0128\11\6\30\0\1\u0129"+
    "\55\0\1\u012a\52\0\3\6\3\0\4\6\1\u012b\3\6"+
    "\1\0\3\6\22\0\12\6\57\0\1\u012c\31\0\1\u012d"+
    "\47\0\3\6\3\0\7\6\1\u012e\1\0\3\6\22\0"+
    "\12\6\57\0\1\u012f\57\0\2\u0130\33\0\1\u0131\71\0"+
    "\1\u0132\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12243];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\13\1\4\11\2\1\4\11"+
    "\5\1\1\11\15\1\1\11\3\1\2\0\1\11\1\0"+
    "\13\1\1\0\4\1\11\11\1\0\4\1\1\0\4\1"+
    "\1\0\4\1\3\11\1\1\1\11\14\1\1\0\4\1"+
    "\1\0\3\1\1\0\4\1\1\0\10\1\1\0\7\1"+
    "\1\0\1\1\1\0\2\1\1\0\4\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\11\3\1\1\0\5\1"+
    "\1\0\4\1\2\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\1\0\5\1\1\11\3\1\1\0\3\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\3\1\1\0\5\1\3\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\2\1\3\0\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\1\1\3\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\11\1\1\3\0\2\1\1\11\1\1"+
    "\1\11\2\1\1\0\1\11\1\0\2\1\2\0\1\1"+
    "\1\0\1\11\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//codigo que se utilizara en el analizador lexico

private String texto_contenido = "";
private ObjetoEntrada entrada;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

private void _error(String erro_texto, int erro_column, int erro_line)
{
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Léxico GXML");
    error_encontrado.setDescripcion("Caracter no reconocido: " + erro_texto);
    error_encontrado.setLinea(Integer.toString(erro_line));
    error_encontrado.setColumna(Integer.toString(erro_column));
    error_encontrado.setTipo("Lexico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);
    //System.out.println("Error Lexico: " + erro_texto + " columna: " + erro_column + " linea: " + erro_line);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico_GXML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Tabla_Simbolos_GXML_CUP.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { _error( new String (yytext()),yycolumn,yyline);
            }
          case 71: break;
          case 2: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.identificador, yycolumn,yyline, new String(yytext()));
            }
          case 72: break;
          case 3: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.entero, yycolumn,yyline, new String(yytext()));
            }
          case 73: break;
          case 4: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_dot, yycolumn,yyline, new String(yytext()));
            }
          case 74: break;
          case 5: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_less, yycolumn,yyline, new String(yytext()));
            }
          case 75: break;
          case 6: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_key_open, yycolumn,yyline, new String(yytext()));
            }
          case 76: break;
          case 7: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_key_close, yycolumn,yyline, new String(yytext()));
            }
          case 77: break;
          case 8: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_par_open, yycolumn,yyline, new String(yytext()));
            }
          case 78: break;
          case 9: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_par_close, yycolumn,yyline, new String(yytext()));
            }
          case 79: break;
          case 10: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_plus, yycolumn,yyline, new String(yytext()));
            }
          case 80: break;
          case 11: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_minus, yycolumn,yyline, new String(yytext()));
            }
          case 81: break;
          case 12: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_mul, yycolumn,yyline, new String(yytext()));
            }
          case 82: break;
          case 13: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_div, yycolumn,yyline, new String(yytext()));
            }
          case 83: break;
          case 14: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_to, yycolumn,yyline, new String(yytext()));
            }
          case 84: break;
          case 15: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_mod, yycolumn,yyline, new String(yytext()));
            }
          case 85: break;
          case 16: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_equal, yycolumn,yyline, new String(yytext()));
            }
          case 86: break;
          case 17: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_not, yycolumn,yyline, new String(yytext()));
            }
          case 87: break;
          case 18: 
            { texto_contenido = ""; yybegin(CA); return new Symbol(Tabla_Simbolos_GXML_CUP.s_greather, yycolumn,yyline, new String(yytext()));
            }
          case 88: break;
          case 19: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_coma, yycolumn,yyline, new String(yytext()));
            }
          case 89: break;
          case 20: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_posx, yycolumn,yyline, new String(yytext()));
            }
          case 90: break;
          case 21: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_posy, yycolumn,yyline, new String(yytext()));
            }
          case 91: break;
          case 22: 
            { /* Se ignoran */
            }
          case 92: break;
          case 23: 
            { yybegin(YYINITIAL); texto_contenido+=yytext(); if(!(texto_contenido.replaceAll("\n","").trim().equals(""))) return new Symbol(Tabla_Simbolos_GXML_CUP.contenido_tag, yycolumn, yyline, texto_contenido);
            }
          case 93: break;
          case 24: 
            { 
            }
          case 94: break;
          case 25: 
            { yybegin(YYINITIAL);
            }
          case 95: break;
          case 26: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.cadena, yycolumn,yyline, new String(yytext()));
            }
          case 96: break;
          case 27: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_less_equal, yycolumn,yyline, new String(yytext()));
            }
          case 97: break;
          case 28: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_increment, yycolumn,yyline, new String(yytext()));
            }
          case 98: break;
          case 29: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_decrement, yycolumn,yyline, new String(yytext()));
            }
          case 99: break;
          case 30: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_compare, yycolumn,yyline, new String(yytext()));
            }
          case 100: break;
          case 31: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_diferent, yycolumn,yyline, new String(yytext()));
            }
          case 101: break;
          case 32: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_greather_equal, yycolumn,yyline, new String(yytext()));
            }
          case 102: break;
          case 33: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_or, yycolumn,yyline, new String(yytext()));
            }
          case 103: break;
          case 34: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.s_and, yycolumn,yyline, new String(yytext()));
            }
          case 104: break;
          case 35: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_id, yycolumn,yyline, new String(yytext()));
            }
          case 105: break;
          case 36: 
            { yybegin(comentario_multi);
            }
          case 106: break;
          case 37: 
            { yybegin(comentario_single);
            }
          case 107: break;
          case 38: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.decimal, yycolumn,yyline, new String(yytext()));
            }
          case 108: break;
          case 39: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.caracter, yycolumn,yyline, new String(yytext()));
            }
          case 109: break;
          case 40: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_tamano, yycolumn,yyline, new String(yytext()));
            }
          case 110: break;
          case 41: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_dato, yycolumn,yyline, new String(yytext()));
            }
          case 111: break;
          case 42: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_alto, yycolumn,yyline, new String(yytext()));
            }
          case 112: break;
          case 43: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_nulo, yycolumn,yyline, new String(yytext()));
            }
          case 113: break;
          case 44: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_path, yycolumn,yyline, new String(yytext()));
            }
          case 114: break;
          case 45: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_tipo, yycolumn,yyline, new String(yytext()));
            }
          case 115: break;
          case 46: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_ancho, yycolumn,yyline, new String(yytext()));
            }
          case 116: break;
          case 47: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.booleano, yycolumn,yyline, new String(yytext()));
            }
          case 117: break;
          case 48: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_texto, yycolumn,yyline, new String(yytext()));
            }
          case 118: break;
          case 49: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_color, yycolumn,yyline, new String(yytext()));
            }
          case 119: break;
          case 50: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_borde, yycolumn,yyline, new String(yytext()));
            }
          case 120: break;
          case 51: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_boton, yycolumn,yyline, new String(yytext()));
            }
          case 121: break;
          case 52: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_enviar, yycolumn,yyline, new String(yytext()));
            }
          case 122: break;
          case 53: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_accion, yycolumn,yyline, new String(yytext()));
            }
          case 123: break;
          case 54: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_fuente, yycolumn,yyline, new String(yytext()));
            }
          case 124: break;
          case 55: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_nombre, yycolumn,yyline, new String(yytext()));
            }
          case 125: break;
          case 56: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_maximo, yycolumn,yyline, new String(yytext()));
            }
          case 126: break;
          case 57: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_minimo, yycolumn,yyline, new String(yytext()));
            }
          case 127: break;
          case 58: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_ventana, yycolumn,yyline, new String(yytext()));
            }
          case 128: break;
          case 59: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_defecto, yycolumn,yyline, new String(yytext()));
            }
          case 129: break;
          case 60: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_negrita, yycolumn,yyline, new String(yytext()));
            }
          case 130: break;
          case 61: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_control, yycolumn,yyline, new String(yytext()));
            }
          case 131: break;
          case 62: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_cursiva, yycolumn,yyline, new String(yytext()));
            }
          case 132: break;
          case 63: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_importar, yycolumn,yyline, new String(yytext()));
            }
          case 133: break;
          case 64: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_referencia, yycolumn,yyline, new String(yytext()));
            }
          case 134: break;
          case 65: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_listadatos, yycolumn,yyline, new String(yytext()));
            }
          case 135: break;
          case 66: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_multimedia, yycolumn,yyline, new String(yytext()));
            }
          case 136: break;
          case 67: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_contenedor, yycolumn,yyline, new String(yytext()));
            }
          case 137: break;
          case 68: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_accionfinal, yycolumn,yyline, new String(yytext()));
            }
          case 138: break;
          case 69: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_accioninicial, yycolumn,yyline, new String(yytext()));
            }
          case 139: break;
          case 70: 
            { return new Symbol(Tabla_Simbolos_GXML_CUP.r_autoreproduccion, yycolumn,yyline, new String(yytext()));
            }
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
