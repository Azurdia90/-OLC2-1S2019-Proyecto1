
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package GXML_ANALIZADORES;

import java.io.File;
import java_cup.runtime.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import UI.ObjetoEntrada;
import GXML_INSTRUCCION.*;
import FS_TABLA_SIMBOLOS.Tabla_Enums;
import FS_TABLA_SIMBOLOS.Entorno;
import FS_TABLA_SIMBOLOS.Simbolo;
import FS_OBJETOS.FS_Arreglo;
import FS_AST.Nodo_AST_FS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_GXML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tabla_Simbolos_GXML_CUP.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico_GXML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico_GXML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_GXML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\004\012\000\002\005\013\000\002\005\012\000" +
    "\002\006\004\000\002\006\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\013\000\002\010\012" +
    "\000\002\011\013\000\002\011\012\000\002\012\013\000" +
    "\002\012\012\000\002\020\013\000\002\020\023\000\002" +
    "\020\012\000\002\021\013\000\002\021\023\000\002\021" +
    "\012\000\002\022\012\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\014\012\000" +
    "\002\015\012\000\002\015\011\000\002\016\004\000\002" +
    "\016\003\000\002\017\012\000\002\023\004\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\005\000\002\026\005\000\002\027\005\000\002\033\005" +
    "\000\002\033\005\000\002\034\005\000\002\034\005\000" +
    "\002\036\005\000\002\036\005\000\002\035\005\000\002" +
    "\035\005\000\002\037\005\000\002\030\005\000\002\040" +
    "\005\000\002\041\005\000\002\041\005\000\002\042\005" +
    "\000\002\043\005\000\002\050\005\000\002\050\005\000" +
    "\002\051\005\000\002\051\005\000\002\053\005\000\002" +
    "\031\007\000\002\032\007\000\002\052\007\000\002\054" +
    "\005\000\002\055\005\000\002\056\006\000\002\056\005" +
    "\000\002\057\005\000\002\057\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\005\000\002\060\003\000\002\061\005\000\002\061" +
    "\005\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\005\000\002\061\004\000\002\061\004\000" +
    "\002\062\004\000\002\062\004\000\002\063\005\000\002" +
    "\063\005\000\002\063\004\000\002\064\005\000\002\064" +
    "\005\000\002\064\005\000\002\064\005\000\002\064\005" +
    "\000\002\064\005\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\004\034\007\001\002\000\006\002\000\034" +
    "\007\001\002\000\006\002\ufffd\034\ufffd\001\002\000\006" +
    "\002\ufffc\034\ufffc\001\002\000\006\044\013\045\012\001" +
    "\002\000\004\002\011\001\002\000\004\002\001\001\002" +
    "\000\054\057\054\060\056\061\074\062\041\063\027\064" +
    "\035\065\033\066\026\067\044\070\034\071\070\072\060" +
    "\073\076\074\101\075\100\076\040\077\077\100\037\101" +
    "\052\102\062\103\066\001\002\000\004\035\014\001\002" +
    "\000\004\013\015\001\002\000\004\034\016\001\002\000" +
    "\004\025\017\001\002\000\004\044\020\001\002\000\004" +
    "\035\021\001\002\000\006\002\ufffb\034\ufffb\001\002\000" +
    "\056\035\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072" +
    "\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5" +
    "\101\uffd5\102\uffd5\103\uffd5\001\002\000\056\035\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074" +
    "\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc" +
    "\103\uffcc\001\002\000\056\035\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\001\002" +
    "\000\056\035\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063" +
    "\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0" +
    "\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100" +
    "\uffc0\101\uffc0\102\uffc0\103\uffc0\001\002\000\004\043\u013e" +
    "\001\002\000\004\043\u013a\001\002\000\056\035\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6" +
    "\103\uffc6\001\002\000\056\035\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076" +
    "\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6\001\002" +
    "\000\056\035\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf" +
    "\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\001\002\000\004\043\u0137" +
    "\001\002\000\004\043\u0135\001\002\000\004\043\u0132\001" +
    "\002\000\056\035\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8" +
    "\100\uffd8\101\uffd8\102\uffd8\103\uffd8\001\002\000\004\043" +
    "\u012e\001\002\000\004\043\u012b\001\002\000\004\043\354" +
    "\001\002\000\056\035\140\057\054\060\056\061\074\062" +
    "\041\063\027\064\035\065\033\066\026\067\044\070\034" +
    "\071\070\072\060\073\076\074\101\075\100\076\040\077" +
    "\077\100\037\101\052\102\062\103\066\001\002\000\056" +
    "\035\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9" +
    "\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101" +
    "\uffc9\102\uffc9\103\uffc9\001\002\000\004\043\134\001\002" +
    "\000\056\035\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca" +
    "\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100" +
    "\uffca\101\uffca\102\uffca\103\uffca\001\002\000\056\035\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102" +
    "\uffc3\103\uffc3\001\002\000\056\035\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7" +
    "\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\001" +
    "\002\000\056\035\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\100\uffd4\101\uffd4\102\uffd4\103\uffd4\001\002\000\056\035" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3" +
    "\102\uffd3\103\uffd3\001\002\000\004\043\132\001\002\000" +
    "\056\035\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\102\uffc5\103\uffc5\001\002\000\004\043\130\001" +
    "\002\000\056\035\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071" +
    "\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf" +
    "\100\uffcf\101\uffcf\102\uffcf\103\uffcf\001\002\000\004\043" +
    "\126\001\002\000\056\035\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\001\002\000" +
    "\004\043\124\001\002\000\056\035\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1" +
    "\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\001" +
    "\002\000\004\043\122\001\002\000\056\035\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066" +
    "\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103" +
    "\uffd7\001\002\000\056\035\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\001\002\000" +
    "\056\035\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072" +
    "\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\101\uffc2\102\uffc2\103\uffc2\001\002\000\004\043\120\001" +
    "\002\000\056\035\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071" +
    "\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4" +
    "\100\uffc4\101\uffc4\102\uffc4\103\uffc4\001\002\000\004\043" +
    "\116\001\002\000\056\035\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070" +
    "\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd" +
    "\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\001\002\000" +
    "\056\035\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072" +
    "\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2" +
    "\101\uffd2\102\uffd2\103\uffd2\001\002\000\056\035\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1" +
    "\103\uffc1\001\002\000\004\043\114\001\002\000\056\035" +
    "\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073" +
    "\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce" +
    "\102\uffce\103\uffce\001\002\000\004\043\111\001\002\000" +
    "\004\043\106\001\002\000\004\043\104\001\002\000\004" +
    "\043\102\001\002\000\004\005\103\001\002\000\056\035" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae" +
    "\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073" +
    "\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae" +
    "\102\uffae\103\uffae\001\002\000\004\005\105\001\002\000" +
    "\056\035\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072" +
    "\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad" +
    "\101\uffad\102\uffad\103\uffad\001\002\000\006\006\107\007" +
    "\110\001\002\000\056\035\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070" +
    "\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9" +
    "\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\001\002\000" +
    "\056\035\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa" +
    "\101\uffaa\102\uffaa\103\uffaa\001\002\000\006\006\112\007" +
    "\113\001\002\000\056\035\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf" +
    "\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\001\002\000" +
    "\056\035\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\001\002\000\004\011\115\001" +
    "\002\000\056\035\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2" +
    "\100\uffb2\101\uffb2\102\uffb2\103\uffb2\001\002\000\004\011" +
    "\117\001\002\000\056\035\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070" +
    "\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd" +
    "\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\001\002\000" +
    "\004\005\121\001\002\000\056\035\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\001" +
    "\002\000\004\011\123\001\002\000\056\035\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066" +
    "\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4" +
    "\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103" +
    "\uffa4\001\002\000\004\011\125\001\002\000\056\035\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102" +
    "\uffb1\103\uffb1\001\002\000\004\011\127\001\002\000\056" +
    "\035\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064" +
    "\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101" +
    "\uffbc\102\uffbc\103\uffbc\001\002\000\004\011\131\001\002" +
    "\000\056\035\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe" +
    "\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\101\uffbe\102\uffbe\103\uffbe\001\002\000\004\011\133" +
    "\001\002\000\056\035\uffa8\057\uffa8\060\uffa8\061\uffa8\062" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077" +
    "\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\001\002\000\006" +
    "\006\135\007\136\001\002\000\056\035\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4" +
    "\001\002\000\056\035\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5" +
    "\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077" +
    "\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\001\002\000\056" +
    "\035\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\102\uffd9\103\uffd9\001\002\000\004\034\150\001\002" +
    "\000\004\034\ufff2\001\002\000\004\034\ufff4\001\002\000" +
    "\004\034\350\001\002\000\004\034\ufff3\001\002\000\004" +
    "\034\ufff5\001\002\000\004\034\ufff6\001\002\000\004\034" +
    "\ufff7\001\002\000\020\025\155\046\156\047\157\052\152" +
    "\054\154\055\160\056\153\001\002\000\004\034\ufff1\001" +
    "\002\000\054\057\054\060\056\061\074\062\041\063\027" +
    "\064\035\065\033\066\026\067\044\070\034\071\070\072" +
    "\060\073\076\074\101\075\100\076\040\077\077\100\037" +
    "\101\052\102\062\103\066\001\002\000\054\057\054\060" +
    "\056\061\074\062\041\063\027\064\035\065\033\066\026" +
    "\067\044\070\034\071\070\072\060\073\076\074\101\075" +
    "\100\076\040\077\077\100\037\101\052\102\062\103\066" +
    "\001\002\000\054\057\054\060\056\061\074\062\041\063" +
    "\027\064\035\065\033\066\026\067\044\070\034\071\070" +
    "\072\060\073\076\074\101\075\100\076\040\077\077\100" +
    "\037\101\052\102\062\103\066\001\002\000\004\045\237" +
    "\001\002\000\054\057\054\060\056\061\074\062\041\063" +
    "\027\064\035\065\033\066\026\067\044\070\034\071\070" +
    "\072\060\073\076\074\101\075\100\076\040\077\077\100" +
    "\037\101\052\102\062\103\066\001\002\000\054\057\054" +
    "\060\056\061\074\062\041\063\027\064\035\065\033\066" +
    "\026\067\044\070\034\071\070\072\060\073\076\074\101" +
    "\075\100\076\040\077\077\100\037\101\052\102\062\103" +
    "\066\001\002\000\054\057\054\060\056\061\074\062\041" +
    "\063\027\064\035\065\033\066\026\067\044\070\034\071" +
    "\070\072\060\073\076\074\101\075\100\076\040\077\077" +
    "\100\037\101\052\102\062\103\066\001\002\000\056\035" +
    "\162\057\054\060\056\061\074\062\041\063\027\064\035" +
    "\065\033\066\026\067\044\070\034\071\070\072\060\073" +
    "\076\074\101\075\100\076\040\077\077\100\037\101\052" +
    "\102\062\103\066\001\002\000\006\013\163\034\164\001" +
    "\002\000\004\034\204\001\002\000\006\025\165\047\166" +
    "\001\002\000\004\055\202\001\002\000\004\071\070\001" +
    "\002\000\004\035\170\001\002\000\004\013\171\001\002" +
    "\000\004\034\172\001\002\000\004\025\173\001\002\000" +
    "\004\047\174\001\002\000\004\035\175\001\002\000\004" +
    "\034\176\001\002\000\004\025\177\001\002\000\004\055" +
    "\200\001\002\000\004\035\201\001\002\000\004\034\uffe9" +
    "\001\002\000\004\035\203\001\002\000\004\034\uffe8\001" +
    "\002\000\004\025\205\001\002\000\004\055\206\001\002" +
    "\000\004\035\207\001\002\000\004\034\uffea\001\002\000" +
    "\056\035\211\057\054\060\056\061\074\062\041\063\027" +
    "\064\035\065\033\066\026\067\044\070\034\071\070\072" +
    "\060\073\076\074\101\075\100\076\040\077\077\100\037" +
    "\101\052\102\062\103\066\001\002\000\006\013\212\034" +
    "\213\001\002\000\004\034\217\001\002\000\004\025\214" +
    "\001\002\000\004\047\215\001\002\000\004\035\216\001" +
    "\002\000\004\034\uffed\001\002\000\004\025\220\001\002" +
    "\000\004\047\221\001\002\000\004\035\222\001\002\000" +
    "\004\034\uffee\001\002\000\056\035\224\057\054\060\056" +
    "\061\074\062\041\063\027\064\035\065\033\066\026\067" +
    "\044\070\034\071\070\072\060\073\076\074\101\075\100" +
    "\076\040\077\077\100\037\101\052\102\062\103\066\001" +
    "\002\000\004\034\226\001\002\000\004\034\233\001\002" +
    "\000\020\025\227\046\156\047\157\052\152\054\154\055" +
    "\160\056\153\001\002\000\004\046\230\001\002\000\004" +
    "\035\231\001\002\000\004\034\uffef\001\002\000\004\034" +
    "\ufff8\001\002\000\020\025\234\046\156\047\157\052\152" +
    "\054\154\055\160\056\153\001\002\000\004\046\235\001" +
    "\002\000\004\035\236\001\002\000\004\034\ufff0\001\002" +
    "\000\004\035\240\001\002\000\006\002\ufff9\034\ufff9\001" +
    "\002\000\056\035\242\057\054\060\056\061\074\062\041" +
    "\063\027\064\035\065\033\066\026\067\044\070\034\071" +
    "\070\072\060\073\076\074\101\075\100\076\040\077\077" +
    "\100\037\101\052\102\062\103\066\001\002\000\004\034" +
    "\243\001\002\000\004\025\244\001\002\000\004\054\245" +
    "\001\002\000\004\035\246\001\002\000\004\034\uffe4\001" +
    "\002\000\056\035\250\057\054\060\056\061\074\062\041" +
    "\063\027\064\035\065\033\066\026\067\044\070\034\071" +
    "\070\072\060\073\076\074\101\075\100\076\040\077\077" +
    "\100\037\101\052\102\062\103\066\001\002\000\006\013" +
    "\251\034\252\001\002\000\004\034\272\001\002\000\006" +
    "\025\253\047\254\001\002\000\004\056\270\001\002\000" +
    "\004\071\070\001\002\000\004\035\256\001\002\000\004" +
    "\013\257\001\002\000\004\034\260\001\002\000\004\025" +
    "\261\001\002\000\004\047\262\001\002\000\004\035\263" +
    "\001\002\000\004\034\264\001\002\000\004\025\265\001" +
    "\002\000\004\056\266\001\002\000\004\035\267\001\002" +
    "\000\004\034\uffe6\001\002\000\004\035\271\001\002\000" +
    "\004\034\uffe5\001\002\000\004\025\273\001\002\000\004" +
    "\056\274\001\002\000\004\035\275\001\002\000\004\034" +
    "\uffe7\001\002\000\056\035\277\057\054\060\056\061\074" +
    "\062\041\063\027\064\035\065\033\066\026\067\044\070" +
    "\034\071\070\072\060\073\076\074\101\075\100\076\040" +
    "\077\077\100\037\101\052\102\062\103\066\001\002\000" +
    "\004\034\301\001\002\000\004\034\342\001\002\000\010" +
    "\025\306\050\305\053\304\001\002\000\004\034\uffe1\001" +
    "\002\000\004\034\uffe0\001\002\000\004\035\334\001\002" +
    "\000\004\035\311\001\002\000\004\052\307\001\002\000" +
    "\004\035\310\001\002\000\004\034\uffeb\001\002\000\004" +
    "\034\314\001\002\000\004\034\330\001\002\000\004\034" +
    "\uffdb\001\002\000\006\025\316\051\315\001\002\000\004" +
    "\035\321\001\002\000\004\050\317\001\002\000\004\035" +
    "\320\001\002\000\004\034\uffdd\001\002\000\004\013\322" +
    "\001\002\000\004\034\323\001\002\000\004\025\324\001" +
    "\002\000\004\051\325\001\002\000\004\035\326\001\002" +
    "\000\004\034\uffda\001\002\000\004\034\uffdc\001\002\000" +
    "\006\025\331\051\315\001\002\000\004\050\332\001\002" +
    "\000\004\035\333\001\002\000\004\034\uffde\001\002\000" +
    "\004\013\335\001\002\000\004\034\336\001\002\000\004" +
    "\025\337\001\002\000\004\053\340\001\002\000\004\035" +
    "\341\001\002\000\004\034\uffdf\001\002\000\010\025\345" +
    "\050\305\053\304\001\002\000\004\034\uffe2\001\002\000" +
    "\004\034\uffe3\001\002\000\004\052\346\001\002\000\004" +
    "\035\347\001\002\000\004\034\uffec\001\002\000\020\025" +
    "\351\046\156\047\157\052\152\054\154\055\160\056\153" +
    "\001\002\000\004\045\352\001\002\000\004\035\353\001" +
    "\002\000\006\002\ufffa\034\ufffa\001\002\000\004\014\355" +
    "\001\002\000\004\012\357\001\002\000\004\015\u012a\001" +
    "\002\000\004\020\360\001\002\000\032\004\365\005\370" +
    "\006\366\007\u0101\010\371\011\363\012\u0103\020\375\021" +
    "\361\022\376\023\u0100\042\367\001\002\000\004\015\uffa1" +
    "\001\002\000\046\017\uff99\021\uff99\022\uff99\023\uff99\024" +
    "\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041" +
    "\uff99\001\002\000\046\017\uff80\021\uff80\022\uff80\023\uff80" +
    "\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032" +
    "\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80" +
    "\041\uff80\001\002\000\046\017\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\001\002\000\046\017\uff85\021\uff85\022\uff85" +
    "\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031" +
    "\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85" +
    "\040\uff85\041\uff85\001\002\000\046\017\uff82\021\uff82\022" +
    "\uff82\023\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82" +
    "\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037" +
    "\uff82\040\uff82\041\uff82\001\002\000\030\004\365\005\370" +
    "\006\366\007\u0101\010\371\011\363\012\u0103\020\375\022" +
    "\376\023\u0100\042\367\001\002\000\046\017\uff84\021\uff84" +
    "\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030" +
    "\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\001\002\000\046\017\uff81\021" +
    "\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81" +
    "\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036" +
    "\uff81\037\uff81\040\uff81\041\uff81\001\002\000\046\017\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\001\002\000\046\017" +
    "\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\001\002\000\006" +
    "\017\u0126\021\u0127\001\002\000\030\004\365\005\370\006" +
    "\366\007\u0101\010\371\011\363\012\u0103\020\375\022\376" +
    "\023\u0100\042\367\001\002\000\030\004\365\005\370\006" +
    "\366\007\u0101\010\371\011\363\012\u0103\020\375\022\376" +
    "\023\u0100\042\367\001\002\000\046\017\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\001\002\000\030\004\365\005\370" +
    "\006\366\007\u0101\010\371\011\363\012\u0103\020\375\022" +
    "\376\023\u0100\042\367\001\002\000\046\017\uff83\021\uff83" +
    "\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030" +
    "\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\001\002\000\046\017\uff9f\021" +
    "\uff9f\022\u010b\023\u0112\024\u0109\025\u0106\026\u0108\027\u0113" +
    "\030\u010e\031\u0105\032\u010f\033\u0111\034\u0110\035\u0107\036" +
    "\u010a\037\u010d\040\u0104\041\u010c\001\002\000\046\017\uff7f" +
    "\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027" +
    "\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f" +
    "\036\uff7f\037\uff7f\040\uff7f\041\uff7f\001\002\000\030\004" +
    "\365\005\370\006\366\007\u0101\010\371\011\363\012\u0103" +
    "\020\375\022\376\023\u0100\042\367\001\002\000\046\017" +
    "\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\001\002\000\030" +
    "\004\365\005\370\006\366\007\u0101\010\371\011\363\012" +
    "\u0103\020\375\022\376\023\u0100\042\367\001\002\000\030" +
    "\004\365\005\370\006\366\007\u0101\010\371\011\363\012" +
    "\u0103\020\375\022\376\023\u0100\042\367\001\002\000\030" +
    "\004\365\005\370\006\366\007\u0101\010\371\011\363\012" +
    "\u0103\020\375\022\376\023\u0100\042\367\001\002\000\030" +
    "\004\365\005\370\006\366\007\u0101\010\371\011\363\012" +
    "\u0103\020\375\022\376\023\u0100\042\367\001\002\000\030" +
    "\004\365\005\370\006\366\007\u0101\010\371\011\363\012" +
    "\u0103\020\375\022\376\023\u0100\042\367\001\002\000\030" +
    "\004\365\005\370\006\366\007\u0101\010\371\011\363\012" +
    "\u0103\020\375\022\376\023\u0100\042\367\001\002\000\030" +
    "\004\365\005\370\006\366\007\u0101\010\371\011\363\012" +
    "\u0103\020\375\022\376\023\u0100\042\367\001\002\000\030" +
    "\004\365\005\370\006\366\007\u0101\010\371\011\363\012" +
    "\u0103\020\375\022\376\023\u0100\042\367\001\002\000\046" +
    "\017\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92" +
    "\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\001\002\000" +
    "\030\004\365\005\370\006\366\007\u0101\010\371\011\363" +
    "\012\u0103\020\375\022\376\023\u0100\042\367\001\002\000" +
    "\030\004\365\005\370\006\366\007\u0101\010\371\011\363" +
    "\012\u0103\020\375\022\376\023\u0100\042\367\001\002\000" +
    "\030\004\365\005\370\006\366\007\u0101\010\371\011\363" +
    "\012\u0103\020\375\022\376\023\u0100\042\367\001\002\000" +
    "\030\004\365\005\370\006\366\007\u0101\010\371\011\363" +
    "\012\u0103\020\375\022\376\023\u0100\042\367\001\002\000" +
    "\030\004\365\005\370\006\366\007\u0101\010\371\011\363" +
    "\012\u0103\020\375\022\376\023\u0100\042\367\001\002\000" +
    "\046\017\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\u010e\031\u0105\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\001\002" +
    "\000\046\017\uff97\021\uff97\022\uff97\023\uff97\024\u0109\025" +
    "\u0106\026\u0108\027\u0113\030\u010e\031\u0105\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\001" +
    "\002\000\046\017\uff86\021\uff86\022\u010b\023\u0112\024\u0109" +
    "\025\u0106\026\u0108\027\u0113\030\u010e\031\u0105\032\uff86\033" +
    "\uff86\034\u0110\035\u0107\036\u010a\037\u010d\040\uff86\041\uff86" +
    "\001\002\000\046\017\uff8a\021\uff8a\022\u010b\023\u0112\024" +
    "\u0109\025\u0106\026\u0108\027\u0113\030\u010e\031\u0105\032\uff8a" +
    "\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041" +
    "\uff8a\001\002\000\046\017\uff87\021\uff87\022\u010b\023\u0112" +
    "\024\u0109\025\u0106\026\u0108\027\u0113\030\u010e\031\u0105\032" +
    "\uff87\033\uff87\034\u0110\035\u0107\036\u010a\037\u010d\040\uff87" +
    "\041\uff87\001\002\000\046\017\uff89\021\uff89\022\u010b\023" +
    "\u0112\024\u0109\025\u0106\026\u0108\027\u0113\030\u010e\031\u0105" +
    "\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\001\002\000\046\017\uff8d\021\uff8d\022\u010b" +
    "\023\u0112\024\u0109\025\u0106\026\u0108\027\u0113\030\u010e\031" +
    "\u0105\032\u010f\033\u0111\034\u0110\035\u0107\036\u010a\037\u010d" +
    "\040\uff8d\041\uff8d\001\002\000\046\017\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\u0109\025\u0106\026\u0108\027\u0113\030\u010e" +
    "\031\u0105\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\001\002\000\046\017\uff88\021\uff88" +
    "\022\u010b\023\u0112\024\u0109\025\u0106\026\u0108\027\u0113\030" +
    "\u010e\031\u0105\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88" +
    "\037\uff88\040\uff88\041\uff88\001\002\000\046\017\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\u0108\027\u0113" +
    "\030\u010e\031\u0105\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\001\002\000\046\017\uff93" +
    "\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027" +
    "\uff93\030\u010e\031\u0105\032\uff93\033\uff93\034\uff93\035\uff93" +
    "\036\uff93\037\uff93\040\uff93\041\uff93\001\002\000\046\017" +
    "\uff8b\021\uff8b\022\u010b\023\u0112\024\u0109\025\u0106\026\u0108" +
    "\027\u0113\030\u010e\031\u0105\032\uff8b\033\uff8b\034\uff8b\035" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\001\002\000\046" +
    "\017\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026" +
    "\u0108\027\u0113\030\u010e\031\u0105\032\uff95\033\uff95\034\uff95" +
    "\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\001\002\000" +
    "\046\017\uff8e\021\uff8e\022\u010b\023\u0112\024\u0109\025\u0106" +
    "\026\u0108\027\u0113\030\u010e\031\u0105\032\u010f\033\u0111\034" +
    "\u0110\035\u0107\036\u010a\037\u010d\040\uff8e\041\u010c\001\002" +
    "\000\046\017\uff90\021\uff90\022\uff90\023\uff90\024\u0109\025" +
    "\u0106\026\u0108\027\u0113\030\u010e\031\u0105\032\uff90\033\uff90" +
    "\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\001" +
    "\002\000\046\017\uff8f\021\uff8f\022\uff8f\023\uff8f\024\u0109" +
    "\025\u0106\026\u0108\027\u0113\030\u010e\031\u0105\032\uff8f\033" +
    "\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\001\002\000\044\021\u0125\022\u010b\023\u0112\024\u0109\025" +
    "\u0106\026\u0108\027\u0113\030\u010e\031\u0105\032\u010f\033\u0111" +
    "\034\u0110\035\u0107\036\u010a\037\u010d\040\u0104\041\u010c\001" +
    "\002\000\046\017\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a" +
    "\001\002\000\030\004\365\005\370\006\366\007\u0101\010" +
    "\371\011\363\012\u0103\020\375\022\376\023\u0100\042\367" +
    "\001\002\000\004\015\uffa2\001\002\000\046\017\uffa0\021" +
    "\uffa0\022\u010b\023\u0112\024\u0109\025\u0106\026\u0108\027\u0113" +
    "\030\u010e\031\u0105\032\u010f\033\u0111\034\u0110\035\u0107\036" +
    "\u010a\037\u010d\040\u0104\041\u010c\001\002\000\046\017\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027" +
    "\uff8c\030\u010e\031\u0105\032\uff8c\033\uff8c\034\uff8c\035\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\041\uff8c\001\002\000\056\035" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7" +
    "\102\uffa7\103\uffa7\001\002\000\006\006\u012c\007\u012d\001" +
    "\002\000\056\035\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071" +
    "\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab" +
    "\100\uffab\101\uffab\102\uffab\103\uffab\001\002\000\056\035" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073" +
    "\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101\uffac" +
    "\102\uffac\103\uffac\001\002\000\004\014\u012f\001\002\000" +
    "\004\012\357\001\002\000\004\015\u0131\001\002\000\056" +
    "\035\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101" +
    "\uffa5\102\uffa5\103\uffa5\001\002\000\006\006\u0133\007\u0134" +
    "\001\002\000\056\035\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba" +
    "\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077" +
    "\uffba\100\uffba\101\uffba\102\uffba\103\uffba\001\002\000\056" +
    "\035\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb" +
    "\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101" +
    "\uffbb\102\uffbb\103\uffbb\001\002\000\004\005\u0136\001\002" +
    "\000\056\035\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100" +
    "\uffb3\101\uffb3\102\uffb3\103\uffb3\001\002\000\006\006\u0138" +
    "\007\u0139\001\002\000\056\035\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8" +
    "\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\001\002" +
    "\000\056\035\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9" +
    "\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100" +
    "\uffb9\101\uffb9\102\uffb9\103\uffb9\001\002\000\004\014\u013b" +
    "\001\002\000\004\012\357\001\002\000\004\015\u013d\001" +
    "\002\000\056\035\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\101\uffa6\102\uffa6\103\uffa6\001\002\000\006\006" +
    "\u013f\007\u0140\001\002\000\056\035\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067" +
    "\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6" +
    "\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\001" +
    "\002\000\056\035\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7" +
    "\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7" +
    "\100\uffb7\101\uffb7\102\uffb7\103\uffb7\001\002\000\006\002" +
    "\ufffe\034\ufffe\001\002\000\006\002\uffff\034\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\012\002\007\003\003\004\004\005\005\001" +
    "\001\000\006\004\u0141\005\u0140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\023\041\024\035\025\062\026\030" +
    "\027\021\030\047\031\050\032\071\033\060\034\056\035" +
    "\054\036\074\037\070\040\022\041\023\042\044\043\042" +
    "\044\063\045\046\046\027\047\052\050\066\051\045\052" +
    "\064\053\072\054\024\055\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\024" +
    "\136\025\062\026\030\027\021\030\047\031\050\032\071" +
    "\033\060\034\056\035\054\036\074\037\070\040\022\041" +
    "\023\042\044\043\042\044\063\045\046\046\027\047\052" +
    "\050\066\051\045\052\064\053\072\054\024\055\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\142\007\146\010\145\011\144\012\141\020\143\021" +
    "\140\022\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\231\010\145\011\144\012\141\020\143\021" +
    "\140\022\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\023\275\024\035\025\062\026\030" +
    "\027\021\030\047\031\050\032\071\033\060\034\056\035" +
    "\054\036\074\037\070\040\022\041\023\042\044\043\042" +
    "\044\063\045\046\046\027\047\052\050\066\051\045\052" +
    "\064\053\072\054\024\055\031\001\001\000\070\023\246" +
    "\024\035\025\062\026\030\027\021\030\047\031\050\032" +
    "\071\033\060\034\056\035\054\036\074\037\070\040\022" +
    "\041\023\042\044\043\042\044\063\045\046\046\027\047" +
    "\052\050\066\051\045\052\064\053\072\054\024\055\031" +
    "\001\001\000\070\023\240\024\035\025\062\026\030\027" +
    "\021\030\047\031\050\032\071\033\060\034\056\035\054" +
    "\036\074\037\070\040\022\041\023\042\044\043\042\044" +
    "\063\045\046\046\027\047\052\050\066\051\045\052\064" +
    "\053\072\054\024\055\031\001\001\000\002\001\001\000" +
    "\070\023\222\024\035\025\062\026\030\027\021\030\047" +
    "\031\050\032\071\033\060\034\056\035\054\036\074\037" +
    "\070\040\022\041\023\042\044\043\042\044\063\045\046" +
    "\046\027\047\052\050\066\051\045\052\064\053\072\054" +
    "\024\055\031\001\001\000\070\023\207\024\035\025\062" +
    "\026\030\027\021\030\047\031\050\032\071\033\060\034" +
    "\056\035\054\036\074\037\070\040\022\041\023\042\044" +
    "\043\042\044\063\045\046\046\027\047\052\050\066\051" +
    "\045\052\064\053\072\054\024\055\031\001\001\000\070" +
    "\023\160\024\035\025\062\026\030\027\021\030\047\031" +
    "\050\032\071\033\060\034\056\035\054\036\074\037\070" +
    "\040\022\041\023\042\044\043\042\044\063\045\046\046" +
    "\027\047\052\050\066\051\045\052\064\053\072\054\024" +
    "\055\031\001\001\000\066\024\136\025\062\026\030\027" +
    "\021\030\047\031\050\032\071\033\060\034\056\035\054" +
    "\036\074\037\070\040\022\041\023\042\044\043\042\044" +
    "\063\045\046\046\027\047\052\050\066\051\045\052\064" +
    "\053\072\054\024\055\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\024\136\025\062" +
    "\026\030\027\021\030\047\031\050\032\071\033\060\034" +
    "\056\035\054\036\074\037\070\040\022\041\023\042\044" +
    "\043\042\044\063\045\046\046\027\047\052\050\066\051" +
    "\045\052\064\053\072\054\024\055\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\024\136\025\062\026\030\027\021\030\047\031\050" +
    "\032\071\033\060\034\056\035\054\036\074\037\070\040" +
    "\022\041\023\042\044\043\042\044\063\045\046\046\027" +
    "\047\052\050\066\051\045\052\064\053\072\054\024\055" +
    "\031\001\001\000\022\006\224\007\146\010\145\011\144" +
    "\012\141\020\143\021\140\022\150\001\001\000\020\007" +
    "\231\010\145\011\144\012\141\020\143\021\140\022\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\024\136\025\062" +
    "\026\030\027\021\030\047\031\050\032\071\033\060\034" +
    "\056\035\054\036\074\037\070\040\022\041\023\042\044" +
    "\043\042\044\063\045\046\046\027\047\052\050\066\051" +
    "\045\052\064\053\072\054\024\055\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\024\136\025\062\026\030" +
    "\027\021\030\047\031\050\032\071\033\060\034\056\035" +
    "\054\036\074\037\070\040\022\041\023\042\044\043\042" +
    "\044\063\045\046\046\027\047\052\050\066\051\045\052" +
    "\064\053\072\054\024\055\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\024\136\025" +
    "\062\026\030\027\021\030\047\031\050\032\071\033\060" +
    "\034\056\035\054\036\074\037\070\040\022\041\023\042" +
    "\044\043\042\044\063\045\046\046\027\047\052\050\066" +
    "\051\045\052\064\053\072\054\024\055\031\001\001\000" +
    "\010\013\277\014\302\015\301\001\001\000\006\014\343" +
    "\015\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\311\017\312\001\001\000\004\017\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\057\373\060\u0101\061\376" +
    "\062\363\063\371\064\372\065\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\060\u0128\061" +
    "\376\062\363\063\371\064\372\065\361\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\060\u0123\061\376\062\363" +
    "\063\371\064\372\065\361\001\001\000\016\060\u0122\061" +
    "\376\062\363\063\371\064\372\065\361\001\001\000\002" +
    "\001\001\000\016\060\u0121\061\376\062\363\063\371\064" +
    "\372\065\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\060\u0120\061\376\062\363\063" +
    "\371\064\372\065\361\001\001\000\002\001\001\000\016" +
    "\060\u011f\061\376\062\363\063\371\064\372\065\361\001" +
    "\001\000\016\060\u011e\061\376\062\363\063\371\064\372" +
    "\065\361\001\001\000\016\060\u011d\061\376\062\363\063" +
    "\371\064\372\065\361\001\001\000\016\060\u011c\061\376" +
    "\062\363\063\371\064\372\065\361\001\001\000\016\060" +
    "\u011b\061\376\062\363\063\371\064\372\065\361\001\001" +
    "\000\016\060\u011a\061\376\062\363\063\371\064\372\065" +
    "\361\001\001\000\016\060\u0119\061\376\062\363\063\371" +
    "\064\372\065\361\001\001\000\016\060\u0118\061\376\062" +
    "\363\063\371\064\372\065\361\001\001\000\002\001\001" +
    "\000\016\060\u0117\061\376\062\363\063\371\064\372\065" +
    "\361\001\001\000\016\060\u0116\061\376\062\363\063\371" +
    "\064\372\065\361\001\001\000\016\060\u0115\061\376\062" +
    "\363\063\371\064\372\065\361\001\001\000\016\060\u0114" +
    "\061\376\062\363\063\371\064\372\065\361\001\001\000" +
    "\016\060\u0113\061\376\062\363\063\371\064\372\065\361" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\060\u0127" +
    "\061\376\062\363\063\371\064\372\065\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\u013b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_GXML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_GXML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_GXML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

private ObjetoEntrada entrada;
private ArrayList<Instruccion> lista_instrucciones;
private boolean traducir;
private boolean importar;

private Entorno entorno_global;
private Simbolo salida;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

public void setTraducir(boolean p_traducir)
{
    traducir = p_traducir;
}

public boolean getTraducir()
{
    return traducir;
}

public void setImportar(boolean p_importar)
{
    importar = p_importar;
}

public boolean getImportar()
{
    return importar;
}

public void setEntornoGlobal(Entorno p_Entorno_Global)
{
    entorno_global = p_Entorno_Global;
}

public Entorno getEntornoGlobal()
{
    return entorno_global;
}

public void setSalida(Simbolo p_salida)
{
    salida = p_salida;
}

public Simbolo getSalida()
{
    return salida;
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s)
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico GMXL");
    error_encontrado.setDescripcion(s.value.toString() + "  " + s.sym );
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);        
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico GXML");
    error_encontrado.setDescripcion("Error del cual no es posible recuperarse: " + s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);  
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_GXML$actions {
  private final Sintactico_GXML parser;

  /** Constructor */
  CUP$Sintactico_GXML$actions(Sintactico_GXML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_GXML$do_action_part00000000(
    int                        CUP$Sintactico_GXML$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_GXML$parser,
    java.util.Stack            CUP$Sintactico_GXML$stack,
    int                        CUP$Sintactico_GXML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_GXML$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_GXML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		Instruccion start_val = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_GXML$parser.done_parsing();
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO_GXML 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		ArrayList<Instruccion> n = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                if(importar == true && traducir == true)
                {
                    RESULT = new Sentencia_Inicio(n,entrada,importar);
                    salida = RESULT.ejecutar(entorno_global,"");
                }
                else if(importar == true && traducir == false)
                {
                    RESULT = new Sentencia_Inicio(n,entrada,importar);
                    salida = RESULT.ejecutar(entorno_global, new FS_Arreglo(), entrada);
                }
                else if( importar == false && traducir == true)
                {
                    RESULT = new Sentencia_Inicio(n,entrada,importar);
                    salida = RESULT.ejecutar(null,"");
                }
                else if( importar == false && traducir == false)
                {
                    RESULT = new Sentencia_Inicio(n,entrada,importar);
                    salida = RESULT.ejecutar(null, new FS_Arreglo(), entrada);
                }
            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO_GXML ::= CUERPO_GXML SENTENCIA_IMPORTAR 
            {
              ArrayList<Instruccion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<Instruccion> n1 = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = n1;
                        RESULT.add(n2);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CUERPO_GXML",1, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO_GXML ::= CUERPO_GXML TAG_VENTANA 
            {
              ArrayList<Instruccion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<Instruccion> n1 = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = n1;
                        RESULT.add(n2);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CUERPO_GXML",1, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO_GXML ::= SENTENCIA_IMPORTAR 
            {
              ArrayList<Instruccion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new ArrayList<Instruccion>();
                        RESULT.add(n);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CUERPO_GXML",1, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_GXML ::= TAG_VENTANA 
            {
              ArrayList<Instruccion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new ArrayList<Instruccion>();
                        RESULT.add(n);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CUERPO_GXML",1, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA_IMPORTAR ::= s_less r_importar s_greather contenido_tag s_less s_div r_importar s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                            RESULT = new Sentencia_Importar(n2,n1right,n1left);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TAG_VENTANA ::= s_less r_ventana LISTA_ELEMENTOS s_greather LISTA_CONTENIDO_VENTANA s_less s_div r_ventana s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		ArrayList<Instruccion> n3 = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                    RESULT = new Sentencia_Ventana(n2,n3,n1right,n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_VENTANA",3, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TAG_VENTANA ::= s_less r_ventana LISTA_ELEMENTOS s_greather s_less s_div r_ventana s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).value;
		
                    RESULT = new Sentencia_Ventana(n2,n1right,n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_VENTANA",3, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_CONTENIDO_VENTANA ::= LISTA_CONTENIDO_VENTANA CONTENIDO_VENTANA 
            {
              ArrayList<Instruccion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<Instruccion> n1 = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                                    RESULT = n1;
                                    RESULT.add(n2);
                                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_CONTENIDO_VENTANA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_CONTENIDO_VENTANA ::= CONTENIDO_VENTANA 
            {
              ArrayList<Instruccion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                                    RESULT = new ArrayList<Instruccion>();
                                    RESULT.add(n);
                                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_CONTENIDO_VENTANA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO_VENTANA ::= TAG_CONTENEDOR 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = n;
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO_VENTANA ::= TAG_TEXTO 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = n;
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO_VENTANA ::= TAG_CONTROL 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = n;
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO_VENTANA ::= TAG_BOTON 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = n;
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_VENTANA ::= TAG_ENVIAR 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = n;
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_VENTANA ::= TAG_MULTIMEDIA 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = n;
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TAG_CONTENEDOR ::= s_less r_contenedor LISTA_ELEMENTOS s_greather LISTA_CONTENIDO_VENTANA s_less s_div r_contenedor s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		ArrayList<Instruccion> n3 = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                        RESULT = new Sentencia_Contenedor(n2,n3,n1right,n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_CONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TAG_CONTENEDOR ::= s_less r_contenedor LISTA_ELEMENTOS s_greather s_less s_div r_contenedor s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).value;
		
                        RESULT = new Sentencia_Contenedor(n2,n1right,n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_CONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TAG_TEXTO ::= s_less r_texto LISTA_ELEMENTOS s_greather contenido_tag s_less s_div r_texto s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                    RESULT = new Sentencia_Texto(n2,n3,n1right,n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_TEXTO",7, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TAG_TEXTO ::= s_less r_texto LISTA_ELEMENTOS s_greather s_less s_div r_texto s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).value;
		
                    RESULT = new Sentencia_Texto(n2,n1right,n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_TEXTO",7, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TAG_CONTROL ::= s_less r_control LISTA_ELEMENTOS s_greather CONTENIDO_CONTROL s_less s_div r_control s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		ArrayList<GXML_Elemento> n3 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                    RESULT = new Sentencia_Controlador(n2,n3,n1right,n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_CONTROL",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TAG_CONTROL ::= s_less r_control LISTA_ELEMENTOS s_greather s_less s_div r_control s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).value;
		
                    RESULT = new Sentencia_Controlador(n2,n1right,n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_CONTROL",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TAG_BOTON ::= s_less r_boton LISTA_ELEMENTOS s_greather contenido_tag s_less s_div r_boton s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                    RESULT = new Sentencia_Boton(n2,n3,n1right,n1left,false);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_BOTON",14, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TAG_BOTON ::= s_less r_boton LISTA_ELEMENTOS s_greather s_less r_texto ELEMENTO_NOMBRE s_greather contenido_tag s_less s_div r_texto s_greather s_less s_div r_boton s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-16)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-16)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-16)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-14)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-14)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-14)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).value;
		
                    RESULT = new Sentencia_Boton(n2,n3,n1right,n1left,false);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_BOTON",14, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-16)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TAG_BOTON ::= s_less r_boton LISTA_ELEMENTOS s_greather s_less s_div r_boton s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).value;
		
                    RESULT = new Sentencia_Boton(n2,n1right,n1left,false);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_BOTON",14, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TAG_ENVIAR ::= s_less r_enviar LISTA_ELEMENTOS s_greather contenido_tag s_less s_div r_enviar s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                    RESULT = new Sentencia_Boton(n2,n3,n1right,n1left,true);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_ENVIAR",15, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TAG_ENVIAR ::= s_less r_enviar LISTA_ELEMENTOS s_greather s_less r_texto ELEMENTO_NOMBRE s_greather contenido_tag s_less s_div r_texto s_greather s_less s_div r_enviar s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-16)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-16)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-16)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-14)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-14)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-14)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).value;
		
                    RESULT = new Sentencia_Boton(n2,n3,n1right,n1left,true);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_ENVIAR",15, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-16)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TAG_ENVIAR ::= s_less r_enviar LISTA_ELEMENTOS s_greather s_less s_div r_enviar s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).value;
		
                    RESULT = new Sentencia_Boton(n2,n1right,n1left,true);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_ENVIAR",15, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TAG_MULTIMEDIA ::= s_less r_multimedia LISTA_ELEMENTOS s_greather s_less s_div r_multimedia s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).value;
		
                        RESULT = new Sentencia_Multimedia(n2,n1right,n1left,entrada);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_MULTIMEDIA",16, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO_CONTROL ::= CONTENIDO_CONTROL TAG_DEFECTO 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n1 = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = n2;
                            RESULT.add(n1);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",9, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDO_CONTROL ::= CONTENIDO_CONTROL TAG_LISTA_DATOS 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<GXML_Elemento> n1 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = n1;
                            RESULT.addAll(n2);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",9, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDO_CONTROL ::= TAG_LISTA_DATOS 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		ArrayList<GXML_Elemento> n = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = n;
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",9, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO_CONTROL ::= TAG_DEFECTO 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = new ArrayList<GXML_Elemento>();
                            RESULT.add(n);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",9, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TAG_DEFECTO ::= s_less r_defecto s_greather contenido_tag s_less s_div r_defecto s_greather 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                        RESULT = new GXML_Elemento("defecto", Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2, n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_DEFECTO",10, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TAG_LISTA_DATOS ::= s_less r_listadatos s_greather LISTA_DATOS s_less s_div r_listadatos s_greather 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                            RESULT = n2;
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_LISTA_DATOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TAG_LISTA_DATOS ::= s_less r_listadatos s_greather s_less s_div r_listadatos s_greather 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).value;
		
                            RESULT = new ArrayList<GXML_Elemento>();
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_LISTA_DATOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_DATOS ::= LISTA_DATOS TAG_DATO 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<GXML_Elemento> n1 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n2 = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = n1;
                        RESULT.add(n2);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA_DATOS ::= TAG_DATO 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new ArrayList<GXML_Elemento>();
                        RESULT.add(n);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TAG_DATO ::= s_less r_dato s_greather contenido_tag s_less s_div r_dato s_greather 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                    RESULT = new GXML_Elemento("dato", Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2, n1right, n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_DATO",13, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_ELEMENTOS ::= LISTA_ELEMENTOS ELEMENTO 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<GXML_Elemento> n1 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n2 = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = n1;
                        RESULT.add(n2);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",17, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_ELEMENTOS ::= ELEMENTO 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new ArrayList<GXML_Elemento>();
                        RESULT.add(n);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",17, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO ::= ELEMENTO_ID 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTO ::= ELEMENTO_NOMBRE 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTO ::= ELEMENTO_TIPO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTO ::= ELEMENTO_COLOR 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTO ::= ELEMENTO_ACCIONINICIAL 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTO ::= ELEMENTO_ACCIONFINAL 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTO ::= ELEMENTO_POSX 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTO ::= ELEMENTO_POSY 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTO ::= ELEMENTO_ALTO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTO ::= ELEMENTO_ANCHO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTO ::= ELEMENTO_BORDE 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTO ::= ELEMENTO_FUENTE 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO ::= ELEMENTO_TAM 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTO ::= ELEMENTO_NEGRITA 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTO ::= ELEMENTO_CURSIVA 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTO ::= ELEMENTO_TEXTO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEMENTO ::= ELEMENTO_NUMERICO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEMENTO ::= ELEMENTO_TEXTOAREA 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEMENTO ::= ELEMENTO_DESPLEGABLE 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELEMENTO ::= ELEMENTO_MAXIMO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELEMENTO ::= ELEMENTO_MINIMO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELEMENTO ::= ELEMENTO_ACCION 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELEMENTO ::= ELEMENTO_REFERENCIA 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELEMENTO ::= ELEMENTO_PATH 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELEMENTO ::= ELEMENTO_AUTOREPRODUCCION 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELEMENTO_ID ::= r_id s_equal cadena 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ID",19, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELEMENTO_NOMBRE ::= r_nombre s_equal cadena 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NOMBRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELEMENTO_TIPO ::= r_tipo s_equal cadena 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TIPO",21, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELEMENTO_POSX ::= r_posx s_equal entero 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_POSX",25, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELEMENTO_POSX ::= r_posx s_equal decimal 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.decimal, Double.parseDouble(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_POSX",25, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELEMENTO_POSY ::= r_posy s_equal entero 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_POSY",26, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELEMENTO_POSY ::= r_posy s_equal decimal 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.decimal, Double.parseDouble(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_POSY",26, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELEMENTO_ANCHO ::= r_alto s_equal entero 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ANCHO",28, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELEMENTO_ANCHO ::= r_alto s_equal decimal 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.decimal, Double.parseDouble(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ANCHO",28, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELEMENTO_ALTO ::= r_ancho s_equal entero 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ALTO",27, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELEMENTO_ALTO ::= r_ancho s_equal decimal 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.decimal, Double.parseDouble(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ALTO",27, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELEMENTO_BORDE ::= r_borde s_equal booleano 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, n2.equalsIgnoreCase("verdadero") ? true : false, n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BORDE",29, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELEMENTO_COLOR ::= r_color s_equal cadena 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_COLOR",22, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELEMENTO_FUENTE ::= r_fuente s_equal cadena 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_FUENTE",30, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELEMENTO_TAM ::= r_tamano s_equal entero 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAM",31, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELEMENTO_TAM ::= r_tamano s_equal decimal 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Double.parseDouble(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAM",31, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELEMENTO_NEGRITA ::= r_negrita s_equal booleano 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, n2.equalsIgnoreCase("verdadero") ? true : false, n1right, n1left);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NEGRITA",32, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELEMENTO_CURSIVA ::= r_cursiva s_equal booleano 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, n2.equalsIgnoreCase("verdadero") ? true : false, n1right, n1left);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CURSIVA",33, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELEMENTO_MAXIMO ::= r_maximo s_equal entero 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MAXIMO",38, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTO_MAXIMO ::= r_maximo s_equal decimal 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Double.parseDouble(n2), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MAXIMO",38, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTO_MINIMO ::= r_minimo s_equal entero 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, Integer.parseInt(n2), n1right, n1left);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MINIMO",39, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTO_MINIMO ::= r_minimo s_equal decimal 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, Double.parseDouble(n2), n1right, n1left);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MINIMO",39, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELEMENTO_REFERENCIA ::= r_referencia s_equal cadena 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_REFERENCIA",41, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELEMENTO_ACCIONINICIAL ::= r_accioninicial s_equal s_key_open SENTENCIA_LLAMADA s_key_close 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		
                                RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.identificador, n2, n1right, n1left);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ACCIONINICIAL",23, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELEMENTO_ACCIONFINAL ::= r_accionfinal s_equal s_key_open SENTENCIA_LLAMADA s_key_close 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		
                                RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.identificador, n2, n1right, n1left);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ACCIONFINAL",24, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELEMENTO_ACCION ::= r_accion s_equal s_key_open SENTENCIA_LLAMADA s_key_close 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.identificador, n2, n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ACCION",40, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELEMENTO_PATH ::= r_path s_equal cadena 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_PATH",42, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELEMENTO_AUTOREPRODUCCION ::= r_autoreproduccion s_equal booleano 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                                    RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, n2, n1right, n1left);
                                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_AUTOREPRODUCCION",43, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_LLAMADA ::= identificador s_par_open LISTA_EXPRESIONES s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_LLAMADA");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n2);
                         
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",44, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_LLAMADA ::= identificador s_par_open s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_LLAMADA");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                         
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",44, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES s_coma EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = n1;
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",45, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(nright));
                            nodo_expresion.setColumna(String.valueOf(nleft));
                            nodo_expresion.getHijos().add(n);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_EXPRESIONES");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",45, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPRESION_ARITMETICA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_ARITMETICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPRESION_RELACIONAL 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_RELACIONAL");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPRESION_UNARIA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_UNARIA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPRESION_LOGICA 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_LOGICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= s_par_open EXPRESION s_par_close 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= DATO_PRIMITIVO 
            {
              Nodo_AST_FS RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION_ARITMETICA ::= EXPRESION s_plus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",47, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION_ARITMETICA ::= EXPRESION s_minus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",47, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION_ARITMETICA ::= EXPRESION s_mul EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",47, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION_ARITMETICA ::= EXPRESION s_div EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",47, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION_ARITMETICA ::= EXPRESION s_mod EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",47, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION_ARITMETICA ::= EXPRESION s_to EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",47, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION_ARITMETICA ::= EXPRESION s_increment 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",47, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION_ARITMETICA ::= EXPRESION s_decrement 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",47, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION_UNARIA ::= s_minus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",48, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION_UNARIA ::= s_plus EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",48, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION_LOGICA ::= EXPRESION s_or EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",49, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION_LOGICA ::= EXPRESION s_and EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",49, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION_LOGICA ::= s_not EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",49, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION_RELACIONAL ::= EXPRESION s_greather EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",50, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION_RELACIONAL ::= EXPRESION s_less EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",50, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION_RELACIONAL ::= EXPRESION s_greather_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",50, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION_RELACIONAL ::= EXPRESION s_less_equal EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",50, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION_RELACIONAL ::= EXPRESION s_compare EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",50, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION_RELACIONAL ::= EXPRESION s_diferent EXPRESION 
            {
              Nodo_AST_FS RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		Nodo_AST_FS n1 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Nodo_AST_FS n2 = (Nodo_AST_FS)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",50, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DATO_PRIMITIVO ::= r_nulo 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.nulo.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DATO_PRIMITIVO ::= booleano 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.booleano.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DATO_PRIMITIVO ::= entero 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.entero.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DATO_PRIMITIVO ::= decimal 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.decimal.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DATO_PRIMITIVO ::= caracter 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.caracter.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft)); 
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DATO_PRIMITIVO ::= cadena 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.cadena.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DATO_PRIMITIVO ::= identificador 
            {
              Nodo_AST_FS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.identificador.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_GXML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_GXML$do_action(
    int                        CUP$Sintactico_GXML$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_GXML$parser,
    java.util.Stack            CUP$Sintactico_GXML$stack,
    int                        CUP$Sintactico_GXML$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_GXML$do_action_part00000000(
                               CUP$Sintactico_GXML$act_num,
                               CUP$Sintactico_GXML$parser,
                               CUP$Sintactico_GXML$stack,
                               CUP$Sintactico_GXML$top);
    }
}

}
