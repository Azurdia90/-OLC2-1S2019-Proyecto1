
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package GXML_ANALIZADORES;

import java.io.File;
import java_cup.runtime.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import UI.ObjetoEntrada;
import GXML_INSTRUCCION.*;
import FS_TABLA_SIMBOLOS.Tabla_Enums;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_GXML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tabla_Simbolos_GXML_CUP.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico_GXML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico_GXML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_GXML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\004\012\000\002\005\013\000\002\005\012\000" +
    "\002\006\004\000\002\006\003\000\002\007\003\000\002" +
    "\010\012\000\002\011\004\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\013\005\000\002\014\005\000\002\014\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\037\007\001\002\000\006\002\000\037" +
    "\007\001\002\000\006\002\ufffd\037\ufffd\001\002\000\006" +
    "\002\ufffc\037\ufffc\001\002\000\006\047\013\050\012\001" +
    "\002\000\004\002\011\001\002\000\004\002\001\001\002" +
    "\000\006\063\023\064\047\001\002\000\004\040\014\001" +
    "\002\000\004\012\015\001\002\000\004\037\016\001\002" +
    "\000\004\030\017\001\002\000\004\047\020\001\002\000" +
    "\004\040\021\001\002\000\006\002\ufffb\037\ufffb\001\002" +
    "\000\010\040\uffe4\063\uffe4\064\uffe4\001\002\000\004\046" +
    "\111\001\002\000\010\040\uffdd\063\uffdd\064\uffdd\001\002" +
    "\000\010\040\uffe1\063\uffe1\064\uffe1\001\002\000\010\040" +
    "\uffe2\063\uffe2\064\uffe2\001\002\000\010\040\uffde\063\uffde" +
    "\064\uffde\001\002\000\010\040\ufff2\063\ufff2\064\ufff2\001" +
    "\002\000\010\040\065\063\023\064\047\001\002\000\010" +
    "\040\ufff1\063\ufff1\064\ufff1\001\002\000\010\040\uffdf\063" +
    "\uffdf\064\uffdf\001\002\000\010\040\uffdb\063\uffdb\064\uffdb" +
    "\001\002\000\010\040\uffe5\063\uffe5\064\uffe5\001\002\000" +
    "\010\040\uffeb\063\uffeb\064\uffeb\001\002\000\010\040\uffe6" +
    "\063\uffe6\064\uffe6\001\002\000\010\040\uffd9\063\uffd9\064" +
    "\uffd9\001\002\000\010\040\uffe7\063\uffe7\064\uffe7\001\002" +
    "\000\010\040\ufff0\063\ufff0\064\ufff0\001\002\000\010\040" +
    "\ufff3\063\ufff3\064\ufff3\001\002\000\010\040\uffef\063\uffef" +
    "\064\uffef\001\002\000\010\040\uffe3\063\uffe3\064\uffe3\001" +
    "\002\000\010\040\uffda\063\uffda\064\uffda\001\002\000\004" +
    "\046\061\001\002\000\010\040\uffdc\063\uffdc\064\uffdc\001" +
    "\002\000\010\040\uffee\063\uffee\064\uffee\001\002\000\010" +
    "\040\uffe9\063\uffe9\064\uffe9\001\002\000\010\040\uffec\063" +
    "\uffec\064\uffec\001\002\000\010\040\uffe8\063\uffe8\064\uffe8" +
    "\001\002\000\010\040\uffed\063\uffed\064\uffed\001\002\000" +
    "\010\040\uffd8\063\uffd8\064\uffd8\001\002\000\010\040\uffe0" +
    "\063\uffe0\064\uffe0\001\002\000\010\040\uffea\063\uffea\064" +
    "\uffea\001\002\000\006\065\062\066\063\001\002\000\010" +
    "\040\uffd6\063\uffd6\064\uffd6\001\002\000\010\040\uffd5\063" +
    "\uffd5\064\uffd5\001\002\000\010\040\ufff4\063\ufff4\064\ufff4" +
    "\001\002\000\004\037\071\001\002\000\004\037\ufff6\001" +
    "\002\000\004\037\ufff7\001\002\000\004\037\105\001\002" +
    "\000\006\030\072\051\073\001\002\000\004\050\102\001" +
    "\002\000\006\063\023\064\047\001\002\000\010\040\075" +
    "\063\023\064\047\001\002\000\004\037\076\001\002\000" +
    "\004\030\077\001\002\000\004\051\100\001\002\000\004" +
    "\040\101\001\002\000\004\037\ufff5\001\002\000\004\040" +
    "\103\001\002\000\006\002\ufff9\037\ufff9\001\002\000\004" +
    "\037\ufff8\001\002\000\006\030\106\051\073\001\002\000" +
    "\004\050\107\001\002\000\004\040\110\001\002\000\006" +
    "\002\ufffa\037\ufffa\001\002\000\004\010\112\001\002\000" +
    "\010\040\uffd7\063\uffd7\064\uffd7\001\002\000\006\002\ufffe" +
    "\037\ufffe\001\002\000\006\002\uffff\037\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\012\002\007\003\003\004\004\005\005\001" +
    "\001\000\006\004\113\005\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\011\030\012\042\013\027\014\031" +
    "\015\041\016\043\017\050\020\054\021\052\022\035\023" +
    "\057\024\051\025\053\026\040\027\036\030\034\031\021" +
    "\032\044\033\025\034\024\035\056\036\032\037\026\040" +
    "\023\041\047\042\033\043\045\044\037\045\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\012\063\013\027\014\031\015" +
    "\041\016\043\017\050\020\054\021\052\022\035\023\057" +
    "\024\051\025\053\026\040\027\036\030\034\031\021\032" +
    "\044\033\025\034\024\035\056\036\032\037\026\040\023" +
    "\041\047\042\033\043\045\044\037\045\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\067\007\066\010\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\103\010" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\011\073\012\042\013\027\014\031\015\041\016\043\017" +
    "\050\020\054\021\052\022\035\023\057\024\051\025\053" +
    "\026\040\027\036\030\034\031\021\032\044\033\025\034" +
    "\024\035\056\036\032\037\026\040\023\041\047\042\033" +
    "\043\045\044\037\045\055\001\001\000\072\012\063\013" +
    "\027\014\031\015\041\016\043\017\050\020\054\021\052" +
    "\022\035\023\057\024\051\025\053\026\040\027\036\030" +
    "\034\031\021\032\044\033\025\034\024\035\056\036\032" +
    "\037\026\040\023\041\047\042\033\043\045\044\037\045" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_GXML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_GXML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_GXML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

private ObjetoEntrada entrada;
private ArrayList<Instruccion> lista_instrucciones;
private boolean importar;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

//public void setRaiz(Nodo_AST_FS p_raiz)
//{
    //raiz = p_raiz;
//}

//public Nodo_AST_FS getRaiz()
//{
    //return raiz;
//}

public void setImportar(boolean p_importar)
{
    importar = p_importar;
}

public boolean getImportar()
{
    return importar;
}

//public void ejecutar_AST()
//{
    //if(raiz != null)
    //{
        //Grafica_AST_FS grafica = new Grafica_AST_FS(raiz);
        //grafica.graficar_AST();
        //AST_FS ejecutar = new AST_FS(raiz,entrada,importar);
        //ejecutar.ejecutar_AST();
    //}    
//}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s)
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico GMXL");
    error_encontrado.setDescripcion(s.value.toString() + "  " + s.sym );
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);        
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico GXML");
    error_encontrado.setDescripcion("Error del cual no es posible recuperarse: " + s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);  
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_GXML$actions {
  private final Sintactico_GXML parser;

  /** Constructor */
  CUP$Sintactico_GXML$actions(Sintactico_GXML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_GXML$do_action_part00000000(
    int                        CUP$Sintactico_GXML$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_GXML$parser,
    java.util.Stack            CUP$Sintactico_GXML$stack,
    int                        CUP$Sintactico_GXML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_GXML$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_GXML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		Instruccion start_val = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_GXML$parser.done_parsing();
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO_GXML 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		ArrayList<Instruccion> n = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                JOptionPane.showMessageDialog(null,"Archivo reconozido exitosamentes");
                RESULT = new Sentencia_Inicio(n);
                RESULT.ejecutar(null,entrada);            
            
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO_GXML ::= CUERPO_GXML SENTENCIA_IMPORTAR 
            {
              ArrayList<Instruccion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<Instruccion> n1 = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = n1;
                        RESULT.add(n2);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CUERPO_GXML",1, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO_GXML ::= CUERPO_GXML TAG_VENTANA 
            {
              ArrayList<Instruccion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<Instruccion> n1 = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = n1;
                        RESULT.add(n2);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CUERPO_GXML",1, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO_GXML ::= SENTENCIA_IMPORTAR 
            {
              ArrayList<Instruccion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new ArrayList<Instruccion>();
                        RESULT.add(n);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CUERPO_GXML",1, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_GXML ::= TAG_VENTANA 
            {
              ArrayList<Instruccion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new ArrayList<Instruccion>();
                        RESULT.add(n);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CUERPO_GXML",1, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA_IMPORTAR ::= s_less r_importar s_greather contenido_tag s_less s_div r_importar s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-4)).value;
		
                            RESULT = new Sentencia_Importar(n2,n1right,n1left);
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TAG_VENTANA ::= s_less r_ventana LISTA_ELEMENTOS s_greather LISTA_CONTENIDO_VENTANA s_less s_div r_ventana s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-6)).value;
		
                    RESULT = new Sentencia_Ventana(n2,n1right,n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_VENTANA",3, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TAG_VENTANA ::= s_less r_ventana LISTA_ELEMENTOS s_greather s_less s_div r_ventana s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).value;
		
                    RESULT = new Sentencia_Ventana(n2,n1right,n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_VENTANA",3, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_CONTENIDO_VENTANA ::= LISTA_CONTENIDO_VENTANA CONTENIDO_VENTANA 
            {
              ArrayList<Instruccion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<Instruccion> n1 = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                                    RESULT = n1;
                                    RESULT.add(n2);
                                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_CONTENIDO_VENTANA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_CONTENIDO_VENTANA ::= CONTENIDO_VENTANA 
            {
              ArrayList<Instruccion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                                    RESULT = new ArrayList<Instruccion>();
                                    RESULT.add(n);
                                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_CONTENIDO_VENTANA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO_VENTANA ::= TAG_CONTENEDOR 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                            RESULT = n;
                        
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TAG_CONTENEDOR ::= s_less r_contenedor LISTA_ELEMENTOS s_greather s_less s_div r_contenedor s_greather 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).right;
		ArrayList<GXML_Elemento> n2 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-5)).value;
		
                    RESULT = new Sentencia_Contenedor(n2,n1right,n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("TAG_CONTENEDOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_ELEMENTOS ::= LISTA_ELEMENTOS ELEMENTO 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).right;
		ArrayList<GXML_Elemento> n1 = (ArrayList<GXML_Elemento>)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n2 = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = n1;
                        RESULT.add(n2);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",7, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_ELEMENTOS ::= ELEMENTO 
            {
              ArrayList<GXML_Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                        RESULT = new ArrayList<GXML_Elemento>();
                        RESULT.add(n);
                    
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",7, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTO ::= ELEMENTO_ID 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTO ::= ELEMENTO_TIPO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO ::= ELEMENTO_COLOR 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEMENTO ::= ELEMENTO_ACCIONINICIAL 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTO ::= ELEMENTO_ACCIONFINAL 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTO ::= ELEMENTO_POSX 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTO ::= ELEMENTO_POSY 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTO ::= ELEMENTO_ALTO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELEMENTO ::= ELEMENTO_ANCHO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELEMENTO ::= ELEMENTO_BORDE 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELEMENTO ::= ELEMENTO_FUENTE 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELEMENTO ::= ELEMENTO_TAM 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELEMENTO ::= ELEMENTO_NEGRITA 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELEMENTO ::= ELEMENTO_CURSIVA 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELEMENTO ::= ELEMENTO_TEXTO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELEMENTO ::= ELEMENTO_NUMERICO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELEMENTO ::= ELEMENTO_TEXTOAREA 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELEMENTO ::= ELEMENTO_DESPLEGABLE 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELEMENTO ::= ELEMENTO_MAXIMO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELEMENTO ::= ELEMENTO_MINIMO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELEMENTO ::= ELEMENTO_ACCION 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELEMENTO ::= ELEMENTO_REFERENCIA 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELEMENTO ::= ELEMENTO_PATH 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELEMENTO ::= ELEMENTO_MUSICA 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTO ::= ELEMENTO_VIDEO 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTO ::= ELEMENTO_IMAGEN 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTO ::= ELEMENTO_AUTOREPRODUCCION 
            {
              GXML_Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		GXML_Elemento n = (GXML_Elemento)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO_ID ::= r_id s_equal cadena 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.peek()).value;
		
                    RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(0,n2.length()-1), n1right, n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ID",9, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTO_TIPO ::= r_tipo s_equal r_principal 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		
                    RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, true, n1right, n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TIPO",10, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTO_TIPO ::= r_tipo s_equal r_secundaria 
            {
              GXML_Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)).value;
		
                    RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, false, n1right, n1left);
                
              CUP$Sintactico_GXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TIPO",10, ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.elementAt(CUP$Sintactico_GXML$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_GXML$stack.peek()), RESULT);
            }
          return CUP$Sintactico_GXML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_GXML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_GXML$do_action(
    int                        CUP$Sintactico_GXML$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_GXML$parser,
    java.util.Stack            CUP$Sintactico_GXML$stack,
    int                        CUP$Sintactico_GXML$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_GXML$do_action_part00000000(
                               CUP$Sintactico_GXML$act_num,
                               CUP$Sintactico_GXML$parser,
                               CUP$Sintactico_GXML$stack,
                               CUP$Sintactico_GXML$top);
    }
}

}
