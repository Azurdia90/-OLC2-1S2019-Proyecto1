package GXML_ANALIZADORES;

import java.io.File;
import java_cup.runtime.*; 

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import java.util.ArrayList;
import javax.swing.JOptionPane;

import UI.ObjetoEntrada;
import GXML_INSTRUCCION.*;
import FS_TABLA_SIMBOLOS.Tabla_Enums;
import FS_TABLA_SIMBOLOS.Entorno;
import FS_TABLA_SIMBOLOS.Simbolo;
import FS_OBJETOS.FS_Arreglo;
import FS_AST.Nodo_AST_FS;

parser code 
{: 

private ObjetoEntrada entrada;
private ArrayList<Instruccion> lista_instrucciones;
private boolean traducir;
private boolean importar;

private Entorno entorno_global;
private Simbolo salida;

public void setObjetoEntrada(ObjetoEntrada p_entrada)
{
    entrada = p_entrada;
}

public ObjetoEntrada getObjetoEntrada()
{
    return entrada;
}

public void setTraducir(boolean p_traducir)
{
    traducir = p_traducir;
}

public boolean getTraducir()
{
    return traducir;
}

public void setImportar(boolean p_importar)
{
    importar = p_importar;
}

public boolean getImportar()
{
    return importar;
}

public void setEntornoGlobal(Entorno p_Entorno_Global)
{
    entorno_global = p_Entorno_Global;
}

public Entorno getEntornoGlobal()
{
    return entorno_global;
}

public void setSalida(Simbolo p_salida)
{
    salida = p_salida;
}

public Simbolo getSalida()
{
    return salida;
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s)
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico GMXL");
    error_encontrado.setDescripcion(s.value.toString() + "  " + s.sym );
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);        
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
{ 
    ERRORES.Nodo_Error error_encontrado = new ERRORES.Nodo_Error();
    error_encontrado.setArchivo(entrada.getNombre_archivo());
    error_encontrado.setIdentificador("Análisis Sintactico GXML");
    error_encontrado.setDescripcion("Error del cual no es posible recuperarse: " + s.value.toString());
    error_encontrado.setLinea(Integer.toString(s.right+1));
    error_encontrado.setColumna(Integer.toString(s.left));
    error_encontrado.setTipo("Sintactico");
    ERRORES.Tabla_Errores.getInstance().add(error_encontrado);  
	//System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 

:}

//expresiones usadas en el lenguaje
terminal String r_nulo;
terminal String booleano;
terminal String decimal;
terminal String entero;
terminal String caracter;
terminal String cadena;
terminal String identificador;
terminal String contenido_tag;

//simbolos utilizados en el lenguaje
terminal String s_key_open;
terminal String s_key_close;
terminal String s_dot;
terminal String s_coma;

//simbolos para expresiones
terminal String s_par_open; 
terminal String s_par_close; 
terminal String s_plus;
terminal String s_minus;
terminal String s_mul;
terminal String s_div;
terminal String s_to;
terminal String s_mod;
terminal String s_increment; 
terminal String s_decrement;
terminal String s_compare;
terminal String s_diferent;
terminal String s_less;
terminal String s_greather;
terminal String s_less_equal;
terminal String s_greather_equal;
terminal String s_or; 
terminal String s_and;
terminal String s_not;
terminal String s_equal;

//palabras reservadas etiquetas
terminal String r_importar;
terminal String r_ventana;
terminal String r_contenedor;
terminal String r_texto;
terminal String r_listadatos;
terminal String r_dato;
terminal String r_control;
terminal String r_defecto;
terminal String r_multimedia;
terminal String r_boton;
terminal String r_enviar;

//funciones parametros
terminal String r_id;
terminal String r_tipo;
terminal String r_color;
terminal String r_accioninicial;
terminal String r_accionfinal;
terminal String r_posx;
terminal String r_posy;
terminal String r_alto;
terminal String r_ancho;
terminal String r_borde;
terminal String r_nombre;
terminal String r_fuente;
terminal String r_tamano;
terminal String r_negrita;
terminal String r_cursiva;
terminal String r_maximo;
terminal String r_minimo;
terminal String r_accion;
terminal String r_referencia;
terminal String r_path;
terminal String r_autoreproduccion;

//NO TERMINALES
non terminal Instruccion INICIO;
non terminal ArrayList<Instruccion> CUERPO_GXML;

non terminal Instruccion SENTENCIA_IMPORTAR;

non terminal Instruccion TAG_VENTANA;
non terminal ArrayList<Instruccion> LISTA_CONTENIDO_VENTANA;
non terminal Instruccion CONTENIDO_VENTANA;

non terminal Instruccion TAG_CONTENEDOR;
non terminal Instruccion TAG_TEXTO;
non terminal Instruccion TAG_CONTROL;
non terminal ArrayList<GXML_Elemento> CONTENIDO_CONTROL;
non terminal GXML_Elemento TAG_DEFECTO;
non terminal ArrayList<GXML_Elemento> TAG_LISTA_DATOS;
non terminal ArrayList<GXML_Elemento> LISTA_DATOS;
non terminal GXML_Elemento TAG_DATO;
non terminal Instruccion TAG_BOTON;
non terminal Instruccion TAG_ENVIAR;
non terminal Instruccion TAG_MULTIMEDIA;

non terminal ArrayList<GXML_Elemento> LISTA_ELEMENTOS;
non terminal GXML_Elemento ELEMENTO;
non terminal GXML_Elemento ELEMENTO_ID;
non terminal GXML_Elemento ELEMENTO_NOMBRE;
non terminal GXML_Elemento ELEMENTO_TIPO;
non terminal GXML_Elemento ELEMENTO_COLOR;
non terminal GXML_Elemento ELEMENTO_ACCIONINICIAL;
non terminal GXML_Elemento ELEMENTO_ACCIONFINAL;
non terminal GXML_Elemento ELEMENTO_POSX;
non terminal GXML_Elemento ELEMENTO_POSY;
non terminal GXML_Elemento ELEMENTO_ALTO;
non terminal GXML_Elemento ELEMENTO_ANCHO;
non terminal GXML_Elemento ELEMENTO_BORDE;
non terminal GXML_Elemento ELEMENTO_FUENTE;
non terminal GXML_Elemento ELEMENTO_TAM;
non terminal GXML_Elemento ELEMENTO_NEGRITA;
non terminal GXML_Elemento ELEMENTO_CURSIVA;
non terminal GXML_Elemento ELEMENTO_TEXTO;
non terminal GXML_Elemento ELEMENTO_NUMERICO;
non terminal GXML_Elemento ELEMENTO_TEXTOAREA;
non terminal GXML_Elemento ELEMENTO_DESPLEGABLE;
non terminal GXML_Elemento ELEMENTO_MAXIMO;
non terminal GXML_Elemento ELEMENTO_MINIMO;
non terminal GXML_Elemento ELEMENTO_ACCION;
non terminal GXML_Elemento ELEMENTO_REFERENCIA;
non terminal GXML_Elemento ELEMENTO_PATH;
non terminal GXML_Elemento ELEMENTO_AUTOREPRODUCCION;

non terminal Nodo_AST_FS SENTENCIA_LLAMADA;

non terminal Nodo_AST_FS LISTA_EXPRESIONES;
non terminal Nodo_AST_FS EXPRESION;
non terminal Nodo_AST_FS EXPRESION_ARITMETICA;
non terminal Nodo_AST_FS EXPRESION_UNARIA;
non terminal Nodo_AST_FS EXPRESION_LOGICA;
non terminal Nodo_AST_FS EXPRESION_RELACIONAL;
non terminal Nodo_AST_FS DATO_PRIMITIVO;

precedence	right 		s_equal;
precedence  right  		identificador;

precedence	left 		s_or;
precedence 	left 		s_and; 
precedence  left        s_compare, s_diferent;
precedence  left        s_greather, s_greather_equal, s_less, s_less_equal;
precedence  left        s_plus, s_minus;
precedence  left        s_mul, s_div;
precedence  left        s_mod, s_to;

precedence  right       s_not; 
precedence  right       s_dot; 
precedence  right       s_increment, s_decrement;

start with INICIO;

INICIO ::=  CUERPO_GXML:n
            {:
                if(importar == true && traducir == true)
                {
                    RESULT = new Sentencia_Inicio(n,entrada,importar);
                    salida = RESULT.ejecutar(entorno_global,"");
                }
                else if(importar == true && traducir == false)
                {
                    RESULT = new Sentencia_Inicio(n,entrada,importar);
                    salida = RESULT.ejecutar(entorno_global, new FS_Arreglo(), entrada);
                }
                else if( importar == false && traducir == true)
                {
                    RESULT = new Sentencia_Inicio(n,entrada,importar);
                    salida = RESULT.ejecutar(null,"");
                }
                else if( importar == false && traducir == false)
                {
                    RESULT = new Sentencia_Inicio(n,entrada,importar);
                    salida = RESULT.ejecutar(null, new FS_Arreglo(), entrada);
                }
            :};

CUERPO_GXML  ::=    CUERPO_GXML:n1 SENTENCIA_IMPORTAR:n2
                    {:
                        RESULT = n1;
                        RESULT.add(n2);
                    :}
                    |CUERPO_GXML:n1 TAG_VENTANA:n2
                    {:
                        RESULT = n1;
                        RESULT.add(n2);
                    :}
                    |SENTENCIA_IMPORTAR:n
                    {:
                        RESULT = new ArrayList<Instruccion>();
                        RESULT.add(n);
                    :}
                    |TAG_VENTANA:n
                    {:
                        RESULT = new ArrayList<Instruccion>();
                        RESULT.add(n);
                    :}; 


/***************************************SENTENCIA IMPORTAR***************************************************/
SENTENCIA_IMPORTAR ::=  s_less r_importar:n1 s_greather contenido_tag:n2 s_less s_div r_importar s_greather
                        {:
                            RESULT = new Sentencia_Importar(n2,n1right,n1left);
                        :};

/***************************************CREAR VENTANAS***************************************************/
TAG_VENTANA ::= s_less:n1 r_ventana LISTA_ELEMENTOS:n2  s_greather LISTA_CONTENIDO_VENTANA:n3 s_less s_div r_ventana s_greather
                {:
                    RESULT = new Sentencia_Ventana(n2,n3,n1right,n1left);
                :}
                |s_less:n1 r_ventana LISTA_ELEMENTOS:n2  s_greather  s_less s_div r_ventana s_greather
                {:
                    RESULT = new Sentencia_Ventana(n2,n1right,n1left);
                :};

/***************************************CONTENIDO VENTANAS***************************************************/
LISTA_CONTENIDO_VENTANA  ::=    LISTA_CONTENIDO_VENTANA:n1 CONTENIDO_VENTANA:n2
                                {:
                                    RESULT = n1;
                                    RESULT.add(n2);
                                :}
                                |CONTENIDO_VENTANA:n
                                {:
                                    RESULT = new ArrayList<Instruccion>();
                                    RESULT.add(n);
                                :};    

CONTENIDO_VENTANA  ::=  TAG_CONTENEDOR:n
                        {:
                            RESULT = n;
                        :}
                        |TAG_TEXTO:n
                        {:
                            RESULT = n;
                        :}
                        |TAG_CONTROL:n
                        {:
                            RESULT = n;
                        :}
                        |TAG_BOTON:n
                        {:
                            RESULT = n;
                        :}
                        |TAG_ENVIAR:n
                        {:
                            RESULT = n;
                        :}
                        |TAG_MULTIMEDIA:n
                        {:
                            RESULT = n;
                        :};

TAG_CONTENEDOR ::=  s_less:n1 r_contenedor LISTA_ELEMENTOS:n2  s_greather LISTA_CONTENIDO_VENTANA:n3 s_less s_div r_contenedor s_greather
                    {:
                        RESULT = new Sentencia_Contenedor(n2,n3,n1right,n1left);
                    :}
                    |s_less:n1 r_contenedor LISTA_ELEMENTOS:n2  s_greather s_less s_div r_contenedor s_greather
                    {:
                        RESULT = new Sentencia_Contenedor(n2,n1right,n1left);
                    :};

TAG_TEXTO ::=   s_less:n1 r_texto LISTA_ELEMENTOS:n2  s_greather contenido_tag:n3 s_less s_div r_texto s_greather
                {:
                    RESULT = new Sentencia_Texto(n2,n3,n1right,n1left);
                :}
                |s_less:n1 r_texto LISTA_ELEMENTOS:n2  s_greather s_less s_div r_texto s_greather
                {:
                    RESULT = new Sentencia_Texto(n2,n1right,n1left);
                :};                    

TAG_CONTROL ::= s_less:n1 r_control LISTA_ELEMENTOS:n2  s_greather CONTENIDO_CONTROL:n3 s_less s_div r_control s_greather
                {:
                    RESULT = new Sentencia_Controlador(n2,n3,n1right,n1left);
                :}
                |s_less:n1 r_control LISTA_ELEMENTOS:n2  s_greather s_less s_div r_control s_greather
                {:
                    RESULT = new Sentencia_Controlador(n2,n1right,n1left);
                :};

TAG_BOTON   ::= s_less:n1 r_boton LISTA_ELEMENTOS:n2  s_greather contenido_tag:n3 s_less s_div r_boton s_greather
                {:
                    RESULT = new Sentencia_Boton(n2,n3,n1right,n1left,false);
                :}
                |s_less:n1 r_boton LISTA_ELEMENTOS:n2  s_greather s_less r_texto ELEMENTO_NOMBRE s_greather contenido_tag:n3 s_less s_div r_texto s_greather s_less s_div r_boton s_greather
                {:
                    RESULT = new Sentencia_Boton(n2,n3,n1right,n1left,false);
                :}
                |s_less:n1 r_boton LISTA_ELEMENTOS:n2  s_greather  s_less s_div r_boton s_greather
                {:
                    RESULT = new Sentencia_Boton(n2,n1right,n1left,false);
                :};  

TAG_ENVIAR   ::= s_less:n1 r_enviar LISTA_ELEMENTOS:n2  s_greather contenido_tag:n3 s_less s_div r_enviar s_greather
                {:
                    RESULT = new Sentencia_Boton(n2,n3,n1right,n1left,true);
                :}
                |s_less:n1 r_enviar LISTA_ELEMENTOS:n2  s_greather s_less r_texto ELEMENTO_NOMBRE s_greather contenido_tag:n3 s_less s_div r_texto s_greather s_less s_div r_enviar s_greather
                {:
                    RESULT = new Sentencia_Boton(n2,n3,n1right,n1left,true);
                :}
                |s_less:n1 r_enviar LISTA_ELEMENTOS:n2  s_greather  s_less s_div r_enviar s_greather
                {:
                    RESULT = new Sentencia_Boton(n2,n1right,n1left,true);
                :};     

TAG_MULTIMEDIA ::=  s_less:n1 r_multimedia LISTA_ELEMENTOS:n2  s_greather  s_less s_div r_multimedia s_greather
                    {:
                        RESULT = new Sentencia_Multimedia(n2,n1right,n1left,entrada);
                    :};                

CONTENIDO_CONTROL   ::= CONTENIDO_CONTROL:n2 TAG_DEFECTO:n1
                        {:
                            RESULT = n2;
                            RESULT.add(n1);
                        :}
                        |CONTENIDO_CONTROL:n1 TAG_LISTA_DATOS:n2
                        {:
                            RESULT = n1;
                            RESULT.addAll(n2);
                        :}
                        |TAG_LISTA_DATOS:n
                        {:
                            RESULT = n;
                        :}
                        |TAG_DEFECTO:n
                        {:
                            RESULT = new ArrayList<GXML_Elemento>();
                            RESULT.add(n);
                        :};

TAG_DEFECTO  ::=    s_less:n1 r_defecto s_greather contenido_tag:n2 s_less s_div r_defecto s_greather                   
                    {:
                        RESULT = new GXML_Elemento("defecto", Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2, n1right, n1left);
                    :};


TAG_LISTA_DATOS  ::=    s_less:n1 r_listadatos s_greather LISTA_DATOS:n2 s_less s_div r_listadatos s_greather                   
                        {:
                            RESULT = n2;
                        :}
                        |s_less:n1 r_listadatos s_greather s_less s_div r_listadatos s_greather                   
                        {:
                            RESULT = new ArrayList<GXML_Elemento>();
                        :};

LISTA_DATOS  ::=    LISTA_DATOS:n1 TAG_DATO:n2
                    {:
                        RESULT = n1;
                        RESULT.add(n2);
                    :}
                    |TAG_DATO:n
                    {:
                        RESULT = new ArrayList<GXML_Elemento>();
                        RESULT.add(n);
                    :};                        

TAG_DATO  ::=  s_less:n1 r_dato s_greather contenido_tag:n2 s_less s_div r_dato s_greather  
                {:
                    RESULT = new GXML_Elemento("dato", Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2, n1right, n1left);
                :};

/***************************************ELEMENTOS DE LAS ETIQUETAS***************************************************/

LISTA_ELEMENTOS ::= LISTA_ELEMENTOS:n1 ELEMENTO:n2
                    {:
                        RESULT = n1;
                        RESULT.add(n2);
                    :}
                    |ELEMENTO:n
                    {:
                        RESULT = new ArrayList<GXML_Elemento>();
                        RESULT.add(n);
                    :};

ELEMENTO   ::=  ELEMENTO_ID:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_NOMBRE:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_TIPO:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_COLOR:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_ACCIONINICIAL:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_ACCIONFINAL:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_POSX:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_POSY:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_ALTO:n  
                {:
                    RESULT = n;
                :}
                |ELEMENTO_ANCHO:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_BORDE:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_FUENTE:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_TAM:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_NEGRITA:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_CURSIVA:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_TEXTO:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_NUMERICO:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_TEXTOAREA:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_DESPLEGABLE:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_MAXIMO:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_MINIMO:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_ACCION:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_REFERENCIA:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_PATH:n
                {:
                    RESULT = n;
                :}
                |ELEMENTO_AUTOREPRODUCCION:n
                {:
                    RESULT = n;
                :};                


ELEMENTO_ID ::= r_id:n1 s_equal cadena:n2
                {:
                    RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                :};

ELEMENTO_NOMBRE ::= r_nombre:n1 s_equal cadena:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                    :};

ELEMENTO_TIPO ::=   r_tipo:n1 s_equal cadena:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                    :};      

ELEMENTO_POSX ::=   r_posx:n1 s_equal entero:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    :}
                    |r_posx:n1 s_equal decimal:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.decimal, Double.parseDouble(n2), n1right, n1left);
                    :};

ELEMENTO_POSY ::=   r_posy:n1 s_equal entero:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    :}
                    |r_posy:n1 s_equal decimal:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.decimal, Double.parseDouble(n2), n1right, n1left);
                    :};                    

ELEMENTO_ANCHO ::=   r_alto:n1 s_equal entero:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    :}
                    |r_alto:n1 s_equal decimal:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.decimal, Double.parseDouble(n2), n1right, n1left);
                    :};

ELEMENTO_ALTO ::=   r_ancho:n1 s_equal entero:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    :}
                    |r_ancho:n1 s_equal decimal:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.decimal, Double.parseDouble(n2), n1right, n1left);
                    :};   

ELEMENTO_BORDE ::=  r_borde:n1 s_equal booleano:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, n2.equalsIgnoreCase("verdadero") ? true : false, n1right, n1left);
                    :};  

ELEMENTO_COLOR ::=  r_color:n1 s_equal cadena:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                    :};

ELEMENTO_FUENTE ::= r_fuente:n1 s_equal cadena:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                    :}; 

ELEMENTO_TAM   ::=  r_tamano:n1 s_equal entero:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    :}
                    |r_tamano:n1 s_equal decimal:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Double.parseDouble(n2), n1right, n1left);
                    :};

ELEMENTO_NEGRITA   ::=  r_negrita:n1 s_equal booleano:n2
                        {:
                            RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, n2.equalsIgnoreCase("verdadero") ? true : false, n1right, n1left);
                        :};                                 

ELEMENTO_CURSIVA   ::=  r_cursiva:n1 s_equal booleano:n2
                        {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, n2.equalsIgnoreCase("verdadero") ? true : false, n1right, n1left);
                        :};  
              
ELEMENTO_MAXIMO ::= r_maximo:n1 s_equal entero:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Integer.parseInt(n2), n1right, n1left);
                    :}
                    |r_maximo:n1 s_equal decimal:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.entero, Double.parseDouble(n2), n1right, n1left);
                    :};                                 

ELEMENTO_MINIMO   ::=   r_minimo:n1 s_equal entero:n2
                        {:
                            RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, Integer.parseInt(n2), n1right, n1left);
                        :}
                        |r_minimo:n1 s_equal decimal:n2
                        {:
                            RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, Double.parseDouble(n2), n1right, n1left);
                        :};      

ELEMENTO_REFERENCIA ::= r_referencia:n1 s_equal cadena:n2
                        {:
                            RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                        :};                                    

ELEMENTO_ACCIONINICIAL ::=  r_accioninicial:n1 s_equal s_key_open SENTENCIA_LLAMADA:n2 s_key_close
                            {:
                                RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.identificador, n2, n1right, n1left);
                            :}; 

ELEMENTO_ACCIONFINAL   ::=  r_accionfinal:n1 s_equal s_key_open SENTENCIA_LLAMADA:n2  s_key_close
                            {:
                                RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.identificador, n2, n1right, n1left);
                            :}; 

ELEMENTO_ACCION ::= r_accion:n1 s_equal s_key_open SENTENCIA_LLAMADA:n2 s_key_close
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.identificador, n2, n1right, n1left);
                    :};    

ELEMENTO_PATH  ::=  r_path:n1 s_equal cadena:n2
                    {:
                        RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.cadena, n2.substring(1,n2.length()-1), n1right, n1left);
                    :};

ELEMENTO_AUTOREPRODUCCION  ::=  r_autoreproduccion:n1 s_equal booleano:n2
                                {:
                                    RESULT = new GXML_Elemento(n1, Tabla_Enums.tipo_primitivo_Simbolo.booleano, n2, n1right, n1left);
                                :};

/*******************************************EXPRESIONES*******************************************************************************/
SENTENCIA_LLAMADA   ::=  identificador:n1 s_par_open LISTA_EXPRESIONES:n2 s_par_close
                         {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_LLAMADA");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n2);
                         :}
                         |identificador:n1 s_par_open s_par_close
                         {:
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("SENTENCIA_LLAMADA");
                            RESULT.setValor(n1);
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                         :};

/*******************************************EXPRESIONES*******************************************************************************/

LISTA_EXPRESIONES ::=   LISTA_EXPRESIONES:n1 s_coma EXPRESION:n2 
                        {:
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(n2right));
                            nodo_expresion.setColumna(String.valueOf(n2left));
                            nodo_expresion.getHijos().add(n2);

                            RESULT = n1;
                            RESULT.getHijos().add(nodo_expresion);
                        :}
                        |EXPRESION:n
                        {:
                            Nodo_AST_FS nodo_expresion = new Nodo_AST_FS();
                            nodo_expresion.setEtiqueta("EXPRESION");
                            nodo_expresion.setValor("");
                            nodo_expresion.setFila(String.valueOf(nright));
                            nodo_expresion.setColumna(String.valueOf(nleft));
                            nodo_expresion.getHijos().add(n);

                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta("LISTA_EXPRESIONES");
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(nright));
                            RESULT.setColumna(String.valueOf(nleft));
                            RESULT.getHijos().add(nodo_expresion);
                        :};


EXPRESION ::=   EXPRESION_ARITMETICA:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_ARITMETICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |EXPRESION_RELACIONAL:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_RELACIONAL");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |EXPRESION_UNARIA:n
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_UNARIA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :}
                |EXPRESION_LOGICA:n  
                {:
                    RESULT = new Nodo_AST_FS();
                    RESULT.setEtiqueta("EXPRESION_LOGICA");
                    RESULT.setValor("");
                    RESULT.setFila(String.valueOf(nright));
                    RESULT.setColumna(String.valueOf(nleft));
                    RESULT.getHijos().add(n);
                :} 
                |s_par_open  EXPRESION:n  s_par_close
                {:
                    RESULT = n;
                :}               
                |DATO_PRIMITIVO:n 
                {:
                    RESULT = n;
                :};

EXPRESION_ARITMETICA ::=    EXPRESION:n1 s_plus:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_minus:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_mul:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_div:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_mod:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_to:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_increment:o
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            :}
                            |EXPRESION:n1 s_decrement:o
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                            :};

EXPRESION_UNARIA ::=    s_minus:o EXPRESION:n1
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        :}
                        |s_plus:o EXPRESION:n1
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        :};

EXPRESION_LOGICA ::=    EXPRESION:n1 s_or:o EXPRESION:n2
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        :}
                        |EXPRESION:n1 s_and:o EXPRESION:n2
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                            RESULT.getHijos().add(n2);
                        :}
                        |s_not:o EXPRESION:n1
                        {:                                
                            RESULT = new Nodo_AST_FS();
                            RESULT.setEtiqueta(o);
                            RESULT.setValor("");
                            RESULT.setFila(String.valueOf(n1right));
                            RESULT.setColumna(String.valueOf(n1left));
                            RESULT.getHijos().add(n1);
                        :};

EXPRESION_RELACIONAL ::=    EXPRESION:n1 s_greather:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_less:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_greather_equal:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_less_equal:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_compare:o EXPRESION:n2
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :}
                            |EXPRESION:n1 s_diferent:o EXPRESION:n2   
                            {:                                
                                RESULT = new Nodo_AST_FS();
                                RESULT.setEtiqueta(o);
                                RESULT.setValor("");
                                RESULT.setFila(String.valueOf(n1right));
                                RESULT.setColumna(String.valueOf(n1left));
                                RESULT.getHijos().add(n1);
                                RESULT.getHijos().add(n2);
                            :};                     
  
DATO_PRIMITIVO ::=  r_nulo:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.nulo.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |booleano:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.booleano.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |entero:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.entero.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |decimal:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.decimal.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |caracter:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.caracter.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft)); 
                    :}
                    |cadena:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.cadena.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :}
                    |identificador:v
                    {:
                        RESULT = new Nodo_AST_FS();
                        RESULT.setEtiqueta(Tabla_Enums.tipo_primitivo_Simbolo.identificador.toString());
                        RESULT.setValor(v);
                        RESULT.setFila(String.valueOf(vright));
                        RESULT.setColumna(String.valueOf(vleft));
                    :};                         